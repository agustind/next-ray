{
  "version": 3,
  "sources": ["../node_modules/ansi-regex/index.js", "../node_modules/ansi-styles/index.js", "../node_modules/dayjs/dayjs.min.js", "../node_modules/xml-parser-xo/dist/cjs/index.js", "../node_modules/xml-formatter/dist/cjs/index.js", "../node_modules/stopwatch-node/dist/taskinfo.js", "../node_modules/stopwatch-node/dist/stopwatch.js", "../node_modules/crypt/crypt.js", "../node_modules/charenc/charenc.js", "../node_modules/is-buffer/index.js", "../node_modules/md5/md5.js", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/@permafrost-dev/pretty-format/dist/index.esm.mjs", "../node_modules/@permafrost-dev/pretty-format/dist/index.esm.mjs", "../node_modules/@permafrost-dev/pretty-format/dist/index.esm.mjs", "../node_modules/@permafrost-dev/pretty-format/dist/index.esm.mjs", "../node_modules/@permafrost-dev/pretty-format/dist/index.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/uuid/dist/esm-browser/native.js", "../node_modules/uuid/dist/esm-browser/v4.js", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/axios/lib/helpers/bind.js", "../node_modules/axios/lib/utils.js", "../node_modules/axios/lib/core/AxiosError.js", "../node_modules/axios/lib/helpers/null.js", "../node_modules/axios/lib/helpers/toFormData.js", "../node_modules/axios/lib/helpers/AxiosURLSearchParams.js", "../node_modules/axios/lib/helpers/buildURL.js", "../node_modules/axios/lib/core/InterceptorManager.js", "../node_modules/axios/lib/defaults/transitional.js", "../node_modules/axios/lib/platform/browser/classes/URLSearchParams.js", "../node_modules/axios/lib/platform/browser/classes/FormData.js", "../node_modules/axios/lib/platform/browser/classes/Blob.js", "../node_modules/axios/lib/platform/browser/index.js", "../node_modules/axios/lib/helpers/toURLEncodedForm.js", "../node_modules/axios/lib/helpers/formDataToJSON.js", "../node_modules/axios/lib/defaults/index.js", "../node_modules/axios/lib/helpers/parseHeaders.js", "../node_modules/axios/lib/core/AxiosHeaders.js", "../node_modules/axios/lib/core/transformData.js", "../node_modules/axios/lib/cancel/isCancel.js", "../node_modules/axios/lib/cancel/CanceledError.js", "../node_modules/axios/lib/core/settle.js", "../node_modules/axios/lib/helpers/cookies.js", "../node_modules/axios/lib/helpers/isAbsoluteURL.js", "../node_modules/axios/lib/helpers/combineURLs.js", "../node_modules/axios/lib/core/buildFullPath.js", "../node_modules/axios/lib/helpers/isURLSameOrigin.js", "../node_modules/axios/lib/helpers/parseProtocol.js", "../node_modules/axios/lib/helpers/speedometer.js", "../node_modules/axios/lib/adapters/xhr.js", "../node_modules/axios/lib/adapters/adapters.js", "../node_modules/axios/lib/core/dispatchRequest.js", "../node_modules/axios/lib/core/mergeConfig.js", "../node_modules/axios/lib/env/data.js", "../node_modules/axios/lib/helpers/validator.js", "../node_modules/axios/lib/core/Axios.js", "../node_modules/axios/lib/cancel/CancelToken.js", "../node_modules/axios/lib/helpers/spread.js", "../node_modules/axios/lib/helpers/isAxiosError.js", "../node_modules/axios/lib/helpers/HttpStatusCode.js", "../node_modules/axios/lib/axios.js", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../src/index.ts", "../src/client.tsx", "../node_modules/@babel/runtime/helpers/esm/extends.js", "../node_modules/@radix-ui/react-slot/dist/index.module.js", "../node_modules/@radix-ui/react-compose-refs/dist/index.module.js", "../node_modules/@radix-ui/react-slot/dist/index.module.js", "../src/client.tsx"],
  "sourcesContent": [
    "'use strict';\n\nmodule.exports = ({onlyFirst = false} = {}) => {\n\tconst pattern = [\n\t\t'[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n\t\t'(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n\t].join('|');\n\n\treturn new RegExp(pattern, onlyFirst ? undefined : 'g');\n};\n",
  "'use strict';\n\nconst ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi256 = (offset = 0) => code => `\\u001B[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m = (offset = 0) => (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\toverline: [53, 55],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\n\t\t\t// Bright color\n\t\t\tblackBright: [90, 39],\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Alias bright black as gray (and grey)\n\tstyles.color.gray = styles.color.blackBright;\n\tstyles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n\tstyles.color.grey = styles.color.blackBright;\n\tstyles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi256 = wrapAnsi256();\n\tstyles.color.ansi16m = wrapAnsi16m();\n\tstyles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n\t// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\tObject.defineProperties(styles, {\n\t\trgbToAnsi256: {\n\t\t\tvalue: (red, green, blue) => {\n\t\t\t\t// We use the extended greyscale palette here, with the exception of\n\t\t\t\t// black and white. normal palette only has 4 greyscale shades.\n\t\t\t\tif (red === green && green === blue) {\n\t\t\t\t\tif (red < 8) {\n\t\t\t\t\t\treturn 16;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (red > 248) {\n\t\t\t\t\t\treturn 231;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Math.round(((red - 8) / 247) * 24) + 232;\n\t\t\t\t}\n\n\t\t\t\treturn 16 +\n\t\t\t\t\t(36 * Math.round(red / 255 * 5)) +\n\t\t\t\t\t(6 * Math.round(green / 255 * 5)) +\n\t\t\t\t\tMath.round(blue / 255 * 5);\n\t\t\t},\n\t\t\tenumerable: false\n\t\t},\n\t\thexToRgb: {\n\t\t\tvalue: hex => {\n\t\t\t\tconst matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n\t\t\t\tif (!matches) {\n\t\t\t\t\treturn [0, 0, 0];\n\t\t\t\t}\n\n\t\t\t\tlet {colorString} = matches.groups;\n\n\t\t\t\tif (colorString.length === 3) {\n\t\t\t\t\tcolorString = colorString.split('').map(character => character + character).join('');\n\t\t\t\t}\n\n\t\t\t\tconst integer = Number.parseInt(colorString, 16);\n\n\t\t\t\treturn [\n\t\t\t\t\t(integer >> 16) & 0xFF,\n\t\t\t\t\t(integer >> 8) & 0xFF,\n\t\t\t\t\tinteger & 0xFF\n\t\t\t\t];\n\t\t\t},\n\t\t\tenumerable: false\n\t\t},\n\t\thexToAnsi256: {\n\t\t\tvalue: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n\t\t\tenumerable: false\n\t\t}\n\t});\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n",
  "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));",
  "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingError = void 0;\nclass ParsingError extends Error {\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n    }\n}\nexports.ParsingError = ParsingError;\nlet parsingState;\nfunction nextChild() {\n    return element(false) || text() || comment() || cdata();\n}\nfunction nextRootChild() {\n    match(/\\s*/);\n    return element(true) || comment() || doctype() || processingInstruction(false);\n}\nfunction parseDocument() {\n    const declaration = processingInstruction(true);\n    const children = [];\n    let documentRootNode;\n    let child = nextRootChild();\n    while (child) {\n        if (child.node.type === 'Element') {\n            if (documentRootNode) {\n                throw new Error('Found multiple root nodes');\n            }\n            documentRootNode = child.node;\n        }\n        if (!child.excluded) {\n            children.push(child.node);\n        }\n        child = nextRootChild();\n    }\n    if (!documentRootNode) {\n        throw new ParsingError('Failed to parse XML', 'Root Element not found');\n    }\n    if (parsingState.xml.length !== 0) {\n        throw new ParsingError('Failed to parse XML', 'Not Well-Formed XML');\n    }\n    return {\n        declaration: declaration ? declaration.node : null,\n        root: documentRootNode,\n        children\n    };\n}\nfunction processingInstruction(matchDeclaration) {\n    const m = matchDeclaration ? match(/^<\\?(xml)\\s*/) : match(/^<\\?([\\w-:.]+)\\s*/);\n    if (!m)\n        return;\n    // tag\n    const node = {\n        name: m[1],\n        type: 'ProcessingInstruction',\n        attributes: {}\n    };\n    // attributes\n    while (!(eos() || is('?>'))) {\n        const attr = attribute();\n        if (attr) {\n            node.attributes[attr.name] = attr.value;\n        }\n        else {\n            return;\n        }\n    }\n    match(/\\?>/);\n    return {\n        excluded: matchDeclaration ? false : parsingState.options.filter(node) === false,\n        node\n    };\n}\nfunction element(matchRoot) {\n    const m = match(/^<([^?!</>\\s]+)\\s*/);\n    if (!m)\n        return;\n    // name\n    const node = {\n        type: 'Element',\n        name: m[1],\n        attributes: {},\n        children: []\n    };\n    const excluded = matchRoot ? false : parsingState.options.filter(node) === false;\n    // attributes\n    while (!(eos() || is('>') || is('?>') || is('/>'))) {\n        const attr = attribute();\n        if (attr) {\n            node.attributes[attr.name] = attr.value;\n        }\n        else {\n            return;\n        }\n    }\n    // self closing tag\n    if (match(/^\\s*\\/>/)) {\n        node.children = null;\n        return {\n            excluded,\n            node\n        };\n    }\n    match(/\\??>/);\n    // children\n    let child = nextChild();\n    while (child) {\n        if (!child.excluded) {\n            node.children.push(child.node);\n        }\n        child = nextChild();\n    }\n    // closing\n    if (parsingState.options.strictMode) {\n        const closingTag = `</${node.name}>`;\n        if (parsingState.xml.startsWith(closingTag)) {\n            parsingState.xml = parsingState.xml.slice(closingTag.length);\n        }\n        else {\n            throw new ParsingError('Failed to parse XML', `Closing tag not matching \"${closingTag}\"`);\n        }\n    }\n    else {\n        match(/^<\\/\\s*[\\w-:.\\u00C0-\\u00FF]+>/);\n    }\n    return {\n        excluded,\n        node\n    };\n}\nfunction doctype() {\n    const m = match(/^<!DOCTYPE\\s+\\S+\\s+SYSTEM[^>]*>/) || match(/^<!DOCTYPE\\s+\\S+\\s+PUBLIC[^>]*>/) || match(/^<!DOCTYPE\\s+\\S+\\s+\\[[^\\]]*]>/);\n    if (m) {\n        const node = {\n            type: 'DocumentType',\n            content: m[0]\n        };\n        return {\n            excluded: parsingState.options.filter(node) === false,\n            node\n        };\n    }\n}\nfunction cdata() {\n    if (parsingState.xml.startsWith('<![CDATA[')) {\n        const endPositionStart = parsingState.xml.indexOf(']]>');\n        if (endPositionStart > -1) {\n            const endPositionFinish = endPositionStart + 3;\n            const node = {\n                type: 'CDATA',\n                content: parsingState.xml.substring(0, endPositionFinish)\n            };\n            parsingState.xml = parsingState.xml.slice(endPositionFinish);\n            return {\n                excluded: parsingState.options.filter(node) === false,\n                node\n            };\n        }\n    }\n}\nfunction comment() {\n    const m = match(/^<!--[\\s\\S]*?-->/);\n    if (m) {\n        const node = {\n            type: 'Comment',\n            content: m[0]\n        };\n        return {\n            excluded: parsingState.options.filter(node) === false,\n            node\n        };\n    }\n}\nfunction text() {\n    const m = match(/^([^<]+)/);\n    if (m) {\n        const node = {\n            type: 'Text',\n            content: m[1]\n        };\n        return {\n            excluded: parsingState.options.filter(node) === false,\n            node\n        };\n    }\n}\nfunction attribute() {\n    const m = match(/([^=]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^>\\s]+)\\s*/);\n    if (m) {\n        return {\n            name: m[1].trim(),\n            value: stripQuotes(m[2].trim())\n        };\n    }\n}\nfunction stripQuotes(val) {\n    return val.replace(/^['\"]|['\"]$/g, '');\n}\n/**\n * Match `re` and advance the string.\n */\nfunction match(re) {\n    const m = parsingState.xml.match(re);\n    if (m) {\n        parsingState.xml = parsingState.xml.slice(m[0].length);\n        return m;\n    }\n}\n/**\n * End-of-source.\n */\nfunction eos() {\n    return 0 === parsingState.xml.length;\n}\n/**\n * Check for `prefix`.\n */\nfunction is(prefix) {\n    return 0 === parsingState.xml.indexOf(prefix);\n}\n/**\n * Parse the given XML string into an object.\n */\nfunction parseXml(xml, options = {}) {\n    xml = xml.trim();\n    const filter = options.filter || (() => true);\n    parsingState = {\n        xml,\n        options: Object.assign(Object.assign({}, options), { filter, strictMode: options.strictMode === true })\n    };\n    return parseDocument();\n}\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n    module.exports = parseXml;\n}\nexports.default = parseXml;\n//# sourceMappingURL=index.js.map",
  "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst xml_parser_xo_1 = __importDefault(require(\"xml-parser-xo\"));\nfunction newLine(state) {\n    if (!state.options.indentation && !state.options.lineSeparator)\n        return;\n    state.content += state.options.lineSeparator;\n    let i;\n    for (i = 0; i < state.level; i++) {\n        state.content += state.options.indentation;\n    }\n}\nfunction indent(state) {\n    state.content = state.content.replace(/ +$/, '');\n    let i;\n    for (i = 0; i < state.level; i++) {\n        state.content += state.options.indentation;\n    }\n}\nfunction appendContent(state, content) {\n    state.content += content;\n}\nfunction processNode(node, state, preserveSpace) {\n    if (typeof node.content === 'string') {\n        processContent(node.content, state, preserveSpace);\n    }\n    else if (node.type === 'Element') {\n        processElementNode(node, state, preserveSpace);\n    }\n    else if (node.type === 'ProcessingInstruction') {\n        processProcessingIntruction(node, state);\n    }\n    else {\n        throw new Error('Unknown node type: ' + node.type);\n    }\n}\nfunction processContent(content, state, preserveSpace) {\n    if (!preserveSpace) {\n        const trimmedContent = content.trim();\n        if (state.options.lineSeparator) {\n            content = trimmedContent;\n        }\n        else if (trimmedContent.length === 0) {\n            content = trimmedContent;\n        }\n    }\n    if (content.length > 0) {\n        if (!preserveSpace && state.content.length > 0) {\n            newLine(state);\n        }\n        appendContent(state, content);\n    }\n}\nfunction isPathMatchingIgnoredPaths(path, ignoredPaths) {\n    const fullPath = '/' + path.join('/');\n    const pathLastPart = path[path.length - 1];\n    return ignoredPaths.includes(pathLastPart) || ignoredPaths.includes(fullPath);\n}\nfunction processElementNode(node, state, preserveSpace) {\n    state.path.push(node.name);\n    if (!preserveSpace && state.content.length > 0) {\n        newLine(state);\n    }\n    appendContent(state, '<' + node.name);\n    processAttributes(state, node.attributes);\n    if (node.children === null) {\n        const selfClosingNodeClosingTag = state.options.whiteSpaceAtEndOfSelfclosingTag ? ' />' : '/>';\n        // self-closing node\n        appendContent(state, selfClosingNodeClosingTag);\n    }\n    else if (node.children.length === 0) {\n        // empty node\n        appendContent(state, '></' + node.name + '>');\n    }\n    else {\n        const nodeChildren = node.children;\n        appendContent(state, '>');\n        state.level++;\n        let nodePreserveSpace = node.attributes['xml:space'] === 'preserve';\n        let ignoredPath = false;\n        if (!nodePreserveSpace && state.options.ignoredPaths) {\n            ignoredPath = isPathMatchingIgnoredPaths(state.path, state.options.ignoredPaths);\n            nodePreserveSpace = ignoredPath;\n        }\n        if (!nodePreserveSpace && state.options.collapseContent) {\n            let containsTextNodes = false;\n            let containsTextNodesWithLineBreaks = false;\n            let containsNonTextNodes = false;\n            nodeChildren.forEach(function (child, index) {\n                if (child.type === 'Text') {\n                    if (child.content.includes('\\n')) {\n                        containsTextNodesWithLineBreaks = true;\n                        child.content = child.content.trim();\n                    }\n                    else if (index === 0 || index === nodeChildren.length - 1) {\n                        if (child.content.trim().length === 0) {\n                            // If the text node is at the start or end and is empty, it should be ignored when formatting\n                            child.content = '';\n                        }\n                    }\n                    if (child.content.trim().length > 0) {\n                        containsTextNodes = true;\n                    }\n                }\n                else if (child.type === 'CDATA') {\n                    containsTextNodes = true;\n                }\n                else {\n                    containsNonTextNodes = true;\n                }\n            });\n            if (containsTextNodes && (!containsNonTextNodes || !containsTextNodesWithLineBreaks)) {\n                nodePreserveSpace = true;\n            }\n        }\n        nodeChildren.forEach(function (child) {\n            processNode(child, state, preserveSpace || nodePreserveSpace);\n        });\n        state.level--;\n        if (!preserveSpace && !nodePreserveSpace) {\n            newLine(state);\n        }\n        if (ignoredPath) {\n            indent(state);\n        }\n        appendContent(state, '</' + node.name + '>');\n    }\n    state.path.pop();\n}\nfunction processAttributes(state, attributes) {\n    Object.keys(attributes).forEach(function (attr) {\n        const escaped = attributes[attr].replace(/\"/g, '&quot;');\n        appendContent(state, ' ' + attr + '=\"' + escaped + '\"');\n    });\n}\nfunction processProcessingIntruction(node, state) {\n    if (state.content.length > 0) {\n        newLine(state);\n    }\n    appendContent(state, '<?' + node.name);\n    processAttributes(state, node.attributes);\n    appendContent(state, '?>');\n}\n/**\n * Converts the given XML into human readable format.\n */\nfunction formatXml(xml, options = {}) {\n    options.indentation = 'indentation' in options ? options.indentation : '    ';\n    options.collapseContent = options.collapseContent === true;\n    options.lineSeparator = 'lineSeparator' in options ? options.lineSeparator : '\\r\\n';\n    options.whiteSpaceAtEndOfSelfclosingTag = options.whiteSpaceAtEndOfSelfclosingTag === true;\n    options.throwOnFailure = options.throwOnFailure !== false;\n    try {\n        const parsedXml = (0, xml_parser_xo_1.default)(xml, { filter: options.filter, strictMode: options.strictMode });\n        const state = { content: '', level: 0, options: options, path: [] };\n        if (parsedXml.declaration) {\n            processProcessingIntruction(parsedXml.declaration, state);\n        }\n        parsedXml.children.forEach(function (child) {\n            processNode(child, state, false);\n        });\n        if (!options.lineSeparator) {\n            return state.content;\n        }\n        return state.content\n            .replace(/\\r\\n/g, '\\n')\n            .replace(/\\n/g, options.lineSeparator);\n    }\n    catch (err) {\n        if (options.throwOnFailure) {\n            throw err;\n        }\n        return xml;\n    }\n}\nformatXml.minify = (xml, options = {}) => {\n    return formatXml(xml, Object.assign(Object.assign({}, options), { indentation: '', lineSeparator: '' }));\n};\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n    module.exports = formatXml;\n}\nexports.default = formatXml;\n//# sourceMappingURL=index.js.map",
  "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TaskInfo = void 0;\n/**\n* class to hold data about one task executed within the stop watch.\n*/\nclass TaskInfo {\n    constructor(taskName, timeMillis) {\n        this._taskName = taskName;\n        this._timeMillis = timeMillis;\n    }\n    get taskName() {\n        return this._taskName;\n    }\n    get timeMills() {\n        return this._timeMillis;\n    }\n    get percentage() {\n        return this._percentage;\n    }\n    calculatePercentage(totalTimeMillis) {\n        this._percentage = (this._timeMillis * 100 / totalTimeMillis).toFixed(2);\n        return this._percentage;\n    }\n}\nexports.TaskInfo = TaskInfo;\n//# sourceMappingURL=taskinfo.js.map",
  "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StopWatch = void 0;\nconst taskinfo_1 = require(\"./taskinfo\");\nclass StopWatch {\n    constructor(id = '') {\n        this.currentTaskName = null;\n        this.startTimeMillis = 0;\n        this.totalTimeMillis = 0;\n        this.taskList = [];\n        this.id = id;\n    }\n    /**\n     * start a task\n     */\n    start(taskName = '') {\n        this.currentTaskName !== null && this.throwError('Can\\'t start StopWatch: it\\'s already running');\n        this.currentTaskName = taskName;\n        this.startTimeMillis = Date.now();\n    }\n    /**\n     * stop the current task\n     */\n    stop() {\n        this.currentTaskName === null && this.throwError('Can\\'t stop StopWatch: it\\'s not running');\n        const lastTime = Date.now() - this.startTimeMillis;\n        this.totalTimeMillis += lastTime;\n        const lastTaskInfo = new taskinfo_1.TaskInfo(this.currentTaskName, lastTime);\n        this.taskList.push(lastTaskInfo);\n        this.currentTaskName = null;\n    }\n    /**\n     * Return a string with a table describing all tasks performed.\n     */\n    prettyPrint() {\n        const output = [this.shortSummary()];\n        if (this.taskList.length) {\n            output.push('------------------------------------------');\n            output.push('ms \\t\\t % \\t\\t Task name');\n            output.push('------------------------------------------');\n            this.taskList.forEach((task) => {\n                let percentage = '0';\n                try {\n                    percentage = task.calculatePercentage(this.totalTimeMillis);\n                }\n                catch (e) {\n                }\n                output.push(`${task.timeMills} \\t\\t ${percentage} \\t\\t ${task.taskName}`);\n            });\n        }\n        else {\n            output.push(StopWatch.NoTaskMessage);\n        }\n        const outputString = output.join('\\n');\n        console.info(outputString);\n        return outputString;\n    }\n    /**\n     * Return a task matching the given name\n     */\n    getTask(taskName) {\n        const task = this.taskList.find(task => task.taskName === taskName);\n        task === null || task === void 0 ? void 0 : task.calculatePercentage(this.totalTimeMillis);\n        return task;\n    }\n    /**\n     * Return the total running time in milliseconds\n     */\n    getTotalTime() {\n        return this.totalTimeMillis;\n    }\n    /**\n     * Return a short description of the total running time.\n     */\n    shortSummary() {\n        return `StopWatch '${this.id}' running time (millis) = ${this.totalTimeMillis}`;\n    }\n    /**\n     * Return whether the stop watch is currently running\n     */\n    isRunning() {\n        return this.currentTaskName !== null;\n    }\n    /**\n     * Return the number of tasks timed.\n     */\n    getTaskCount() {\n        return this.taskList.length;\n    }\n    throwError(msg) {\n        throw new Error(msg);\n    }\n}\nexports.StopWatch = StopWatch;\nStopWatch.NoTaskMessage = 'No task info kept';\n//# sourceMappingURL=stopwatch.js.map",
  "(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n",
  "var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n",
  "/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n",
  "(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/collections.ts\nvar getKeysOfEnumerableProperties = /* @__PURE__ */ __name((object) => {\n  const keys = Object.keys(object).sort();\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach((symbol) => {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n  return keys;\n}, \"getKeysOfEnumerableProperties\");\nfunction printIteratorEntries(iterator, config, indentation, depth, refs, printer2, separator = \": \") {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      const name = printer2(current.value[0], config, indentationNext, depth, refs);\n      const value = printer2(current.value[1], config, indentationNext, depth, refs);\n      result += indentationNext + name + separator + value;\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorEntries, \"printIteratorEntries\");\nfunction printIteratorValues(iterator, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext + printer2(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorValues, \"printIteratorValues\");\nfunction printListItems(list, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  if (list.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext + printer2(list[i], config, indentationNext, depth, refs);\n      if (i < list.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printListItems, \"printListItems\");\nfunction printObjectProperties(val, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  const keys = getKeysOfEnumerableProperties(val);\n  if (keys.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer2(key, config, indentationNext, depth, refs);\n      const value = printer2(val[key], config, indentationNext, depth, refs);\n      result += indentationNext + name + \": \" + value;\n      if (i < keys.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printObjectProperties, \"printObjectProperties\");\n\n// src/plugins/ConvertAnsi.ts\nimport * as ansiRegexNs from \"ansi-regex\";\nimport style from \"ansi-styles\";\nvar ansiRegex = ansiRegexNs.default;\nvar toHumanReadableAnsi = /* @__PURE__ */ __name((text) => text.replace(ansiRegex(), (match) => {\n  switch (match) {\n    case style.red.close:\n    case style.green.close:\n    case style.cyan.close:\n    case style.gray.close:\n    case style.white.close:\n    case style.yellow.close:\n    case style.bgRed.close:\n    case style.bgGreen.close:\n    case style.bgYellow.close:\n    case style.inverse.close:\n    case style.dim.close:\n    case style.bold.close:\n    case style.reset.open:\n    case style.reset.close:\n      return \"</>\";\n    case style.red.open:\n      return \"<red>\";\n    case style.green.open:\n      return \"<green>\";\n    case style.cyan.open:\n      return \"<cyan>\";\n    case style.gray.open:\n      return \"<gray>\";\n    case style.white.open:\n      return \"<white>\";\n    case style.yellow.open:\n      return \"<yellow>\";\n    case style.bgRed.open:\n      return \"<bgRed>\";\n    case style.bgGreen.open:\n      return \"<bgGreen>\";\n    case style.bgYellow.open:\n      return \"<bgYellow>\";\n    case style.inverse.open:\n      return \"<inverse>\";\n    case style.dim.open:\n      return \"<dim>\";\n    case style.bold.open:\n      return \"<bold>\";\n    default:\n      return \"\";\n  }\n}), \"toHumanReadableAnsi\");\nvar test = /* @__PURE__ */ __name((val) => typeof val === \"string\" && !!val.match(ansiRegex()), \"test\");\nvar serialize = /* @__PURE__ */ __name((val, config, indentation, depth, refs, printer2) => printer2(toHumanReadableAnsi(val), config, indentation, depth, refs), \"serialize\");\nvar plugin = { serialize, test };\nvar ConvertAnsi_default = plugin;\n\n// src/plugins/DOMCollection.ts\nvar SPACE = \" \";\nvar OBJECT_NAMES = [\"DOMStringMap\", \"NamedNodeMap\"];\nvar ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\nvar testName = /* @__PURE__ */ __name((name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name), \"testName\");\nvar test2 = /* @__PURE__ */ __name((val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name), \"test\");\nvar isNamedNodeMap = /* @__PURE__ */ __name((collection) => collection.constructor.name === \"NamedNodeMap\", \"isNamedNodeMap\");\nvar serialize2 = /* @__PURE__ */ __name((collection, config, indentation, depth, refs, printer2) => {\n  const name = collection.constructor.name;\n  if (++depth > config.maxDepth) {\n    return \"[\" + name + \"]\";\n  }\n  return (config.min ? \"\" : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? \"{\" + printObjectProperties(\n    isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}) : { ...collection },\n    config,\n    indentation,\n    depth,\n    refs,\n    printer2\n  ) + \"}\" : \"[\" + printListItems(Array.from(collection), config, indentation, depth, refs, printer2) + \"]\");\n}, \"serialize\");\nvar plugin2 = { serialize: serialize2, test: test2 };\nvar DOMCollection_default = plugin2;\n\n// src/plugins/lib/escapeHTML.ts\nfunction escapeHTML(str) {\n  return str.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n__name(escapeHTML, \"escapeHTML\");\n\n// src/plugins/lib/markup.ts\nvar printProps = /* @__PURE__ */ __name((keys, props, config, indentation, depth, refs, printer2) => {\n  const indentationNext = indentation + config.indent;\n  const colors = config.colors;\n  return keys.map((key) => {\n    const value = props[key];\n    let printed = printer2(value, config, indentationNext, depth, refs);\n    if (typeof value !== \"string\") {\n      if (printed.indexOf(\"\\n\") !== -1) {\n        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;\n      }\n      printed = \"{\" + printed + \"}\";\n    }\n    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + \"=\" + colors.value.open + printed + colors.value.close;\n  }).join(\"\");\n}, \"printProps\");\nvar printChildren = /* @__PURE__ */ __name((children, config, indentation, depth, refs, printer2) => children.map(\n  (child) => config.spacingOuter + indentation + (typeof child === \"string\" ? printText(child, config) : printer2(child, config, indentation, depth, refs))\n).join(\"\"), \"printChildren\");\nvar printText = /* @__PURE__ */ __name((text, config) => {\n  const contentColor = config.colors.content;\n  return contentColor.open + escapeHTML(text) + contentColor.close;\n}, \"printText\");\nvar printComment = /* @__PURE__ */ __name((comment, config) => {\n  const commentColor = config.colors.comment;\n  return commentColor.open + \"<!--\" + escapeHTML(comment) + \"-->\" + commentColor.close;\n}, \"printComment\");\nvar printElement = /* @__PURE__ */ __name((type, printedProps, printedChildren, config, indentation) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? \">\" + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + \"</\" + type : (printedProps && !config.min ? \"\" : \" \") + \"/\") + \">\" + tagColor.close;\n}, \"printElement\");\nvar printElementAsLeaf = /* @__PURE__ */ __name((type, config) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + tagColor.close + \" \\u2026\" + tagColor.open + \" />\" + tagColor.close;\n}, \"printElementAsLeaf\");\n\n// src/plugins/DOMElement.ts\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar FRAGMENT_NODE = 11;\nvar ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nvar testNode = /* @__PURE__ */ __name((val) => {\n  const constructorName = val.constructor.name;\n  const { nodeType, tagName } = val;\n  const isCustomElement = typeof tagName === \"string\" && tagName.includes(\"-\") || typeof val.hasAttribute === \"function\" && val.hasAttribute(\"is\");\n  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === \"Text\" || nodeType === COMMENT_NODE && constructorName === \"Comment\" || nodeType === FRAGMENT_NODE && constructorName === \"DocumentFragment\";\n}, \"testNode\");\nvar test3 = /* @__PURE__ */ __name((val) => {\n  var _a;\n  return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode(val);\n}, \"test\");\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n__name(nodeIsText, \"nodeIsText\");\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n__name(nodeIsComment, \"nodeIsComment\");\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n__name(nodeIsFragment, \"nodeIsFragment\");\nvar serialize3 = /* @__PURE__ */ __name((node, config, indentation, depth, refs, printer2) => {\n  if (nodeIsText(node)) {\n    return printText(node.data, config);\n  }\n  if (nodeIsComment(node)) {\n    return printComment(node.data, config);\n  }\n  const type = nodeIsFragment(node) ? `DocumentFragment` : node.tagName.toLowerCase();\n  if (++depth > config.maxDepth) {\n    return printElementAsLeaf(type, config);\n  }\n  return printElement(\n    type,\n    printProps(\n      nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),\n      nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n        props[attribute.name] = attribute.value;\n        return props;\n      }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer2\n    ),\n    printChildren(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer2),\n    config,\n    indentation\n  );\n}, \"serialize\");\nvar plugin3 = { serialize: serialize3, test: test3 };\nvar DOMElement_default = plugin3;\n\n// src/index.ts\nimport style2 from \"ansi-styles\";\nvar toString = Object.prototype.toString;\nvar toISOString = Date.prototype.toISOString;\nvar errorToString = Error.prototype.toString;\nvar regExpToString = RegExp.prototype.toString;\nvar getConstructorName = /* @__PURE__ */ __name((val) => typeof val.constructor === \"function\" && val.constructor.name || \"Object\", \"getConstructorName\");\nvar isWindow = /* @__PURE__ */ __name((val) => typeof window !== \"undefined\" && val === window, \"isWindow\");\nvar SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\nvar NEWLINE_REGEXP = /\\n/gi;\nvar PrettyFormatPluginError = class extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.stack = stack;\n    this.name = this.constructor.name;\n  }\n};\n__name(PrettyFormatPluginError, \"PrettyFormatPluginError\");\nfunction isToStringedArrayType(toStringed) {\n  return toStringed === \"[object Array]\" || toStringed === \"[object ArrayBuffer]\" || toStringed === \"[object DataView]\" || toStringed === \"[object Float32Array]\" || toStringed === \"[object Float64Array]\" || toStringed === \"[object Int8Array]\" || toStringed === \"[object Int16Array]\" || toStringed === \"[object Int32Array]\" || toStringed === \"[object Uint8Array]\" || toStringed === \"[object Uint8ClampedArray]\" || toStringed === \"[object Uint16Array]\" || toStringed === \"[object Uint32Array]\";\n}\n__name(isToStringedArrayType, \"isToStringedArrayType\");\nfunction printNumber(val) {\n  return Object.is(val, -0) ? \"-0\" : String(val);\n}\n__name(printNumber, \"printNumber\");\nfunction printBigInt(val) {\n  return String(`${val}n`);\n}\n__name(printBigInt, \"printBigInt\");\nfunction printFunction(val, printFunctionName) {\n  if (!printFunctionName) {\n    return \"[Function]\";\n  }\n  return \"[Function \" + (val.name || \"anonymous\") + \"]\";\n}\n__name(printFunction, \"printFunction\");\nfunction printSymbol(val) {\n  return String(val).replace(SYMBOL_REGEXP, \"Symbol($1)\");\n}\n__name(printSymbol, \"printSymbol\");\nfunction printError(val) {\n  return \"[\" + errorToString.call(val) + \"]\";\n}\n__name(printError, \"printError\");\nfunction printBasicValue(val, printFunctionName, escapeRegex, escapeString) {\n  if (val === true || val === false) {\n    return \"\" + val;\n  }\n  if (val === void 0) {\n    return \"undefined\";\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  const typeOf = typeof val;\n  if (typeOf === \"number\") {\n    return printNumber(val);\n  }\n  if (typeOf === \"bigint\") {\n    return printBigInt(val);\n  }\n  if (typeOf === \"string\") {\n    if (escapeString) {\n      return '\"' + val.replace(/\"|\\\\/g, \"\\\\$&\") + '\"';\n    }\n    return '\"' + val + '\"';\n  }\n  if (typeOf === \"function\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (typeOf === \"symbol\") {\n    return printSymbol(val);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object WeakMap]\") {\n    return \"WeakMap {}\";\n  }\n  if (toStringed === \"[object WeakSet]\") {\n    return \"WeakSet {}\";\n  }\n  if (toStringed === \"[object Function]\" || toStringed === \"[object GeneratorFunction]\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (toStringed === \"[object Symbol]\") {\n    return printSymbol(val);\n  }\n  if (toStringed === \"[object Date]\") {\n    return isNaN(+val) ? \"Date { NaN }\" : toISOString.call(val);\n  }\n  if (toStringed === \"[object Error]\") {\n    return printError(val);\n  }\n  if (toStringed === \"[object RegExp]\") {\n    if (escapeRegex) {\n      return regExpToString.call(val).replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    }\n    return regExpToString.call(val);\n  }\n  if (val instanceof Error) {\n    return printError(val);\n  }\n  return null;\n}\n__name(printBasicValue, \"printBasicValue\");\nfunction printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {\n  if (refs.indexOf(val) !== -1) {\n    return \"[Circular]\";\n  }\n  refs = refs.slice();\n  refs.push(val);\n  const hitMaxDepth = ++depth > config.maxDepth;\n  const min = config.min;\n  if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === \"function\" && !hasCalledToJSON) {\n    return printer(val.toJSON(), config, indentation, depth, refs, true);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object Arguments]\") {\n    return hitMaxDepth ? \"[Arguments]\" : (min ? \"\" : \"Arguments \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (isToStringedArrayType(toStringed)) {\n    return hitMaxDepth ? \"[\" + val.constructor.name + \"]\" : (min ? \"\" : val.constructor.name + \" \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (toStringed === \"[object Map]\") {\n    return hitMaxDepth ? \"[Map]\" : \"Map {\" + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer, \" => \") + \"}\";\n  }\n  if (toStringed === \"[object Set]\") {\n    return hitMaxDepth ? \"[Set]\" : \"Set {\" + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + \"}\";\n  }\n  return hitMaxDepth || isWindow(val) ? \"[\" + getConstructorName(val) + \"]\" : (min ? \"\" : getConstructorName(val) + \" \") + \"{\" + printObjectProperties(val, config, indentation, depth, refs, printer) + \"}\";\n}\n__name(printComplexValue, \"printComplexValue\");\nfunction isNewPlugin(plugin4) {\n  return plugin4.serialize != null;\n}\n__name(isNewPlugin, \"isNewPlugin\");\nfunction printPlugin(plugin4, val, config, indentation, depth, refs) {\n  let printed;\n  try {\n    printed = isNewPlugin(plugin4) ? plugin4.serialize(val, config, indentation, depth, refs, printer) : plugin4.print(\n      val,\n      (valChild) => printer(valChild, config, indentation, depth, refs),\n      (str) => {\n        const indentationNext = indentation + config.indent;\n        return indentationNext + str.replace(NEWLINE_REGEXP, \"\\n\" + indentationNext);\n      },\n      {\n        edgeSpacing: config.spacingOuter,\n        min: config.min,\n        spacing: config.spacingInner\n      },\n      config.colors\n    );\n  } catch (error) {\n    throw new PrettyFormatPluginError(error.message, error.stack);\n  }\n  if (typeof printed !== \"string\") {\n    throw new Error(`pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`);\n  }\n  return printed;\n}\n__name(printPlugin, \"printPlugin\");\nfunction findPlugin(plugins2, val) {\n  for (let p = 0; p < plugins2.length; p++) {\n    try {\n      if (plugins2[p].test(val)) {\n        return plugins2[p];\n      }\n    } catch (error) {\n      throw new PrettyFormatPluginError(error.message, error.stack);\n    }\n  }\n  return null;\n}\n__name(findPlugin, \"findPlugin\");\nfunction printer(val, config, indentation, depth, refs, hasCalledToJSON) {\n  const plugin4 = findPlugin(config.plugins, val);\n  if (plugin4 !== null) {\n    return printPlugin(plugin4, val, config, indentation, depth, refs);\n  }\n  const basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);\n}\n__name(printer, \"printer\");\nvar DEFAULT_THEME = {\n  comment: \"gray\",\n  content: \"reset\",\n  prop: \"yellow\",\n  tag: \"cyan\",\n  value: \"green\"\n};\nvar DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);\nvar DEFAULT_OPTIONS = {\n  callToJSON: true,\n  escapeRegex: false,\n  escapeString: true,\n  highlight: false,\n  indent: 2,\n  maxDepth: Infinity,\n  min: false,\n  plugins: [],\n  printFunctionName: true,\n  theme: DEFAULT_THEME\n};\nfunction validateOptions(options) {\n  Object.keys(options).forEach((key) => {\n    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n    }\n  });\n  if (options.min && options.indent !== void 0 && options.indent !== 0) {\n    throw new Error('pretty-format: Options \"min\" and \"indent\" cannot be used together.');\n  }\n  if (options.theme !== void 0) {\n    if (options.theme === null) {\n      throw new Error(`pretty-format: Option \"theme\" must not be null.`);\n    }\n    if (typeof options.theme !== \"object\") {\n      throw new Error(`pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof options.theme}\".`);\n    }\n  }\n}\n__name(validateOptions, \"validateOptions\");\nvar getColorsHighlight = /* @__PURE__ */ __name((options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];\n  const color = value && style2[value];\n  if (color && typeof color.close === \"string\" && typeof color.open === \"string\") {\n    colors[key] = color;\n  } else {\n    throw new Error(`pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`);\n  }\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsHighlight\");\nvar getColorsEmpty = /* @__PURE__ */ __name(() => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  colors[key] = { close: \"\", open: \"\" };\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsEmpty\");\nvar getPrintFunctionName = /* @__PURE__ */ __name((options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName, \"getPrintFunctionName\");\nvar getEscapeRegex = /* @__PURE__ */ __name((options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex, \"getEscapeRegex\");\nvar getEscapeString = /* @__PURE__ */ __name((options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString, \"getEscapeString\");\nvar getConfig = /* @__PURE__ */ __name((options) => ({\n  callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,\n  colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),\n  escapeRegex: getEscapeRegex(options),\n  escapeString: getEscapeString(options),\n  indent: options && options.min ? \"\" : createIndent(options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent),\n  maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,\n  min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,\n  plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,\n  printFunctionName: getPrintFunctionName(options),\n  spacingInner: options && options.min ? \" \" : \"\\n\",\n  spacingOuter: options && options.min ? \"\" : \"\\n\"\n}), \"getConfig\");\nfunction createIndent(indent) {\n  return new Array(indent + 1).join(\" \");\n}\n__name(createIndent, \"createIndent\");\nfunction format(val, options) {\n  if (options) {\n    validateOptions(options);\n    if (options.plugins) {\n      const plugin4 = findPlugin(options.plugins, val);\n      if (plugin4 !== null) {\n        return printPlugin(plugin4, val, getConfig(options), \"\", 0, []);\n      }\n    }\n  }\n  const basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, getConfig(options), \"\", 0, []);\n}\n__name(format, \"format\");\nvar plugins = {\n  ConvertAnsi: ConvertAnsi_default,\n  DOMCollection: DOMCollection_default,\n  DOMElement: DOMElement_default\n};\nvar src_default = format;\nexport {\n  src_default as default,\n  format,\n  plugins\n};\n//# sourceMappingURL=index.esm.mjs.map\n",
  "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/collections.ts\nvar getKeysOfEnumerableProperties = /* @__PURE__ */ __name((object) => {\n  const keys = Object.keys(object).sort();\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach((symbol) => {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n  return keys;\n}, \"getKeysOfEnumerableProperties\");\nfunction printIteratorEntries(iterator, config, indentation, depth, refs, printer2, separator = \": \") {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      const name = printer2(current.value[0], config, indentationNext, depth, refs);\n      const value = printer2(current.value[1], config, indentationNext, depth, refs);\n      result += indentationNext + name + separator + value;\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorEntries, \"printIteratorEntries\");\nfunction printIteratorValues(iterator, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext + printer2(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorValues, \"printIteratorValues\");\nfunction printListItems(list, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  if (list.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext + printer2(list[i], config, indentationNext, depth, refs);\n      if (i < list.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printListItems, \"printListItems\");\nfunction printObjectProperties(val, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  const keys = getKeysOfEnumerableProperties(val);\n  if (keys.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer2(key, config, indentationNext, depth, refs);\n      const value = printer2(val[key], config, indentationNext, depth, refs);\n      result += indentationNext + name + \": \" + value;\n      if (i < keys.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printObjectProperties, \"printObjectProperties\");\n\n// src/plugins/ConvertAnsi.ts\nimport * as ansiRegexNs from \"ansi-regex\";\nimport style from \"ansi-styles\";\nvar ansiRegex = ansiRegexNs.default;\nvar toHumanReadableAnsi = /* @__PURE__ */ __name((text) => text.replace(ansiRegex(), (match) => {\n  switch (match) {\n    case style.red.close:\n    case style.green.close:\n    case style.cyan.close:\n    case style.gray.close:\n    case style.white.close:\n    case style.yellow.close:\n    case style.bgRed.close:\n    case style.bgGreen.close:\n    case style.bgYellow.close:\n    case style.inverse.close:\n    case style.dim.close:\n    case style.bold.close:\n    case style.reset.open:\n    case style.reset.close:\n      return \"</>\";\n    case style.red.open:\n      return \"<red>\";\n    case style.green.open:\n      return \"<green>\";\n    case style.cyan.open:\n      return \"<cyan>\";\n    case style.gray.open:\n      return \"<gray>\";\n    case style.white.open:\n      return \"<white>\";\n    case style.yellow.open:\n      return \"<yellow>\";\n    case style.bgRed.open:\n      return \"<bgRed>\";\n    case style.bgGreen.open:\n      return \"<bgGreen>\";\n    case style.bgYellow.open:\n      return \"<bgYellow>\";\n    case style.inverse.open:\n      return \"<inverse>\";\n    case style.dim.open:\n      return \"<dim>\";\n    case style.bold.open:\n      return \"<bold>\";\n    default:\n      return \"\";\n  }\n}), \"toHumanReadableAnsi\");\nvar test = /* @__PURE__ */ __name((val) => typeof val === \"string\" && !!val.match(ansiRegex()), \"test\");\nvar serialize = /* @__PURE__ */ __name((val, config, indentation, depth, refs, printer2) => printer2(toHumanReadableAnsi(val), config, indentation, depth, refs), \"serialize\");\nvar plugin = { serialize, test };\nvar ConvertAnsi_default = plugin;\n\n// src/plugins/DOMCollection.ts\nvar SPACE = \" \";\nvar OBJECT_NAMES = [\"DOMStringMap\", \"NamedNodeMap\"];\nvar ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\nvar testName = /* @__PURE__ */ __name((name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name), \"testName\");\nvar test2 = /* @__PURE__ */ __name((val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name), \"test\");\nvar isNamedNodeMap = /* @__PURE__ */ __name((collection) => collection.constructor.name === \"NamedNodeMap\", \"isNamedNodeMap\");\nvar serialize2 = /* @__PURE__ */ __name((collection, config, indentation, depth, refs, printer2) => {\n  const name = collection.constructor.name;\n  if (++depth > config.maxDepth) {\n    return \"[\" + name + \"]\";\n  }\n  return (config.min ? \"\" : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? \"{\" + printObjectProperties(\n    isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}) : { ...collection },\n    config,\n    indentation,\n    depth,\n    refs,\n    printer2\n  ) + \"}\" : \"[\" + printListItems(Array.from(collection), config, indentation, depth, refs, printer2) + \"]\");\n}, \"serialize\");\nvar plugin2 = { serialize: serialize2, test: test2 };\nvar DOMCollection_default = plugin2;\n\n// src/plugins/lib/escapeHTML.ts\nfunction escapeHTML(str) {\n  return str.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n__name(escapeHTML, \"escapeHTML\");\n\n// src/plugins/lib/markup.ts\nvar printProps = /* @__PURE__ */ __name((keys, props, config, indentation, depth, refs, printer2) => {\n  const indentationNext = indentation + config.indent;\n  const colors = config.colors;\n  return keys.map((key) => {\n    const value = props[key];\n    let printed = printer2(value, config, indentationNext, depth, refs);\n    if (typeof value !== \"string\") {\n      if (printed.indexOf(\"\\n\") !== -1) {\n        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;\n      }\n      printed = \"{\" + printed + \"}\";\n    }\n    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + \"=\" + colors.value.open + printed + colors.value.close;\n  }).join(\"\");\n}, \"printProps\");\nvar printChildren = /* @__PURE__ */ __name((children, config, indentation, depth, refs, printer2) => children.map(\n  (child) => config.spacingOuter + indentation + (typeof child === \"string\" ? printText(child, config) : printer2(child, config, indentation, depth, refs))\n).join(\"\"), \"printChildren\");\nvar printText = /* @__PURE__ */ __name((text, config) => {\n  const contentColor = config.colors.content;\n  return contentColor.open + escapeHTML(text) + contentColor.close;\n}, \"printText\");\nvar printComment = /* @__PURE__ */ __name((comment, config) => {\n  const commentColor = config.colors.comment;\n  return commentColor.open + \"<!--\" + escapeHTML(comment) + \"-->\" + commentColor.close;\n}, \"printComment\");\nvar printElement = /* @__PURE__ */ __name((type, printedProps, printedChildren, config, indentation) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? \">\" + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + \"</\" + type : (printedProps && !config.min ? \"\" : \" \") + \"/\") + \">\" + tagColor.close;\n}, \"printElement\");\nvar printElementAsLeaf = /* @__PURE__ */ __name((type, config) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + tagColor.close + \" \\u2026\" + tagColor.open + \" />\" + tagColor.close;\n}, \"printElementAsLeaf\");\n\n// src/plugins/DOMElement.ts\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar FRAGMENT_NODE = 11;\nvar ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nvar testNode = /* @__PURE__ */ __name((val) => {\n  const constructorName = val.constructor.name;\n  const { nodeType, tagName } = val;\n  const isCustomElement = typeof tagName === \"string\" && tagName.includes(\"-\") || typeof val.hasAttribute === \"function\" && val.hasAttribute(\"is\");\n  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === \"Text\" || nodeType === COMMENT_NODE && constructorName === \"Comment\" || nodeType === FRAGMENT_NODE && constructorName === \"DocumentFragment\";\n}, \"testNode\");\nvar test3 = /* @__PURE__ */ __name((val) => {\n  var _a;\n  return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode(val);\n}, \"test\");\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n__name(nodeIsText, \"nodeIsText\");\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n__name(nodeIsComment, \"nodeIsComment\");\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n__name(nodeIsFragment, \"nodeIsFragment\");\nvar serialize3 = /* @__PURE__ */ __name((node, config, indentation, depth, refs, printer2) => {\n  if (nodeIsText(node)) {\n    return printText(node.data, config);\n  }\n  if (nodeIsComment(node)) {\n    return printComment(node.data, config);\n  }\n  const type = nodeIsFragment(node) ? `DocumentFragment` : node.tagName.toLowerCase();\n  if (++depth > config.maxDepth) {\n    return printElementAsLeaf(type, config);\n  }\n  return printElement(\n    type,\n    printProps(\n      nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),\n      nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n        props[attribute.name] = attribute.value;\n        return props;\n      }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer2\n    ),\n    printChildren(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer2),\n    config,\n    indentation\n  );\n}, \"serialize\");\nvar plugin3 = { serialize: serialize3, test: test3 };\nvar DOMElement_default = plugin3;\n\n// src/index.ts\nimport style2 from \"ansi-styles\";\nvar toString = Object.prototype.toString;\nvar toISOString = Date.prototype.toISOString;\nvar errorToString = Error.prototype.toString;\nvar regExpToString = RegExp.prototype.toString;\nvar getConstructorName = /* @__PURE__ */ __name((val) => typeof val.constructor === \"function\" && val.constructor.name || \"Object\", \"getConstructorName\");\nvar isWindow = /* @__PURE__ */ __name((val) => typeof window !== \"undefined\" && val === window, \"isWindow\");\nvar SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\nvar NEWLINE_REGEXP = /\\n/gi;\nvar PrettyFormatPluginError = class extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.stack = stack;\n    this.name = this.constructor.name;\n  }\n};\n__name(PrettyFormatPluginError, \"PrettyFormatPluginError\");\nfunction isToStringedArrayType(toStringed) {\n  return toStringed === \"[object Array]\" || toStringed === \"[object ArrayBuffer]\" || toStringed === \"[object DataView]\" || toStringed === \"[object Float32Array]\" || toStringed === \"[object Float64Array]\" || toStringed === \"[object Int8Array]\" || toStringed === \"[object Int16Array]\" || toStringed === \"[object Int32Array]\" || toStringed === \"[object Uint8Array]\" || toStringed === \"[object Uint8ClampedArray]\" || toStringed === \"[object Uint16Array]\" || toStringed === \"[object Uint32Array]\";\n}\n__name(isToStringedArrayType, \"isToStringedArrayType\");\nfunction printNumber(val) {\n  return Object.is(val, -0) ? \"-0\" : String(val);\n}\n__name(printNumber, \"printNumber\");\nfunction printBigInt(val) {\n  return String(`${val}n`);\n}\n__name(printBigInt, \"printBigInt\");\nfunction printFunction(val, printFunctionName) {\n  if (!printFunctionName) {\n    return \"[Function]\";\n  }\n  return \"[Function \" + (val.name || \"anonymous\") + \"]\";\n}\n__name(printFunction, \"printFunction\");\nfunction printSymbol(val) {\n  return String(val).replace(SYMBOL_REGEXP, \"Symbol($1)\");\n}\n__name(printSymbol, \"printSymbol\");\nfunction printError(val) {\n  return \"[\" + errorToString.call(val) + \"]\";\n}\n__name(printError, \"printError\");\nfunction printBasicValue(val, printFunctionName, escapeRegex, escapeString) {\n  if (val === true || val === false) {\n    return \"\" + val;\n  }\n  if (val === void 0) {\n    return \"undefined\";\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  const typeOf = typeof val;\n  if (typeOf === \"number\") {\n    return printNumber(val);\n  }\n  if (typeOf === \"bigint\") {\n    return printBigInt(val);\n  }\n  if (typeOf === \"string\") {\n    if (escapeString) {\n      return '\"' + val.replace(/\"|\\\\/g, \"\\\\$&\") + '\"';\n    }\n    return '\"' + val + '\"';\n  }\n  if (typeOf === \"function\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (typeOf === \"symbol\") {\n    return printSymbol(val);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object WeakMap]\") {\n    return \"WeakMap {}\";\n  }\n  if (toStringed === \"[object WeakSet]\") {\n    return \"WeakSet {}\";\n  }\n  if (toStringed === \"[object Function]\" || toStringed === \"[object GeneratorFunction]\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (toStringed === \"[object Symbol]\") {\n    return printSymbol(val);\n  }\n  if (toStringed === \"[object Date]\") {\n    return isNaN(+val) ? \"Date { NaN }\" : toISOString.call(val);\n  }\n  if (toStringed === \"[object Error]\") {\n    return printError(val);\n  }\n  if (toStringed === \"[object RegExp]\") {\n    if (escapeRegex) {\n      return regExpToString.call(val).replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    }\n    return regExpToString.call(val);\n  }\n  if (val instanceof Error) {\n    return printError(val);\n  }\n  return null;\n}\n__name(printBasicValue, \"printBasicValue\");\nfunction printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {\n  if (refs.indexOf(val) !== -1) {\n    return \"[Circular]\";\n  }\n  refs = refs.slice();\n  refs.push(val);\n  const hitMaxDepth = ++depth > config.maxDepth;\n  const min = config.min;\n  if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === \"function\" && !hasCalledToJSON) {\n    return printer(val.toJSON(), config, indentation, depth, refs, true);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object Arguments]\") {\n    return hitMaxDepth ? \"[Arguments]\" : (min ? \"\" : \"Arguments \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (isToStringedArrayType(toStringed)) {\n    return hitMaxDepth ? \"[\" + val.constructor.name + \"]\" : (min ? \"\" : val.constructor.name + \" \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (toStringed === \"[object Map]\") {\n    return hitMaxDepth ? \"[Map]\" : \"Map {\" + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer, \" => \") + \"}\";\n  }\n  if (toStringed === \"[object Set]\") {\n    return hitMaxDepth ? \"[Set]\" : \"Set {\" + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + \"}\";\n  }\n  return hitMaxDepth || isWindow(val) ? \"[\" + getConstructorName(val) + \"]\" : (min ? \"\" : getConstructorName(val) + \" \") + \"{\" + printObjectProperties(val, config, indentation, depth, refs, printer) + \"}\";\n}\n__name(printComplexValue, \"printComplexValue\");\nfunction isNewPlugin(plugin4) {\n  return plugin4.serialize != null;\n}\n__name(isNewPlugin, \"isNewPlugin\");\nfunction printPlugin(plugin4, val, config, indentation, depth, refs) {\n  let printed;\n  try {\n    printed = isNewPlugin(plugin4) ? plugin4.serialize(val, config, indentation, depth, refs, printer) : plugin4.print(\n      val,\n      (valChild) => printer(valChild, config, indentation, depth, refs),\n      (str) => {\n        const indentationNext = indentation + config.indent;\n        return indentationNext + str.replace(NEWLINE_REGEXP, \"\\n\" + indentationNext);\n      },\n      {\n        edgeSpacing: config.spacingOuter,\n        min: config.min,\n        spacing: config.spacingInner\n      },\n      config.colors\n    );\n  } catch (error) {\n    throw new PrettyFormatPluginError(error.message, error.stack);\n  }\n  if (typeof printed !== \"string\") {\n    throw new Error(`pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`);\n  }\n  return printed;\n}\n__name(printPlugin, \"printPlugin\");\nfunction findPlugin(plugins2, val) {\n  for (let p = 0; p < plugins2.length; p++) {\n    try {\n      if (plugins2[p].test(val)) {\n        return plugins2[p];\n      }\n    } catch (error) {\n      throw new PrettyFormatPluginError(error.message, error.stack);\n    }\n  }\n  return null;\n}\n__name(findPlugin, \"findPlugin\");\nfunction printer(val, config, indentation, depth, refs, hasCalledToJSON) {\n  const plugin4 = findPlugin(config.plugins, val);\n  if (plugin4 !== null) {\n    return printPlugin(plugin4, val, config, indentation, depth, refs);\n  }\n  const basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);\n}\n__name(printer, \"printer\");\nvar DEFAULT_THEME = {\n  comment: \"gray\",\n  content: \"reset\",\n  prop: \"yellow\",\n  tag: \"cyan\",\n  value: \"green\"\n};\nvar DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);\nvar DEFAULT_OPTIONS = {\n  callToJSON: true,\n  escapeRegex: false,\n  escapeString: true,\n  highlight: false,\n  indent: 2,\n  maxDepth: Infinity,\n  min: false,\n  plugins: [],\n  printFunctionName: true,\n  theme: DEFAULT_THEME\n};\nfunction validateOptions(options) {\n  Object.keys(options).forEach((key) => {\n    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n    }\n  });\n  if (options.min && options.indent !== void 0 && options.indent !== 0) {\n    throw new Error('pretty-format: Options \"min\" and \"indent\" cannot be used together.');\n  }\n  if (options.theme !== void 0) {\n    if (options.theme === null) {\n      throw new Error(`pretty-format: Option \"theme\" must not be null.`);\n    }\n    if (typeof options.theme !== \"object\") {\n      throw new Error(`pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof options.theme}\".`);\n    }\n  }\n}\n__name(validateOptions, \"validateOptions\");\nvar getColorsHighlight = /* @__PURE__ */ __name((options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];\n  const color = value && style2[value];\n  if (color && typeof color.close === \"string\" && typeof color.open === \"string\") {\n    colors[key] = color;\n  } else {\n    throw new Error(`pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`);\n  }\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsHighlight\");\nvar getColorsEmpty = /* @__PURE__ */ __name(() => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  colors[key] = { close: \"\", open: \"\" };\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsEmpty\");\nvar getPrintFunctionName = /* @__PURE__ */ __name((options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName, \"getPrintFunctionName\");\nvar getEscapeRegex = /* @__PURE__ */ __name((options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex, \"getEscapeRegex\");\nvar getEscapeString = /* @__PURE__ */ __name((options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString, \"getEscapeString\");\nvar getConfig = /* @__PURE__ */ __name((options) => ({\n  callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,\n  colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),\n  escapeRegex: getEscapeRegex(options),\n  escapeString: getEscapeString(options),\n  indent: options && options.min ? \"\" : createIndent(options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent),\n  maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,\n  min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,\n  plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,\n  printFunctionName: getPrintFunctionName(options),\n  spacingInner: options && options.min ? \" \" : \"\\n\",\n  spacingOuter: options && options.min ? \"\" : \"\\n\"\n}), \"getConfig\");\nfunction createIndent(indent) {\n  return new Array(indent + 1).join(\" \");\n}\n__name(createIndent, \"createIndent\");\nfunction format(val, options) {\n  if (options) {\n    validateOptions(options);\n    if (options.plugins) {\n      const plugin4 = findPlugin(options.plugins, val);\n      if (plugin4 !== null) {\n        return printPlugin(plugin4, val, getConfig(options), \"\", 0, []);\n      }\n    }\n  }\n  const basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, getConfig(options), \"\", 0, []);\n}\n__name(format, \"format\");\nvar plugins = {\n  ConvertAnsi: ConvertAnsi_default,\n  DOMCollection: DOMCollection_default,\n  DOMElement: DOMElement_default\n};\nvar src_default = format;\nexport {\n  src_default as default,\n  format,\n  plugins\n};\n//# sourceMappingURL=index.esm.mjs.map\n",
  "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/collections.ts\nvar getKeysOfEnumerableProperties = /* @__PURE__ */ __name((object) => {\n  const keys = Object.keys(object).sort();\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach((symbol) => {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n  return keys;\n}, \"getKeysOfEnumerableProperties\");\nfunction printIteratorEntries(iterator, config, indentation, depth, refs, printer2, separator = \": \") {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      const name = printer2(current.value[0], config, indentationNext, depth, refs);\n      const value = printer2(current.value[1], config, indentationNext, depth, refs);\n      result += indentationNext + name + separator + value;\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorEntries, \"printIteratorEntries\");\nfunction printIteratorValues(iterator, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext + printer2(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorValues, \"printIteratorValues\");\nfunction printListItems(list, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  if (list.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext + printer2(list[i], config, indentationNext, depth, refs);\n      if (i < list.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printListItems, \"printListItems\");\nfunction printObjectProperties(val, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  const keys = getKeysOfEnumerableProperties(val);\n  if (keys.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer2(key, config, indentationNext, depth, refs);\n      const value = printer2(val[key], config, indentationNext, depth, refs);\n      result += indentationNext + name + \": \" + value;\n      if (i < keys.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printObjectProperties, \"printObjectProperties\");\n\n// src/plugins/ConvertAnsi.ts\nimport * as ansiRegexNs from \"ansi-regex\";\nimport style from \"ansi-styles\";\nvar ansiRegex = ansiRegexNs.default;\nvar toHumanReadableAnsi = /* @__PURE__ */ __name((text) => text.replace(ansiRegex(), (match) => {\n  switch (match) {\n    case style.red.close:\n    case style.green.close:\n    case style.cyan.close:\n    case style.gray.close:\n    case style.white.close:\n    case style.yellow.close:\n    case style.bgRed.close:\n    case style.bgGreen.close:\n    case style.bgYellow.close:\n    case style.inverse.close:\n    case style.dim.close:\n    case style.bold.close:\n    case style.reset.open:\n    case style.reset.close:\n      return \"</>\";\n    case style.red.open:\n      return \"<red>\";\n    case style.green.open:\n      return \"<green>\";\n    case style.cyan.open:\n      return \"<cyan>\";\n    case style.gray.open:\n      return \"<gray>\";\n    case style.white.open:\n      return \"<white>\";\n    case style.yellow.open:\n      return \"<yellow>\";\n    case style.bgRed.open:\n      return \"<bgRed>\";\n    case style.bgGreen.open:\n      return \"<bgGreen>\";\n    case style.bgYellow.open:\n      return \"<bgYellow>\";\n    case style.inverse.open:\n      return \"<inverse>\";\n    case style.dim.open:\n      return \"<dim>\";\n    case style.bold.open:\n      return \"<bold>\";\n    default:\n      return \"\";\n  }\n}), \"toHumanReadableAnsi\");\nvar test = /* @__PURE__ */ __name((val) => typeof val === \"string\" && !!val.match(ansiRegex()), \"test\");\nvar serialize = /* @__PURE__ */ __name((val, config, indentation, depth, refs, printer2) => printer2(toHumanReadableAnsi(val), config, indentation, depth, refs), \"serialize\");\nvar plugin = { serialize, test };\nvar ConvertAnsi_default = plugin;\n\n// src/plugins/DOMCollection.ts\nvar SPACE = \" \";\nvar OBJECT_NAMES = [\"DOMStringMap\", \"NamedNodeMap\"];\nvar ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\nvar testName = /* @__PURE__ */ __name((name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name), \"testName\");\nvar test2 = /* @__PURE__ */ __name((val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name), \"test\");\nvar isNamedNodeMap = /* @__PURE__ */ __name((collection) => collection.constructor.name === \"NamedNodeMap\", \"isNamedNodeMap\");\nvar serialize2 = /* @__PURE__ */ __name((collection, config, indentation, depth, refs, printer2) => {\n  const name = collection.constructor.name;\n  if (++depth > config.maxDepth) {\n    return \"[\" + name + \"]\";\n  }\n  return (config.min ? \"\" : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? \"{\" + printObjectProperties(\n    isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}) : { ...collection },\n    config,\n    indentation,\n    depth,\n    refs,\n    printer2\n  ) + \"}\" : \"[\" + printListItems(Array.from(collection), config, indentation, depth, refs, printer2) + \"]\");\n}, \"serialize\");\nvar plugin2 = { serialize: serialize2, test: test2 };\nvar DOMCollection_default = plugin2;\n\n// src/plugins/lib/escapeHTML.ts\nfunction escapeHTML(str) {\n  return str.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n__name(escapeHTML, \"escapeHTML\");\n\n// src/plugins/lib/markup.ts\nvar printProps = /* @__PURE__ */ __name((keys, props, config, indentation, depth, refs, printer2) => {\n  const indentationNext = indentation + config.indent;\n  const colors = config.colors;\n  return keys.map((key) => {\n    const value = props[key];\n    let printed = printer2(value, config, indentationNext, depth, refs);\n    if (typeof value !== \"string\") {\n      if (printed.indexOf(\"\\n\") !== -1) {\n        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;\n      }\n      printed = \"{\" + printed + \"}\";\n    }\n    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + \"=\" + colors.value.open + printed + colors.value.close;\n  }).join(\"\");\n}, \"printProps\");\nvar printChildren = /* @__PURE__ */ __name((children, config, indentation, depth, refs, printer2) => children.map(\n  (child) => config.spacingOuter + indentation + (typeof child === \"string\" ? printText(child, config) : printer2(child, config, indentation, depth, refs))\n).join(\"\"), \"printChildren\");\nvar printText = /* @__PURE__ */ __name((text, config) => {\n  const contentColor = config.colors.content;\n  return contentColor.open + escapeHTML(text) + contentColor.close;\n}, \"printText\");\nvar printComment = /* @__PURE__ */ __name((comment, config) => {\n  const commentColor = config.colors.comment;\n  return commentColor.open + \"<!--\" + escapeHTML(comment) + \"-->\" + commentColor.close;\n}, \"printComment\");\nvar printElement = /* @__PURE__ */ __name((type, printedProps, printedChildren, config, indentation) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? \">\" + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + \"</\" + type : (printedProps && !config.min ? \"\" : \" \") + \"/\") + \">\" + tagColor.close;\n}, \"printElement\");\nvar printElementAsLeaf = /* @__PURE__ */ __name((type, config) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + tagColor.close + \" \\u2026\" + tagColor.open + \" />\" + tagColor.close;\n}, \"printElementAsLeaf\");\n\n// src/plugins/DOMElement.ts\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar FRAGMENT_NODE = 11;\nvar ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nvar testNode = /* @__PURE__ */ __name((val) => {\n  const constructorName = val.constructor.name;\n  const { nodeType, tagName } = val;\n  const isCustomElement = typeof tagName === \"string\" && tagName.includes(\"-\") || typeof val.hasAttribute === \"function\" && val.hasAttribute(\"is\");\n  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === \"Text\" || nodeType === COMMENT_NODE && constructorName === \"Comment\" || nodeType === FRAGMENT_NODE && constructorName === \"DocumentFragment\";\n}, \"testNode\");\nvar test3 = /* @__PURE__ */ __name((val) => {\n  var _a;\n  return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode(val);\n}, \"test\");\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n__name(nodeIsText, \"nodeIsText\");\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n__name(nodeIsComment, \"nodeIsComment\");\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n__name(nodeIsFragment, \"nodeIsFragment\");\nvar serialize3 = /* @__PURE__ */ __name((node, config, indentation, depth, refs, printer2) => {\n  if (nodeIsText(node)) {\n    return printText(node.data, config);\n  }\n  if (nodeIsComment(node)) {\n    return printComment(node.data, config);\n  }\n  const type = nodeIsFragment(node) ? `DocumentFragment` : node.tagName.toLowerCase();\n  if (++depth > config.maxDepth) {\n    return printElementAsLeaf(type, config);\n  }\n  return printElement(\n    type,\n    printProps(\n      nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),\n      nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n        props[attribute.name] = attribute.value;\n        return props;\n      }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer2\n    ),\n    printChildren(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer2),\n    config,\n    indentation\n  );\n}, \"serialize\");\nvar plugin3 = { serialize: serialize3, test: test3 };\nvar DOMElement_default = plugin3;\n\n// src/index.ts\nimport style2 from \"ansi-styles\";\nvar toString = Object.prototype.toString;\nvar toISOString = Date.prototype.toISOString;\nvar errorToString = Error.prototype.toString;\nvar regExpToString = RegExp.prototype.toString;\nvar getConstructorName = /* @__PURE__ */ __name((val) => typeof val.constructor === \"function\" && val.constructor.name || \"Object\", \"getConstructorName\");\nvar isWindow = /* @__PURE__ */ __name((val) => typeof window !== \"undefined\" && val === window, \"isWindow\");\nvar SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\nvar NEWLINE_REGEXP = /\\n/gi;\nvar PrettyFormatPluginError = class extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.stack = stack;\n    this.name = this.constructor.name;\n  }\n};\n__name(PrettyFormatPluginError, \"PrettyFormatPluginError\");\nfunction isToStringedArrayType(toStringed) {\n  return toStringed === \"[object Array]\" || toStringed === \"[object ArrayBuffer]\" || toStringed === \"[object DataView]\" || toStringed === \"[object Float32Array]\" || toStringed === \"[object Float64Array]\" || toStringed === \"[object Int8Array]\" || toStringed === \"[object Int16Array]\" || toStringed === \"[object Int32Array]\" || toStringed === \"[object Uint8Array]\" || toStringed === \"[object Uint8ClampedArray]\" || toStringed === \"[object Uint16Array]\" || toStringed === \"[object Uint32Array]\";\n}\n__name(isToStringedArrayType, \"isToStringedArrayType\");\nfunction printNumber(val) {\n  return Object.is(val, -0) ? \"-0\" : String(val);\n}\n__name(printNumber, \"printNumber\");\nfunction printBigInt(val) {\n  return String(`${val}n`);\n}\n__name(printBigInt, \"printBigInt\");\nfunction printFunction(val, printFunctionName) {\n  if (!printFunctionName) {\n    return \"[Function]\";\n  }\n  return \"[Function \" + (val.name || \"anonymous\") + \"]\";\n}\n__name(printFunction, \"printFunction\");\nfunction printSymbol(val) {\n  return String(val).replace(SYMBOL_REGEXP, \"Symbol($1)\");\n}\n__name(printSymbol, \"printSymbol\");\nfunction printError(val) {\n  return \"[\" + errorToString.call(val) + \"]\";\n}\n__name(printError, \"printError\");\nfunction printBasicValue(val, printFunctionName, escapeRegex, escapeString) {\n  if (val === true || val === false) {\n    return \"\" + val;\n  }\n  if (val === void 0) {\n    return \"undefined\";\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  const typeOf = typeof val;\n  if (typeOf === \"number\") {\n    return printNumber(val);\n  }\n  if (typeOf === \"bigint\") {\n    return printBigInt(val);\n  }\n  if (typeOf === \"string\") {\n    if (escapeString) {\n      return '\"' + val.replace(/\"|\\\\/g, \"\\\\$&\") + '\"';\n    }\n    return '\"' + val + '\"';\n  }\n  if (typeOf === \"function\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (typeOf === \"symbol\") {\n    return printSymbol(val);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object WeakMap]\") {\n    return \"WeakMap {}\";\n  }\n  if (toStringed === \"[object WeakSet]\") {\n    return \"WeakSet {}\";\n  }\n  if (toStringed === \"[object Function]\" || toStringed === \"[object GeneratorFunction]\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (toStringed === \"[object Symbol]\") {\n    return printSymbol(val);\n  }\n  if (toStringed === \"[object Date]\") {\n    return isNaN(+val) ? \"Date { NaN }\" : toISOString.call(val);\n  }\n  if (toStringed === \"[object Error]\") {\n    return printError(val);\n  }\n  if (toStringed === \"[object RegExp]\") {\n    if (escapeRegex) {\n      return regExpToString.call(val).replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    }\n    return regExpToString.call(val);\n  }\n  if (val instanceof Error) {\n    return printError(val);\n  }\n  return null;\n}\n__name(printBasicValue, \"printBasicValue\");\nfunction printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {\n  if (refs.indexOf(val) !== -1) {\n    return \"[Circular]\";\n  }\n  refs = refs.slice();\n  refs.push(val);\n  const hitMaxDepth = ++depth > config.maxDepth;\n  const min = config.min;\n  if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === \"function\" && !hasCalledToJSON) {\n    return printer(val.toJSON(), config, indentation, depth, refs, true);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object Arguments]\") {\n    return hitMaxDepth ? \"[Arguments]\" : (min ? \"\" : \"Arguments \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (isToStringedArrayType(toStringed)) {\n    return hitMaxDepth ? \"[\" + val.constructor.name + \"]\" : (min ? \"\" : val.constructor.name + \" \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (toStringed === \"[object Map]\") {\n    return hitMaxDepth ? \"[Map]\" : \"Map {\" + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer, \" => \") + \"}\";\n  }\n  if (toStringed === \"[object Set]\") {\n    return hitMaxDepth ? \"[Set]\" : \"Set {\" + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + \"}\";\n  }\n  return hitMaxDepth || isWindow(val) ? \"[\" + getConstructorName(val) + \"]\" : (min ? \"\" : getConstructorName(val) + \" \") + \"{\" + printObjectProperties(val, config, indentation, depth, refs, printer) + \"}\";\n}\n__name(printComplexValue, \"printComplexValue\");\nfunction isNewPlugin(plugin4) {\n  return plugin4.serialize != null;\n}\n__name(isNewPlugin, \"isNewPlugin\");\nfunction printPlugin(plugin4, val, config, indentation, depth, refs) {\n  let printed;\n  try {\n    printed = isNewPlugin(plugin4) ? plugin4.serialize(val, config, indentation, depth, refs, printer) : plugin4.print(\n      val,\n      (valChild) => printer(valChild, config, indentation, depth, refs),\n      (str) => {\n        const indentationNext = indentation + config.indent;\n        return indentationNext + str.replace(NEWLINE_REGEXP, \"\\n\" + indentationNext);\n      },\n      {\n        edgeSpacing: config.spacingOuter,\n        min: config.min,\n        spacing: config.spacingInner\n      },\n      config.colors\n    );\n  } catch (error) {\n    throw new PrettyFormatPluginError(error.message, error.stack);\n  }\n  if (typeof printed !== \"string\") {\n    throw new Error(`pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`);\n  }\n  return printed;\n}\n__name(printPlugin, \"printPlugin\");\nfunction findPlugin(plugins2, val) {\n  for (let p = 0; p < plugins2.length; p++) {\n    try {\n      if (plugins2[p].test(val)) {\n        return plugins2[p];\n      }\n    } catch (error) {\n      throw new PrettyFormatPluginError(error.message, error.stack);\n    }\n  }\n  return null;\n}\n__name(findPlugin, \"findPlugin\");\nfunction printer(val, config, indentation, depth, refs, hasCalledToJSON) {\n  const plugin4 = findPlugin(config.plugins, val);\n  if (plugin4 !== null) {\n    return printPlugin(plugin4, val, config, indentation, depth, refs);\n  }\n  const basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);\n}\n__name(printer, \"printer\");\nvar DEFAULT_THEME = {\n  comment: \"gray\",\n  content: \"reset\",\n  prop: \"yellow\",\n  tag: \"cyan\",\n  value: \"green\"\n};\nvar DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);\nvar DEFAULT_OPTIONS = {\n  callToJSON: true,\n  escapeRegex: false,\n  escapeString: true,\n  highlight: false,\n  indent: 2,\n  maxDepth: Infinity,\n  min: false,\n  plugins: [],\n  printFunctionName: true,\n  theme: DEFAULT_THEME\n};\nfunction validateOptions(options) {\n  Object.keys(options).forEach((key) => {\n    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n    }\n  });\n  if (options.min && options.indent !== void 0 && options.indent !== 0) {\n    throw new Error('pretty-format: Options \"min\" and \"indent\" cannot be used together.');\n  }\n  if (options.theme !== void 0) {\n    if (options.theme === null) {\n      throw new Error(`pretty-format: Option \"theme\" must not be null.`);\n    }\n    if (typeof options.theme !== \"object\") {\n      throw new Error(`pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof options.theme}\".`);\n    }\n  }\n}\n__name(validateOptions, \"validateOptions\");\nvar getColorsHighlight = /* @__PURE__ */ __name((options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];\n  const color = value && style2[value];\n  if (color && typeof color.close === \"string\" && typeof color.open === \"string\") {\n    colors[key] = color;\n  } else {\n    throw new Error(`pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`);\n  }\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsHighlight\");\nvar getColorsEmpty = /* @__PURE__ */ __name(() => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  colors[key] = { close: \"\", open: \"\" };\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsEmpty\");\nvar getPrintFunctionName = /* @__PURE__ */ __name((options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName, \"getPrintFunctionName\");\nvar getEscapeRegex = /* @__PURE__ */ __name((options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex, \"getEscapeRegex\");\nvar getEscapeString = /* @__PURE__ */ __name((options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString, \"getEscapeString\");\nvar getConfig = /* @__PURE__ */ __name((options) => ({\n  callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,\n  colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),\n  escapeRegex: getEscapeRegex(options),\n  escapeString: getEscapeString(options),\n  indent: options && options.min ? \"\" : createIndent(options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent),\n  maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,\n  min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,\n  plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,\n  printFunctionName: getPrintFunctionName(options),\n  spacingInner: options && options.min ? \" \" : \"\\n\",\n  spacingOuter: options && options.min ? \"\" : \"\\n\"\n}), \"getConfig\");\nfunction createIndent(indent) {\n  return new Array(indent + 1).join(\" \");\n}\n__name(createIndent, \"createIndent\");\nfunction format(val, options) {\n  if (options) {\n    validateOptions(options);\n    if (options.plugins) {\n      const plugin4 = findPlugin(options.plugins, val);\n      if (plugin4 !== null) {\n        return printPlugin(plugin4, val, getConfig(options), \"\", 0, []);\n      }\n    }\n  }\n  const basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, getConfig(options), \"\", 0, []);\n}\n__name(format, \"format\");\nvar plugins = {\n  ConvertAnsi: ConvertAnsi_default,\n  DOMCollection: DOMCollection_default,\n  DOMElement: DOMElement_default\n};\nvar src_default = format;\nexport {\n  src_default as default,\n  format,\n  plugins\n};\n//# sourceMappingURL=index.esm.mjs.map\n",
  "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/collections.ts\nvar getKeysOfEnumerableProperties = /* @__PURE__ */ __name((object) => {\n  const keys = Object.keys(object).sort();\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach((symbol) => {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n  return keys;\n}, \"getKeysOfEnumerableProperties\");\nfunction printIteratorEntries(iterator, config, indentation, depth, refs, printer2, separator = \": \") {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      const name = printer2(current.value[0], config, indentationNext, depth, refs);\n      const value = printer2(current.value[1], config, indentationNext, depth, refs);\n      result += indentationNext + name + separator + value;\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorEntries, \"printIteratorEntries\");\nfunction printIteratorValues(iterator, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext + printer2(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorValues, \"printIteratorValues\");\nfunction printListItems(list, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  if (list.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext + printer2(list[i], config, indentationNext, depth, refs);\n      if (i < list.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printListItems, \"printListItems\");\nfunction printObjectProperties(val, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  const keys = getKeysOfEnumerableProperties(val);\n  if (keys.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer2(key, config, indentationNext, depth, refs);\n      const value = printer2(val[key], config, indentationNext, depth, refs);\n      result += indentationNext + name + \": \" + value;\n      if (i < keys.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printObjectProperties, \"printObjectProperties\");\n\n// src/plugins/ConvertAnsi.ts\nimport * as ansiRegexNs from \"ansi-regex\";\nimport style from \"ansi-styles\";\nvar ansiRegex = ansiRegexNs.default;\nvar toHumanReadableAnsi = /* @__PURE__ */ __name((text) => text.replace(ansiRegex(), (match) => {\n  switch (match) {\n    case style.red.close:\n    case style.green.close:\n    case style.cyan.close:\n    case style.gray.close:\n    case style.white.close:\n    case style.yellow.close:\n    case style.bgRed.close:\n    case style.bgGreen.close:\n    case style.bgYellow.close:\n    case style.inverse.close:\n    case style.dim.close:\n    case style.bold.close:\n    case style.reset.open:\n    case style.reset.close:\n      return \"</>\";\n    case style.red.open:\n      return \"<red>\";\n    case style.green.open:\n      return \"<green>\";\n    case style.cyan.open:\n      return \"<cyan>\";\n    case style.gray.open:\n      return \"<gray>\";\n    case style.white.open:\n      return \"<white>\";\n    case style.yellow.open:\n      return \"<yellow>\";\n    case style.bgRed.open:\n      return \"<bgRed>\";\n    case style.bgGreen.open:\n      return \"<bgGreen>\";\n    case style.bgYellow.open:\n      return \"<bgYellow>\";\n    case style.inverse.open:\n      return \"<inverse>\";\n    case style.dim.open:\n      return \"<dim>\";\n    case style.bold.open:\n      return \"<bold>\";\n    default:\n      return \"\";\n  }\n}), \"toHumanReadableAnsi\");\nvar test = /* @__PURE__ */ __name((val) => typeof val === \"string\" && !!val.match(ansiRegex()), \"test\");\nvar serialize = /* @__PURE__ */ __name((val, config, indentation, depth, refs, printer2) => printer2(toHumanReadableAnsi(val), config, indentation, depth, refs), \"serialize\");\nvar plugin = { serialize, test };\nvar ConvertAnsi_default = plugin;\n\n// src/plugins/DOMCollection.ts\nvar SPACE = \" \";\nvar OBJECT_NAMES = [\"DOMStringMap\", \"NamedNodeMap\"];\nvar ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\nvar testName = /* @__PURE__ */ __name((name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name), \"testName\");\nvar test2 = /* @__PURE__ */ __name((val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name), \"test\");\nvar isNamedNodeMap = /* @__PURE__ */ __name((collection) => collection.constructor.name === \"NamedNodeMap\", \"isNamedNodeMap\");\nvar serialize2 = /* @__PURE__ */ __name((collection, config, indentation, depth, refs, printer2) => {\n  const name = collection.constructor.name;\n  if (++depth > config.maxDepth) {\n    return \"[\" + name + \"]\";\n  }\n  return (config.min ? \"\" : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? \"{\" + printObjectProperties(\n    isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}) : { ...collection },\n    config,\n    indentation,\n    depth,\n    refs,\n    printer2\n  ) + \"}\" : \"[\" + printListItems(Array.from(collection), config, indentation, depth, refs, printer2) + \"]\");\n}, \"serialize\");\nvar plugin2 = { serialize: serialize2, test: test2 };\nvar DOMCollection_default = plugin2;\n\n// src/plugins/lib/escapeHTML.ts\nfunction escapeHTML(str) {\n  return str.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n__name(escapeHTML, \"escapeHTML\");\n\n// src/plugins/lib/markup.ts\nvar printProps = /* @__PURE__ */ __name((keys, props, config, indentation, depth, refs, printer2) => {\n  const indentationNext = indentation + config.indent;\n  const colors = config.colors;\n  return keys.map((key) => {\n    const value = props[key];\n    let printed = printer2(value, config, indentationNext, depth, refs);\n    if (typeof value !== \"string\") {\n      if (printed.indexOf(\"\\n\") !== -1) {\n        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;\n      }\n      printed = \"{\" + printed + \"}\";\n    }\n    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + \"=\" + colors.value.open + printed + colors.value.close;\n  }).join(\"\");\n}, \"printProps\");\nvar printChildren = /* @__PURE__ */ __name((children, config, indentation, depth, refs, printer2) => children.map(\n  (child) => config.spacingOuter + indentation + (typeof child === \"string\" ? printText(child, config) : printer2(child, config, indentation, depth, refs))\n).join(\"\"), \"printChildren\");\nvar printText = /* @__PURE__ */ __name((text, config) => {\n  const contentColor = config.colors.content;\n  return contentColor.open + escapeHTML(text) + contentColor.close;\n}, \"printText\");\nvar printComment = /* @__PURE__ */ __name((comment, config) => {\n  const commentColor = config.colors.comment;\n  return commentColor.open + \"<!--\" + escapeHTML(comment) + \"-->\" + commentColor.close;\n}, \"printComment\");\nvar printElement = /* @__PURE__ */ __name((type, printedProps, printedChildren, config, indentation) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? \">\" + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + \"</\" + type : (printedProps && !config.min ? \"\" : \" \") + \"/\") + \">\" + tagColor.close;\n}, \"printElement\");\nvar printElementAsLeaf = /* @__PURE__ */ __name((type, config) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + tagColor.close + \" \\u2026\" + tagColor.open + \" />\" + tagColor.close;\n}, \"printElementAsLeaf\");\n\n// src/plugins/DOMElement.ts\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar FRAGMENT_NODE = 11;\nvar ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nvar testNode = /* @__PURE__ */ __name((val) => {\n  const constructorName = val.constructor.name;\n  const { nodeType, tagName } = val;\n  const isCustomElement = typeof tagName === \"string\" && tagName.includes(\"-\") || typeof val.hasAttribute === \"function\" && val.hasAttribute(\"is\");\n  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === \"Text\" || nodeType === COMMENT_NODE && constructorName === \"Comment\" || nodeType === FRAGMENT_NODE && constructorName === \"DocumentFragment\";\n}, \"testNode\");\nvar test3 = /* @__PURE__ */ __name((val) => {\n  var _a;\n  return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode(val);\n}, \"test\");\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n__name(nodeIsText, \"nodeIsText\");\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n__name(nodeIsComment, \"nodeIsComment\");\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n__name(nodeIsFragment, \"nodeIsFragment\");\nvar serialize3 = /* @__PURE__ */ __name((node, config, indentation, depth, refs, printer2) => {\n  if (nodeIsText(node)) {\n    return printText(node.data, config);\n  }\n  if (nodeIsComment(node)) {\n    return printComment(node.data, config);\n  }\n  const type = nodeIsFragment(node) ? `DocumentFragment` : node.tagName.toLowerCase();\n  if (++depth > config.maxDepth) {\n    return printElementAsLeaf(type, config);\n  }\n  return printElement(\n    type,\n    printProps(\n      nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),\n      nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n        props[attribute.name] = attribute.value;\n        return props;\n      }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer2\n    ),\n    printChildren(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer2),\n    config,\n    indentation\n  );\n}, \"serialize\");\nvar plugin3 = { serialize: serialize3, test: test3 };\nvar DOMElement_default = plugin3;\n\n// src/index.ts\nimport style2 from \"ansi-styles\";\nvar toString = Object.prototype.toString;\nvar toISOString = Date.prototype.toISOString;\nvar errorToString = Error.prototype.toString;\nvar regExpToString = RegExp.prototype.toString;\nvar getConstructorName = /* @__PURE__ */ __name((val) => typeof val.constructor === \"function\" && val.constructor.name || \"Object\", \"getConstructorName\");\nvar isWindow = /* @__PURE__ */ __name((val) => typeof window !== \"undefined\" && val === window, \"isWindow\");\nvar SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\nvar NEWLINE_REGEXP = /\\n/gi;\nvar PrettyFormatPluginError = class extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.stack = stack;\n    this.name = this.constructor.name;\n  }\n};\n__name(PrettyFormatPluginError, \"PrettyFormatPluginError\");\nfunction isToStringedArrayType(toStringed) {\n  return toStringed === \"[object Array]\" || toStringed === \"[object ArrayBuffer]\" || toStringed === \"[object DataView]\" || toStringed === \"[object Float32Array]\" || toStringed === \"[object Float64Array]\" || toStringed === \"[object Int8Array]\" || toStringed === \"[object Int16Array]\" || toStringed === \"[object Int32Array]\" || toStringed === \"[object Uint8Array]\" || toStringed === \"[object Uint8ClampedArray]\" || toStringed === \"[object Uint16Array]\" || toStringed === \"[object Uint32Array]\";\n}\n__name(isToStringedArrayType, \"isToStringedArrayType\");\nfunction printNumber(val) {\n  return Object.is(val, -0) ? \"-0\" : String(val);\n}\n__name(printNumber, \"printNumber\");\nfunction printBigInt(val) {\n  return String(`${val}n`);\n}\n__name(printBigInt, \"printBigInt\");\nfunction printFunction(val, printFunctionName) {\n  if (!printFunctionName) {\n    return \"[Function]\";\n  }\n  return \"[Function \" + (val.name || \"anonymous\") + \"]\";\n}\n__name(printFunction, \"printFunction\");\nfunction printSymbol(val) {\n  return String(val).replace(SYMBOL_REGEXP, \"Symbol($1)\");\n}\n__name(printSymbol, \"printSymbol\");\nfunction printError(val) {\n  return \"[\" + errorToString.call(val) + \"]\";\n}\n__name(printError, \"printError\");\nfunction printBasicValue(val, printFunctionName, escapeRegex, escapeString) {\n  if (val === true || val === false) {\n    return \"\" + val;\n  }\n  if (val === void 0) {\n    return \"undefined\";\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  const typeOf = typeof val;\n  if (typeOf === \"number\") {\n    return printNumber(val);\n  }\n  if (typeOf === \"bigint\") {\n    return printBigInt(val);\n  }\n  if (typeOf === \"string\") {\n    if (escapeString) {\n      return '\"' + val.replace(/\"|\\\\/g, \"\\\\$&\") + '\"';\n    }\n    return '\"' + val + '\"';\n  }\n  if (typeOf === \"function\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (typeOf === \"symbol\") {\n    return printSymbol(val);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object WeakMap]\") {\n    return \"WeakMap {}\";\n  }\n  if (toStringed === \"[object WeakSet]\") {\n    return \"WeakSet {}\";\n  }\n  if (toStringed === \"[object Function]\" || toStringed === \"[object GeneratorFunction]\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (toStringed === \"[object Symbol]\") {\n    return printSymbol(val);\n  }\n  if (toStringed === \"[object Date]\") {\n    return isNaN(+val) ? \"Date { NaN }\" : toISOString.call(val);\n  }\n  if (toStringed === \"[object Error]\") {\n    return printError(val);\n  }\n  if (toStringed === \"[object RegExp]\") {\n    if (escapeRegex) {\n      return regExpToString.call(val).replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    }\n    return regExpToString.call(val);\n  }\n  if (val instanceof Error) {\n    return printError(val);\n  }\n  return null;\n}\n__name(printBasicValue, \"printBasicValue\");\nfunction printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {\n  if (refs.indexOf(val) !== -1) {\n    return \"[Circular]\";\n  }\n  refs = refs.slice();\n  refs.push(val);\n  const hitMaxDepth = ++depth > config.maxDepth;\n  const min = config.min;\n  if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === \"function\" && !hasCalledToJSON) {\n    return printer(val.toJSON(), config, indentation, depth, refs, true);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object Arguments]\") {\n    return hitMaxDepth ? \"[Arguments]\" : (min ? \"\" : \"Arguments \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (isToStringedArrayType(toStringed)) {\n    return hitMaxDepth ? \"[\" + val.constructor.name + \"]\" : (min ? \"\" : val.constructor.name + \" \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (toStringed === \"[object Map]\") {\n    return hitMaxDepth ? \"[Map]\" : \"Map {\" + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer, \" => \") + \"}\";\n  }\n  if (toStringed === \"[object Set]\") {\n    return hitMaxDepth ? \"[Set]\" : \"Set {\" + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + \"}\";\n  }\n  return hitMaxDepth || isWindow(val) ? \"[\" + getConstructorName(val) + \"]\" : (min ? \"\" : getConstructorName(val) + \" \") + \"{\" + printObjectProperties(val, config, indentation, depth, refs, printer) + \"}\";\n}\n__name(printComplexValue, \"printComplexValue\");\nfunction isNewPlugin(plugin4) {\n  return plugin4.serialize != null;\n}\n__name(isNewPlugin, \"isNewPlugin\");\nfunction printPlugin(plugin4, val, config, indentation, depth, refs) {\n  let printed;\n  try {\n    printed = isNewPlugin(plugin4) ? plugin4.serialize(val, config, indentation, depth, refs, printer) : plugin4.print(\n      val,\n      (valChild) => printer(valChild, config, indentation, depth, refs),\n      (str) => {\n        const indentationNext = indentation + config.indent;\n        return indentationNext + str.replace(NEWLINE_REGEXP, \"\\n\" + indentationNext);\n      },\n      {\n        edgeSpacing: config.spacingOuter,\n        min: config.min,\n        spacing: config.spacingInner\n      },\n      config.colors\n    );\n  } catch (error) {\n    throw new PrettyFormatPluginError(error.message, error.stack);\n  }\n  if (typeof printed !== \"string\") {\n    throw new Error(`pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`);\n  }\n  return printed;\n}\n__name(printPlugin, \"printPlugin\");\nfunction findPlugin(plugins2, val) {\n  for (let p = 0; p < plugins2.length; p++) {\n    try {\n      if (plugins2[p].test(val)) {\n        return plugins2[p];\n      }\n    } catch (error) {\n      throw new PrettyFormatPluginError(error.message, error.stack);\n    }\n  }\n  return null;\n}\n__name(findPlugin, \"findPlugin\");\nfunction printer(val, config, indentation, depth, refs, hasCalledToJSON) {\n  const plugin4 = findPlugin(config.plugins, val);\n  if (plugin4 !== null) {\n    return printPlugin(plugin4, val, config, indentation, depth, refs);\n  }\n  const basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);\n}\n__name(printer, \"printer\");\nvar DEFAULT_THEME = {\n  comment: \"gray\",\n  content: \"reset\",\n  prop: \"yellow\",\n  tag: \"cyan\",\n  value: \"green\"\n};\nvar DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);\nvar DEFAULT_OPTIONS = {\n  callToJSON: true,\n  escapeRegex: false,\n  escapeString: true,\n  highlight: false,\n  indent: 2,\n  maxDepth: Infinity,\n  min: false,\n  plugins: [],\n  printFunctionName: true,\n  theme: DEFAULT_THEME\n};\nfunction validateOptions(options) {\n  Object.keys(options).forEach((key) => {\n    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n    }\n  });\n  if (options.min && options.indent !== void 0 && options.indent !== 0) {\n    throw new Error('pretty-format: Options \"min\" and \"indent\" cannot be used together.');\n  }\n  if (options.theme !== void 0) {\n    if (options.theme === null) {\n      throw new Error(`pretty-format: Option \"theme\" must not be null.`);\n    }\n    if (typeof options.theme !== \"object\") {\n      throw new Error(`pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof options.theme}\".`);\n    }\n  }\n}\n__name(validateOptions, \"validateOptions\");\nvar getColorsHighlight = /* @__PURE__ */ __name((options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];\n  const color = value && style2[value];\n  if (color && typeof color.close === \"string\" && typeof color.open === \"string\") {\n    colors[key] = color;\n  } else {\n    throw new Error(`pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`);\n  }\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsHighlight\");\nvar getColorsEmpty = /* @__PURE__ */ __name(() => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  colors[key] = { close: \"\", open: \"\" };\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsEmpty\");\nvar getPrintFunctionName = /* @__PURE__ */ __name((options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName, \"getPrintFunctionName\");\nvar getEscapeRegex = /* @__PURE__ */ __name((options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex, \"getEscapeRegex\");\nvar getEscapeString = /* @__PURE__ */ __name((options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString, \"getEscapeString\");\nvar getConfig = /* @__PURE__ */ __name((options) => ({\n  callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,\n  colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),\n  escapeRegex: getEscapeRegex(options),\n  escapeString: getEscapeString(options),\n  indent: options && options.min ? \"\" : createIndent(options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent),\n  maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,\n  min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,\n  plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,\n  printFunctionName: getPrintFunctionName(options),\n  spacingInner: options && options.min ? \" \" : \"\\n\",\n  spacingOuter: options && options.min ? \"\" : \"\\n\"\n}), \"getConfig\");\nfunction createIndent(indent) {\n  return new Array(indent + 1).join(\" \");\n}\n__name(createIndent, \"createIndent\");\nfunction format(val, options) {\n  if (options) {\n    validateOptions(options);\n    if (options.plugins) {\n      const plugin4 = findPlugin(options.plugins, val);\n      if (plugin4 !== null) {\n        return printPlugin(plugin4, val, getConfig(options), \"\", 0, []);\n      }\n    }\n  }\n  const basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, getConfig(options), \"\", 0, []);\n}\n__name(format, \"format\");\nvar plugins = {\n  ConvertAnsi: ConvertAnsi_default,\n  DOMCollection: DOMCollection_default,\n  DOMElement: DOMElement_default\n};\nvar src_default = format;\nexport {\n  src_default as default,\n  format,\n  plugins\n};\n//# sourceMappingURL=index.esm.mjs.map\n",
  "var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/collections.ts\nvar getKeysOfEnumerableProperties = /* @__PURE__ */ __name((object) => {\n  const keys = Object.keys(object).sort();\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach((symbol) => {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n  return keys;\n}, \"getKeysOfEnumerableProperties\");\nfunction printIteratorEntries(iterator, config, indentation, depth, refs, printer2, separator = \": \") {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      const name = printer2(current.value[0], config, indentationNext, depth, refs);\n      const value = printer2(current.value[1], config, indentationNext, depth, refs);\n      result += indentationNext + name + separator + value;\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorEntries, \"printIteratorEntries\");\nfunction printIteratorValues(iterator, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext + printer2(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n      if (!current.done) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printIteratorValues, \"printIteratorValues\");\nfunction printListItems(list, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  if (list.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext + printer2(list[i], config, indentationNext, depth, refs);\n      if (i < list.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printListItems, \"printListItems\");\nfunction printObjectProperties(val, config, indentation, depth, refs, printer2) {\n  let result = \"\";\n  const keys = getKeysOfEnumerableProperties(val);\n  if (keys.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer2(key, config, indentationNext, depth, refs);\n      const value = printer2(val[key], config, indentationNext, depth, refs);\n      result += indentationNext + name + \": \" + value;\n      if (i < keys.length - 1) {\n        result += \",\" + config.spacingInner;\n      } else if (!config.min) {\n        result += \",\";\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n__name(printObjectProperties, \"printObjectProperties\");\n\n// src/plugins/ConvertAnsi.ts\nimport * as ansiRegexNs from \"ansi-regex\";\nimport style from \"ansi-styles\";\nvar ansiRegex = ansiRegexNs.default;\nvar toHumanReadableAnsi = /* @__PURE__ */ __name((text) => text.replace(ansiRegex(), (match) => {\n  switch (match) {\n    case style.red.close:\n    case style.green.close:\n    case style.cyan.close:\n    case style.gray.close:\n    case style.white.close:\n    case style.yellow.close:\n    case style.bgRed.close:\n    case style.bgGreen.close:\n    case style.bgYellow.close:\n    case style.inverse.close:\n    case style.dim.close:\n    case style.bold.close:\n    case style.reset.open:\n    case style.reset.close:\n      return \"</>\";\n    case style.red.open:\n      return \"<red>\";\n    case style.green.open:\n      return \"<green>\";\n    case style.cyan.open:\n      return \"<cyan>\";\n    case style.gray.open:\n      return \"<gray>\";\n    case style.white.open:\n      return \"<white>\";\n    case style.yellow.open:\n      return \"<yellow>\";\n    case style.bgRed.open:\n      return \"<bgRed>\";\n    case style.bgGreen.open:\n      return \"<bgGreen>\";\n    case style.bgYellow.open:\n      return \"<bgYellow>\";\n    case style.inverse.open:\n      return \"<inverse>\";\n    case style.dim.open:\n      return \"<dim>\";\n    case style.bold.open:\n      return \"<bold>\";\n    default:\n      return \"\";\n  }\n}), \"toHumanReadableAnsi\");\nvar test = /* @__PURE__ */ __name((val) => typeof val === \"string\" && !!val.match(ansiRegex()), \"test\");\nvar serialize = /* @__PURE__ */ __name((val, config, indentation, depth, refs, printer2) => printer2(toHumanReadableAnsi(val), config, indentation, depth, refs), \"serialize\");\nvar plugin = { serialize, test };\nvar ConvertAnsi_default = plugin;\n\n// src/plugins/DOMCollection.ts\nvar SPACE = \" \";\nvar OBJECT_NAMES = [\"DOMStringMap\", \"NamedNodeMap\"];\nvar ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\nvar testName = /* @__PURE__ */ __name((name) => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name), \"testName\");\nvar test2 = /* @__PURE__ */ __name((val) => val && val.constructor && !!val.constructor.name && testName(val.constructor.name), \"test\");\nvar isNamedNodeMap = /* @__PURE__ */ __name((collection) => collection.constructor.name === \"NamedNodeMap\", \"isNamedNodeMap\");\nvar serialize2 = /* @__PURE__ */ __name((collection, config, indentation, depth, refs, printer2) => {\n  const name = collection.constructor.name;\n  if (++depth > config.maxDepth) {\n    return \"[\" + name + \"]\";\n  }\n  return (config.min ? \"\" : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? \"{\" + printObjectProperties(\n    isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}) : { ...collection },\n    config,\n    indentation,\n    depth,\n    refs,\n    printer2\n  ) + \"}\" : \"[\" + printListItems(Array.from(collection), config, indentation, depth, refs, printer2) + \"]\");\n}, \"serialize\");\nvar plugin2 = { serialize: serialize2, test: test2 };\nvar DOMCollection_default = plugin2;\n\n// src/plugins/lib/escapeHTML.ts\nfunction escapeHTML(str) {\n  return str.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n__name(escapeHTML, \"escapeHTML\");\n\n// src/plugins/lib/markup.ts\nvar printProps = /* @__PURE__ */ __name((keys, props, config, indentation, depth, refs, printer2) => {\n  const indentationNext = indentation + config.indent;\n  const colors = config.colors;\n  return keys.map((key) => {\n    const value = props[key];\n    let printed = printer2(value, config, indentationNext, depth, refs);\n    if (typeof value !== \"string\") {\n      if (printed.indexOf(\"\\n\") !== -1) {\n        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;\n      }\n      printed = \"{\" + printed + \"}\";\n    }\n    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + \"=\" + colors.value.open + printed + colors.value.close;\n  }).join(\"\");\n}, \"printProps\");\nvar printChildren = /* @__PURE__ */ __name((children, config, indentation, depth, refs, printer2) => children.map(\n  (child) => config.spacingOuter + indentation + (typeof child === \"string\" ? printText(child, config) : printer2(child, config, indentation, depth, refs))\n).join(\"\"), \"printChildren\");\nvar printText = /* @__PURE__ */ __name((text, config) => {\n  const contentColor = config.colors.content;\n  return contentColor.open + escapeHTML(text) + contentColor.close;\n}, \"printText\");\nvar printComment = /* @__PURE__ */ __name((comment, config) => {\n  const commentColor = config.colors.comment;\n  return commentColor.open + \"<!--\" + escapeHTML(comment) + \"-->\" + commentColor.close;\n}, \"printComment\");\nvar printElement = /* @__PURE__ */ __name((type, printedProps, printedChildren, config, indentation) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? \">\" + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + \"</\" + type : (printedProps && !config.min ? \"\" : \" \") + \"/\") + \">\" + tagColor.close;\n}, \"printElement\");\nvar printElementAsLeaf = /* @__PURE__ */ __name((type, config) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + \"<\" + type + tagColor.close + \" \\u2026\" + tagColor.open + \" />\" + tagColor.close;\n}, \"printElementAsLeaf\");\n\n// src/plugins/DOMElement.ts\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar FRAGMENT_NODE = 11;\nvar ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nvar testNode = /* @__PURE__ */ __name((val) => {\n  const constructorName = val.constructor.name;\n  const { nodeType, tagName } = val;\n  const isCustomElement = typeof tagName === \"string\" && tagName.includes(\"-\") || typeof val.hasAttribute === \"function\" && val.hasAttribute(\"is\");\n  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === \"Text\" || nodeType === COMMENT_NODE && constructorName === \"Comment\" || nodeType === FRAGMENT_NODE && constructorName === \"DocumentFragment\";\n}, \"testNode\");\nvar test3 = /* @__PURE__ */ __name((val) => {\n  var _a;\n  return ((_a = val == null ? void 0 : val.constructor) == null ? void 0 : _a.name) && testNode(val);\n}, \"test\");\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n__name(nodeIsText, \"nodeIsText\");\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n__name(nodeIsComment, \"nodeIsComment\");\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n__name(nodeIsFragment, \"nodeIsFragment\");\nvar serialize3 = /* @__PURE__ */ __name((node, config, indentation, depth, refs, printer2) => {\n  if (nodeIsText(node)) {\n    return printText(node.data, config);\n  }\n  if (nodeIsComment(node)) {\n    return printComment(node.data, config);\n  }\n  const type = nodeIsFragment(node) ? `DocumentFragment` : node.tagName.toLowerCase();\n  if (++depth > config.maxDepth) {\n    return printElementAsLeaf(type, config);\n  }\n  return printElement(\n    type,\n    printProps(\n      nodeIsFragment(node) ? [] : Array.from(node.attributes).map((attr) => attr.name).sort(),\n      nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n        props[attribute.name] = attribute.value;\n        return props;\n      }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer2\n    ),\n    printChildren(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer2),\n    config,\n    indentation\n  );\n}, \"serialize\");\nvar plugin3 = { serialize: serialize3, test: test3 };\nvar DOMElement_default = plugin3;\n\n// src/index.ts\nimport style2 from \"ansi-styles\";\nvar toString = Object.prototype.toString;\nvar toISOString = Date.prototype.toISOString;\nvar errorToString = Error.prototype.toString;\nvar regExpToString = RegExp.prototype.toString;\nvar getConstructorName = /* @__PURE__ */ __name((val) => typeof val.constructor === \"function\" && val.constructor.name || \"Object\", \"getConstructorName\");\nvar isWindow = /* @__PURE__ */ __name((val) => typeof window !== \"undefined\" && val === window, \"isWindow\");\nvar SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\nvar NEWLINE_REGEXP = /\\n/gi;\nvar PrettyFormatPluginError = class extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.stack = stack;\n    this.name = this.constructor.name;\n  }\n};\n__name(PrettyFormatPluginError, \"PrettyFormatPluginError\");\nfunction isToStringedArrayType(toStringed) {\n  return toStringed === \"[object Array]\" || toStringed === \"[object ArrayBuffer]\" || toStringed === \"[object DataView]\" || toStringed === \"[object Float32Array]\" || toStringed === \"[object Float64Array]\" || toStringed === \"[object Int8Array]\" || toStringed === \"[object Int16Array]\" || toStringed === \"[object Int32Array]\" || toStringed === \"[object Uint8Array]\" || toStringed === \"[object Uint8ClampedArray]\" || toStringed === \"[object Uint16Array]\" || toStringed === \"[object Uint32Array]\";\n}\n__name(isToStringedArrayType, \"isToStringedArrayType\");\nfunction printNumber(val) {\n  return Object.is(val, -0) ? \"-0\" : String(val);\n}\n__name(printNumber, \"printNumber\");\nfunction printBigInt(val) {\n  return String(`${val}n`);\n}\n__name(printBigInt, \"printBigInt\");\nfunction printFunction(val, printFunctionName) {\n  if (!printFunctionName) {\n    return \"[Function]\";\n  }\n  return \"[Function \" + (val.name || \"anonymous\") + \"]\";\n}\n__name(printFunction, \"printFunction\");\nfunction printSymbol(val) {\n  return String(val).replace(SYMBOL_REGEXP, \"Symbol($1)\");\n}\n__name(printSymbol, \"printSymbol\");\nfunction printError(val) {\n  return \"[\" + errorToString.call(val) + \"]\";\n}\n__name(printError, \"printError\");\nfunction printBasicValue(val, printFunctionName, escapeRegex, escapeString) {\n  if (val === true || val === false) {\n    return \"\" + val;\n  }\n  if (val === void 0) {\n    return \"undefined\";\n  }\n  if (val === null) {\n    return \"null\";\n  }\n  const typeOf = typeof val;\n  if (typeOf === \"number\") {\n    return printNumber(val);\n  }\n  if (typeOf === \"bigint\") {\n    return printBigInt(val);\n  }\n  if (typeOf === \"string\") {\n    if (escapeString) {\n      return '\"' + val.replace(/\"|\\\\/g, \"\\\\$&\") + '\"';\n    }\n    return '\"' + val + '\"';\n  }\n  if (typeOf === \"function\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (typeOf === \"symbol\") {\n    return printSymbol(val);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object WeakMap]\") {\n    return \"WeakMap {}\";\n  }\n  if (toStringed === \"[object WeakSet]\") {\n    return \"WeakSet {}\";\n  }\n  if (toStringed === \"[object Function]\" || toStringed === \"[object GeneratorFunction]\") {\n    return printFunction(val, printFunctionName);\n  }\n  if (toStringed === \"[object Symbol]\") {\n    return printSymbol(val);\n  }\n  if (toStringed === \"[object Date]\") {\n    return isNaN(+val) ? \"Date { NaN }\" : toISOString.call(val);\n  }\n  if (toStringed === \"[object Error]\") {\n    return printError(val);\n  }\n  if (toStringed === \"[object RegExp]\") {\n    if (escapeRegex) {\n      return regExpToString.call(val).replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n    }\n    return regExpToString.call(val);\n  }\n  if (val instanceof Error) {\n    return printError(val);\n  }\n  return null;\n}\n__name(printBasicValue, \"printBasicValue\");\nfunction printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {\n  if (refs.indexOf(val) !== -1) {\n    return \"[Circular]\";\n  }\n  refs = refs.slice();\n  refs.push(val);\n  const hitMaxDepth = ++depth > config.maxDepth;\n  const min = config.min;\n  if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === \"function\" && !hasCalledToJSON) {\n    return printer(val.toJSON(), config, indentation, depth, refs, true);\n  }\n  const toStringed = toString.call(val);\n  if (toStringed === \"[object Arguments]\") {\n    return hitMaxDepth ? \"[Arguments]\" : (min ? \"\" : \"Arguments \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (isToStringedArrayType(toStringed)) {\n    return hitMaxDepth ? \"[\" + val.constructor.name + \"]\" : (min ? \"\" : val.constructor.name + \" \") + \"[\" + printListItems(val, config, indentation, depth, refs, printer) + \"]\";\n  }\n  if (toStringed === \"[object Map]\") {\n    return hitMaxDepth ? \"[Map]\" : \"Map {\" + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer, \" => \") + \"}\";\n  }\n  if (toStringed === \"[object Set]\") {\n    return hitMaxDepth ? \"[Set]\" : \"Set {\" + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + \"}\";\n  }\n  return hitMaxDepth || isWindow(val) ? \"[\" + getConstructorName(val) + \"]\" : (min ? \"\" : getConstructorName(val) + \" \") + \"{\" + printObjectProperties(val, config, indentation, depth, refs, printer) + \"}\";\n}\n__name(printComplexValue, \"printComplexValue\");\nfunction isNewPlugin(plugin4) {\n  return plugin4.serialize != null;\n}\n__name(isNewPlugin, \"isNewPlugin\");\nfunction printPlugin(plugin4, val, config, indentation, depth, refs) {\n  let printed;\n  try {\n    printed = isNewPlugin(plugin4) ? plugin4.serialize(val, config, indentation, depth, refs, printer) : plugin4.print(\n      val,\n      (valChild) => printer(valChild, config, indentation, depth, refs),\n      (str) => {\n        const indentationNext = indentation + config.indent;\n        return indentationNext + str.replace(NEWLINE_REGEXP, \"\\n\" + indentationNext);\n      },\n      {\n        edgeSpacing: config.spacingOuter,\n        min: config.min,\n        spacing: config.spacingInner\n      },\n      config.colors\n    );\n  } catch (error) {\n    throw new PrettyFormatPluginError(error.message, error.stack);\n  }\n  if (typeof printed !== \"string\") {\n    throw new Error(`pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`);\n  }\n  return printed;\n}\n__name(printPlugin, \"printPlugin\");\nfunction findPlugin(plugins2, val) {\n  for (let p = 0; p < plugins2.length; p++) {\n    try {\n      if (plugins2[p].test(val)) {\n        return plugins2[p];\n      }\n    } catch (error) {\n      throw new PrettyFormatPluginError(error.message, error.stack);\n    }\n  }\n  return null;\n}\n__name(findPlugin, \"findPlugin\");\nfunction printer(val, config, indentation, depth, refs, hasCalledToJSON) {\n  const plugin4 = findPlugin(config.plugins, val);\n  if (plugin4 !== null) {\n    return printPlugin(plugin4, val, config, indentation, depth, refs);\n  }\n  const basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);\n}\n__name(printer, \"printer\");\nvar DEFAULT_THEME = {\n  comment: \"gray\",\n  content: \"reset\",\n  prop: \"yellow\",\n  tag: \"cyan\",\n  value: \"green\"\n};\nvar DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);\nvar DEFAULT_OPTIONS = {\n  callToJSON: true,\n  escapeRegex: false,\n  escapeString: true,\n  highlight: false,\n  indent: 2,\n  maxDepth: Infinity,\n  min: false,\n  plugins: [],\n  printFunctionName: true,\n  theme: DEFAULT_THEME\n};\nfunction validateOptions(options) {\n  Object.keys(options).forEach((key) => {\n    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n    }\n  });\n  if (options.min && options.indent !== void 0 && options.indent !== 0) {\n    throw new Error('pretty-format: Options \"min\" and \"indent\" cannot be used together.');\n  }\n  if (options.theme !== void 0) {\n    if (options.theme === null) {\n      throw new Error(`pretty-format: Option \"theme\" must not be null.`);\n    }\n    if (typeof options.theme !== \"object\") {\n      throw new Error(`pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof options.theme}\".`);\n    }\n  }\n}\n__name(validateOptions, \"validateOptions\");\nvar getColorsHighlight = /* @__PURE__ */ __name((options) => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  const value = options.theme && options.theme[key] !== void 0 ? options.theme[key] : DEFAULT_THEME[key];\n  const color = value && style2[value];\n  if (color && typeof color.close === \"string\" && typeof color.open === \"string\") {\n    colors[key] = color;\n  } else {\n    throw new Error(`pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`);\n  }\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsHighlight\");\nvar getColorsEmpty = /* @__PURE__ */ __name(() => DEFAULT_THEME_KEYS.reduce((colors, key) => {\n  colors[key] = { close: \"\", open: \"\" };\n  return colors;\n}, /* @__PURE__ */ Object.create(null)), \"getColorsEmpty\");\nvar getPrintFunctionName = /* @__PURE__ */ __name((options) => options && options.printFunctionName !== void 0 ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName, \"getPrintFunctionName\");\nvar getEscapeRegex = /* @__PURE__ */ __name((options) => options && options.escapeRegex !== void 0 ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex, \"getEscapeRegex\");\nvar getEscapeString = /* @__PURE__ */ __name((options) => options && options.escapeString !== void 0 ? options.escapeString : DEFAULT_OPTIONS.escapeString, \"getEscapeString\");\nvar getConfig = /* @__PURE__ */ __name((options) => ({\n  callToJSON: options && options.callToJSON !== void 0 ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,\n  colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),\n  escapeRegex: getEscapeRegex(options),\n  escapeString: getEscapeString(options),\n  indent: options && options.min ? \"\" : createIndent(options && options.indent !== void 0 ? options.indent : DEFAULT_OPTIONS.indent),\n  maxDepth: options && options.maxDepth !== void 0 ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,\n  min: options && options.min !== void 0 ? options.min : DEFAULT_OPTIONS.min,\n  plugins: options && options.plugins !== void 0 ? options.plugins : DEFAULT_OPTIONS.plugins,\n  printFunctionName: getPrintFunctionName(options),\n  spacingInner: options && options.min ? \" \" : \"\\n\",\n  spacingOuter: options && options.min ? \"\" : \"\\n\"\n}), \"getConfig\");\nfunction createIndent(indent) {\n  return new Array(indent + 1).join(\" \");\n}\n__name(createIndent, \"createIndent\");\nfunction format(val, options) {\n  if (options) {\n    validateOptions(options);\n    if (options.plugins) {\n      const plugin4 = findPlugin(options.plugins, val);\n      if (plugin4 !== null) {\n        return printPlugin(plugin4, val, getConfig(options), \"\", 0, []);\n      }\n    }\n  }\n  const basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));\n  if (basicResult !== null) {\n    return basicResult;\n  }\n  return printComplexValue(val, getConfig(options), \"\", 0, []);\n}\n__name(format, \"format\");\nvar plugins = {\n  ConvertAnsi: ConvertAnsi_default,\n  DOMCollection: DOMCollection_default,\n  DOMElement: DOMElement_default\n};\nvar src_default = format;\nexport {\n  src_default as default,\n  format,\n  plugins\n};\n//# sourceMappingURL=index.esm.mjs.map\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}",
  "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;",
  "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;",
  "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};",
  "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n",
  "'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};\n",
  "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n",
  "// eslint-disable-next-line strict\nexport default null;\n",
  "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n",
  "'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n",
  "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n",
  "'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n",
  "'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n",
  "'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n",
  "'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n",
  "'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n",
  "import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== 'undefined' && (\n    (product = navigator.product) === 'ReactNative' ||\n    product === 'NativeScript' ||\n    product === 'NS')\n  ) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n})();\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\n const isStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n",
  "'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n",
  "'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n",
  "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\nconst DEFAULT_CONTENT_TYPE = {\n  'Content-Type': undefined\n};\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nexport default defaults;\n",
  "'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n",
  "'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n",
  "'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n",
  "'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n",
  "'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n",
  "'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n",
  "'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })();\n",
  "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n",
  "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n",
  "'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n",
  "'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n",
  "'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n",
  "'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n",
  "'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport cookies from './../helpers/cookies.js';\nimport buildURL from './../helpers/buildURL.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport isURLSameOrigin from './../helpers/isURLSameOrigin.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport speedometer from '../helpers/speedometer.js';\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false); // Let the browser set it\n      } else {\n        requestHeaders.setContentType('multipart/form-data;', false); // mobile/desktop app frameworks\n      }\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.isStandardBrowserEnv) {\n      // Add xsrf header\n      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))\n        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n",
  "import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          'ERR_NOT_SUPPORT'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter '${nameOrAdapter}' is not available in the build` :\n          `Unknown adapter '${nameOrAdapter}'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n",
  "'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n",
  "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n",
  "export const VERSION = \"1.4.0\";",
  "'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n",
  "'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    let contextHeaders;\n\n    // Flatten headers\n    contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    contextHeaders && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n",
  "'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n",
  "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n",
  "'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n",
  "const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n",
  "'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "import { Ray, ray } from 'node-ray/web';\n\nRay.useDefaultSettings({\n\tremote_path: 'webpack-internal:\\/\\/\\/(sc_server|sc_client|app-client)\\/\\.',\n\tlocal_path: process.env.LOCAL_PATH,\n\tsending_payload_callback: (instance: any, payloads: { data: { origin: any; }; }[] | { data: any; toArray: (() => { type: string; content: { label: string; }; origin: any; }) | (() => { type: string; content: { color: string; }; origin: any; }) | (() => { type: string; content: { label: string; }; origin: any; }) | (() => { type: string; content: { color: string; }; origin: any; }) | (() => { type: string; content: { label: string; }; origin: any; }) | (() => { type: string; content: { color: string; }; origin: any; }); }[]) => {\n\t\tswitch (payloads[0].data.origin.file.match(/webpack-internal:\\/\\/\\/(?<type>sc_server|sc_client|app-client)\\/\\./).groups.type) {\n\t\t\tcase 'sc_server':\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'label',\n\t\t\t\t\t\tcontent: { label: 'RSC' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\tcontent: { color: 'green' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tbreak;\n\t\t\tcase 'sc_client':\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'label',\n\t\t\t\t\t\tcontent: { label: 'SSR' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\tcontent: { color: 'orange' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tbreak;\n\t\t\tcase 'app-client':\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'label',\n\t\t\t\t\t\tcontent: { label: 'Browser' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\tcontent: { color: 'blue' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tbreak;\n\t\t}\n\t},\n});\n\nexport default ray;",
  "'use client';\n\nimport React, { PropsWithChildren, RefObject, useEffect, useLayoutEffect, useRef } from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport ray from './index';\n\n\nexport function useRay(value: any, options = { replace: true, type: 'toJson' }) {\n\tconst rayRef = useRef(ray());\n\n\tuseEffect(() => {\n\t\tif (options.replace !== true) {\n\t\t\trayRef.current = ray();\n\t\t}\n\n\t\trayRef.current[options.type ?? 'toJson'](value);\n\t}, [ value ]);\n}\n\n\nexport function useRayWithElement(ref: RefObject<HTMLElement>, dependencies: Array<any> = [], options = { replace: true }) {\n\tconst rayRef = useRef(ray());\n\n\tuseLayoutEffect(() => {\n\t\tif (!options.replace) {\n\t\t\trayRef.current = ray();\n\t\t}\n\n\t\tif (ref.current) {\n\t\t\trayRef.current.html(ref.current.innerHTML);\n\t\t}\n\t}, dependencies);\n}\n\nexport function Ray({ children, dependencies }: PropsWithChildren<{ dependencies?: Array<any>}>) {\n\tconst ref = useRef(null);\n\tuseRayWithElement(ref, dependencies);\n\n\treturn (<Slot ref={ref}>{children}</Slot>);\n\n}\n\nexport default ray;",
  "export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}",
  "import $9IrjX$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $9IrjX$forwardRef, Children as $9IrjX$Children, isValidElement as $9IrjX$isValidElement, createElement as $9IrjX$createElement, cloneElement as $9IrjX$cloneElement, Fragment as $9IrjX$Fragment} from \"react\";\nimport {composeRefs as $9IrjX$composeRefs} from \"@radix-ui/react-compose-refs\";\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    const childrenArray = $9IrjX$Children.toArray(children);\n    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n    if (slottable) {\n        // the new element to render is the one passed as a child of `Slottable`\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                // because the new element will be the one rendered, we are only interested\n                // in grabbing its children (`newElement.props.children`)\n                if ($9IrjX$Children.count(newElement) > 1) return $9IrjX$Children.only(null);\n                return /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? newElement.props.children : null;\n            } else return child;\n        });\n        return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n            ref: forwardedRef\n        }), /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? /*#__PURE__*/ $9IrjX$cloneElement(newElement, undefined, newChildren) : null);\n    }\n    return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n        ref: forwardedRef\n    }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    if (/*#__PURE__*/ $9IrjX$isValidElement(children)) return /*#__PURE__*/ $9IrjX$cloneElement(children, {\n        ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),\n        ref: $9IrjX$composeRefs(forwardedRef, children.ref)\n    });\n    return $9IrjX$Children.count(children) > 1 ? $9IrjX$Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children: children  })=>{\n    return /*#__PURE__*/ $9IrjX$createElement($9IrjX$Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */ function $5e63c961fc1ce211$var$isSlottable(child) {\n    return /*#__PURE__*/ $9IrjX$isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n    // all child props should override\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            // if the handler exists on both, we compose them\n            if (slotPropValue && childPropValue) overrideProps[propName] = (...args)=>{\n                childPropValue(...args);\n                slotPropValue(...args);\n            };\n            else if (slotPropValue) overrideProps[propName] = slotPropValue;\n        } else if (propName === 'style') overrideProps[propName] = {\n            ...slotPropValue,\n            ...childPropValue\n        };\n        else if (propName === 'className') overrideProps[propName] = [\n            slotPropValue,\n            childPropValue\n        ].filter(Boolean).join(' ');\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nconst $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\n\n\n\n\nexport {$5e63c961fc1ce211$export$8c6ed5c666ac1360 as Slot, $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 as Slottable, $5e63c961fc1ce211$export$be92b6f5f03c0fe9 as Root};\n//# sourceMappingURL=index.module.js.map\n",
  "import {useCallback as $3vqmr$useCallback} from \"react\";\n\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$var$setRef(ref, value) {\n    if (typeof ref === 'function') ref(value);\n    else if (ref !== null && ref !== undefined) ref.current = value;\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {\n    return (node)=>refs.forEach((ref)=>$6ed0406888f73fc4$var$setRef(ref, node)\n        )\n    ;\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */ function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return $3vqmr$useCallback($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);\n}\n\n\n\n\nexport {$6ed0406888f73fc4$export$43e446d32b3d21af as composeRefs, $6ed0406888f73fc4$export$c7b2cbe3552a0d05 as useComposedRefs};\n//# sourceMappingURL=index.module.js.map\n",
  "import $9IrjX$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $9IrjX$forwardRef, Children as $9IrjX$Children, isValidElement as $9IrjX$isValidElement, createElement as $9IrjX$createElement, cloneElement as $9IrjX$cloneElement, Fragment as $9IrjX$Fragment} from \"react\";\nimport {composeRefs as $9IrjX$composeRefs} from \"@radix-ui/react-compose-refs\";\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    const childrenArray = $9IrjX$Children.toArray(children);\n    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n    if (slottable) {\n        // the new element to render is the one passed as a child of `Slottable`\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                // because the new element will be the one rendered, we are only interested\n                // in grabbing its children (`newElement.props.children`)\n                if ($9IrjX$Children.count(newElement) > 1) return $9IrjX$Children.only(null);\n                return /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? newElement.props.children : null;\n            } else return child;\n        });\n        return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n            ref: forwardedRef\n        }), /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? /*#__PURE__*/ $9IrjX$cloneElement(newElement, undefined, newChildren) : null);\n    }\n    return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n        ref: forwardedRef\n    }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    if (/*#__PURE__*/ $9IrjX$isValidElement(children)) return /*#__PURE__*/ $9IrjX$cloneElement(children, {\n        ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),\n        ref: $9IrjX$composeRefs(forwardedRef, children.ref)\n    });\n    return $9IrjX$Children.count(children) > 1 ? $9IrjX$Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children: children  })=>{\n    return /*#__PURE__*/ $9IrjX$createElement($9IrjX$Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */ function $5e63c961fc1ce211$var$isSlottable(child) {\n    return /*#__PURE__*/ $9IrjX$isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n    // all child props should override\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            // if the handler exists on both, we compose them\n            if (slotPropValue && childPropValue) overrideProps[propName] = (...args)=>{\n                childPropValue(...args);\n                slotPropValue(...args);\n            };\n            else if (slotPropValue) overrideProps[propName] = slotPropValue;\n        } else if (propName === 'style') overrideProps[propName] = {\n            ...slotPropValue,\n            ...childPropValue\n        };\n        else if (propName === 'className') overrideProps[propName] = [\n            slotPropValue,\n            childPropValue\n        ].filter(Boolean).join(' ');\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nconst $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\n\n\n\n\nexport {$5e63c961fc1ce211$export$8c6ed5c666ac1360 as Slot, $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 as Slottable, $5e63c961fc1ce211$export$be92b6f5f03c0fe9 as Root};\n//# sourceMappingURL=index.module.js.map\n",
  "'use client';\n\nimport React, { PropsWithChildren, RefObject, useEffect, useLayoutEffect, useRef } from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport ray from './index';\n\n\nexport function useRay(value: any, options = { replace: true, type: 'toJson' }) {\n\tconst rayRef = useRef(ray());\n\n\tuseEffect(() => {\n\t\tif (options.replace !== true) {\n\t\t\trayRef.current = ray();\n\t\t}\n\n\t\trayRef.current[options.type ?? 'toJson'](value);\n\t}, [ value ]);\n}\n\n\nexport function useRayWithElement(ref: RefObject<HTMLElement>, dependencies: Array<any> = [], options = { replace: true }) {\n\tconst rayRef = useRef(ray());\n\n\tuseLayoutEffect(() => {\n\t\tif (!options.replace) {\n\t\t\trayRef.current = ray();\n\t\t}\n\n\t\tif (ref.current) {\n\t\t\trayRef.current.html(ref.current.innerHTML);\n\t\t}\n\t}, dependencies);\n}\n\nexport function Ray({ children, dependencies }: PropsWithChildren<{ dependencies?: Array<any>}>) {\n\tconst ref = useRef(null);\n\tuseRayWithElement(ref, dependencies);\n\n\treturn (<Slot ref={ref}>{children}</Slot>);\n\n}\n\nexport default ray;"
  ],
  "mappings": "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",
  "debugId": "8BF7053C70202D2664756e2164756e21",
  "names": []
}
{
  "version": 3,
  "sources": ["../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../node_modules/node-ray/dist/web.esm.mjs", "../src/index.ts"],
  "sourcesContent": [
    "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// node_modules/source-map/lib/base64.js\nvar require_base64 = __commonJS({\n  \"node_modules/source-map/lib/base64.js\"(exports) {\n    var intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n    exports.encode = function(number) {\n      if (0 <= number && number < intToCharMap.length) {\n        return intToCharMap[number];\n      }\n      throw new TypeError(\"Must be between 0 and 63: \" + number);\n    };\n    exports.decode = function(charCode) {\n      var bigA = 65;\n      var bigZ = 90;\n      var littleA = 97;\n      var littleZ = 122;\n      var zero = 48;\n      var nine = 57;\n      var plus = 43;\n      var slash = 47;\n      var littleOffset = 26;\n      var numberOffset = 52;\n      if (bigA <= charCode && charCode <= bigZ) {\n        return charCode - bigA;\n      }\n      if (littleA <= charCode && charCode <= littleZ) {\n        return charCode - littleA + littleOffset;\n      }\n      if (zero <= charCode && charCode <= nine) {\n        return charCode - zero + numberOffset;\n      }\n      if (charCode == plus) {\n        return 62;\n      }\n      if (charCode == slash) {\n        return 63;\n      }\n      return -1;\n    };\n  }\n});\n\n// node_modules/source-map/lib/base64-vlq.js\nvar require_base64_vlq = __commonJS({\n  \"node_modules/source-map/lib/base64-vlq.js\"(exports) {\n    var base64 = require_base64();\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    __name(toVLQSigned, \"toVLQSigned\");\n    function fromVLQSigned(aValue) {\n      var isNegative = (aValue & 1) === 1;\n      var shifted = aValue >> 1;\n      return isNegative ? -shifted : shifted;\n    }\n    __name(fromVLQSigned, \"fromVLQSigned\");\n    exports.encode = /* @__PURE__ */ __name(function base64VLQ_encode(aValue) {\n      var encoded = \"\";\n      var digit;\n      var vlq = toVLQSigned(aValue);\n      do {\n        digit = vlq & VLQ_BASE_MASK;\n        vlq >>>= VLQ_BASE_SHIFT;\n        if (vlq > 0) {\n          digit |= VLQ_CONTINUATION_BIT;\n        }\n        encoded += base64.encode(digit);\n      } while (vlq > 0);\n      return encoded;\n    }, \"base64VLQ_encode\");\n    exports.decode = /* @__PURE__ */ __name(function base64VLQ_decode(aStr, aIndex, aOutParam) {\n      var strLen = aStr.length;\n      var result = 0;\n      var shift = 0;\n      var continuation, digit;\n      do {\n        if (aIndex >= strLen) {\n          throw new Error(\"Expected more digits in base 64 VLQ value.\");\n        }\n        digit = base64.decode(aStr.charCodeAt(aIndex++));\n        if (digit === -1) {\n          throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n        }\n        continuation = !!(digit & VLQ_CONTINUATION_BIT);\n        digit &= VLQ_BASE_MASK;\n        result = result + (digit << shift);\n        shift += VLQ_BASE_SHIFT;\n      } while (continuation);\n      aOutParam.value = fromVLQSigned(result);\n      aOutParam.rest = aIndex;\n    }, \"base64VLQ_decode\");\n  }\n});\n\n// node_modules/source-map/lib/util.js\nvar require_util = __commonJS({\n  \"node_modules/source-map/lib/util.js\"(exports) {\n    function getArg(aArgs, aName, aDefaultValue) {\n      if (aName in aArgs) {\n        return aArgs[aName];\n      } else if (arguments.length === 3) {\n        return aDefaultValue;\n      } else {\n        throw new Error('\"' + aName + '\" is a required argument.');\n      }\n    }\n    __name(getArg, \"getArg\");\n    exports.getArg = getArg;\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n      var match = aUrl.match(urlRegexp);\n      if (!match) {\n        return null;\n      }\n      return {\n        scheme: match[1],\n        auth: match[2],\n        host: match[3],\n        port: match[4],\n        path: match[5]\n      };\n    }\n    __name(urlParse, \"urlParse\");\n    exports.urlParse = urlParse;\n    function urlGenerate(aParsedUrl) {\n      var url = \"\";\n      if (aParsedUrl.scheme) {\n        url += aParsedUrl.scheme + \":\";\n      }\n      url += \"//\";\n      if (aParsedUrl.auth) {\n        url += aParsedUrl.auth + \"@\";\n      }\n      if (aParsedUrl.host) {\n        url += aParsedUrl.host;\n      }\n      if (aParsedUrl.port) {\n        url += \":\" + aParsedUrl.port;\n      }\n      if (aParsedUrl.path) {\n        url += aParsedUrl.path;\n      }\n      return url;\n    }\n    __name(urlGenerate, \"urlGenerate\");\n    exports.urlGenerate = urlGenerate;\n    function normalize(aPath) {\n      var path = aPath;\n      var url = urlParse(aPath);\n      if (url) {\n        if (!url.path) {\n          return aPath;\n        }\n        path = url.path;\n      }\n      var isAbsolute = exports.isAbsolute(path);\n      var parts = path.split(/\\/+/);\n      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n        part = parts[i];\n        if (part === \".\") {\n          parts.splice(i, 1);\n        } else if (part === \"..\") {\n          up++;\n        } else if (up > 0) {\n          if (part === \"\") {\n            parts.splice(i + 1, up);\n            up = 0;\n          } else {\n            parts.splice(i, 2);\n            up--;\n          }\n        }\n      }\n      path = parts.join(\"/\");\n      if (path === \"\") {\n        path = isAbsolute ? \"/\" : \".\";\n      }\n      if (url) {\n        url.path = path;\n        return urlGenerate(url);\n      }\n      return path;\n    }\n    __name(normalize, \"normalize\");\n    exports.normalize = normalize;\n    function join(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      if (aPath === \"\") {\n        aPath = \".\";\n      }\n      var aPathUrl = urlParse(aPath);\n      var aRootUrl = urlParse(aRoot);\n      if (aRootUrl) {\n        aRoot = aRootUrl.path || \"/\";\n      }\n      if (aPathUrl && !aPathUrl.scheme) {\n        if (aRootUrl) {\n          aPathUrl.scheme = aRootUrl.scheme;\n        }\n        return urlGenerate(aPathUrl);\n      }\n      if (aPathUrl || aPath.match(dataUrlRegexp)) {\n        return aPath;\n      }\n      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n        aRootUrl.host = aPath;\n        return urlGenerate(aRootUrl);\n      }\n      var joined = aPath.charAt(0) === \"/\" ? aPath : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n      if (aRootUrl) {\n        aRootUrl.path = joined;\n        return urlGenerate(aRootUrl);\n      }\n      return joined;\n    }\n    __name(join, \"join\");\n    exports.join = join;\n    exports.isAbsolute = function(aPath) {\n      return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n    };\n    function relative(aRoot, aPath) {\n      if (aRoot === \"\") {\n        aRoot = \".\";\n      }\n      aRoot = aRoot.replace(/\\/$/, \"\");\n      var level = 0;\n      while (aPath.indexOf(aRoot + \"/\") !== 0) {\n        var index = aRoot.lastIndexOf(\"/\");\n        if (index < 0) {\n          return aPath;\n        }\n        aRoot = aRoot.slice(0, index);\n        if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n          return aPath;\n        }\n        ++level;\n      }\n      return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n    }\n    __name(relative, \"relative\");\n    exports.relative = relative;\n    var supportsNullProto = function() {\n      var obj = /* @__PURE__ */ Object.create(null);\n      return !(\"__proto__\" in obj);\n    }();\n    function identity(s) {\n      return s;\n    }\n    __name(identity, \"identity\");\n    function toSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return \"$\" + aStr;\n      }\n      return aStr;\n    }\n    __name(toSetString, \"toSetString\");\n    exports.toSetString = supportsNullProto ? identity : toSetString;\n    function fromSetString(aStr) {\n      if (isProtoString(aStr)) {\n        return aStr.slice(1);\n      }\n      return aStr;\n    }\n    __name(fromSetString, \"fromSetString\");\n    exports.fromSetString = supportsNullProto ? identity : fromSetString;\n    function isProtoString(s) {\n      if (!s) {\n        return false;\n      }\n      var length = s.length;\n      if (length < 9) {\n        return false;\n      }\n      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n        return false;\n      }\n      for (var i = length - 10; i >= 0; i--) {\n        if (s.charCodeAt(i) !== 36) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isProtoString, \"isProtoString\");\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n      var cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0 || onlyCompareOriginal) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByOriginalPositions, \"compareByOriginalPositions\");\n    exports.compareByOriginalPositions = compareByOriginalPositions;\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0 || onlyCompareGenerated) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsDeflated, \"compareByGeneratedPositionsDeflated\");\n    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n    function strcmp(aStr1, aStr2) {\n      if (aStr1 === aStr2) {\n        return 0;\n      }\n      if (aStr1 === null) {\n        return 1;\n      }\n      if (aStr2 === null) {\n        return -1;\n      }\n      if (aStr1 > aStr2) {\n        return 1;\n      }\n      return -1;\n    }\n    __name(strcmp, \"strcmp\");\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n      var cmp = mappingA.generatedLine - mappingB.generatedLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = strcmp(mappingA.source, mappingB.source);\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalLine - mappingB.originalLine;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      cmp = mappingA.originalColumn - mappingB.originalColumn;\n      if (cmp !== 0) {\n        return cmp;\n      }\n      return strcmp(mappingA.name, mappingB.name);\n    }\n    __name(compareByGeneratedPositionsInflated, \"compareByGeneratedPositionsInflated\");\n    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n    function parseSourceMapInput(str) {\n      return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n    }\n    __name(parseSourceMapInput, \"parseSourceMapInput\");\n    exports.parseSourceMapInput = parseSourceMapInput;\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n      sourceURL = sourceURL || \"\";\n      if (sourceRoot) {\n        if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n          sourceRoot += \"/\";\n        }\n        sourceURL = sourceRoot + sourceURL;\n      }\n      if (sourceMapURL) {\n        var parsed = urlParse(sourceMapURL);\n        if (!parsed) {\n          throw new Error(\"sourceMapURL could not be parsed\");\n        }\n        if (parsed.path) {\n          var index = parsed.path.lastIndexOf(\"/\");\n          if (index >= 0) {\n            parsed.path = parsed.path.substring(0, index + 1);\n          }\n        }\n        sourceURL = join(urlGenerate(parsed), sourceURL);\n      }\n      return normalize(sourceURL);\n    }\n    __name(computeSourceURL, \"computeSourceURL\");\n    exports.computeSourceURL = computeSourceURL;\n  }\n});\n\n// node_modules/source-map/lib/array-set.js\nvar require_array_set = __commonJS({\n  \"node_modules/source-map/lib/array-set.js\"(exports) {\n    var util = require_util();\n    var has = Object.prototype.hasOwnProperty;\n    var hasNativeMap = typeof Map !== \"undefined\";\n    function ArraySet() {\n      this._array = [];\n      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);\n    }\n    __name(ArraySet, \"ArraySet\");\n    ArraySet.fromArray = /* @__PURE__ */ __name(function ArraySet_fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n      return set;\n    }, \"ArraySet_fromArray\");\n    ArraySet.prototype.size = /* @__PURE__ */ __name(function ArraySet_size() {\n      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n    }, \"ArraySet_size\");\n    ArraySet.prototype.add = /* @__PURE__ */ __name(function ArraySet_add(aStr, aAllowDuplicates) {\n      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n      var idx = this._array.length;\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n      if (!isDuplicate) {\n        if (hasNativeMap) {\n          this._set.set(aStr, idx);\n        } else {\n          this._set[sStr] = idx;\n        }\n      }\n    }, \"ArraySet_add\");\n    ArraySet.prototype.has = /* @__PURE__ */ __name(function ArraySet_has(aStr) {\n      if (hasNativeMap) {\n        return this._set.has(aStr);\n      } else {\n        var sStr = util.toSetString(aStr);\n        return has.call(this._set, sStr);\n      }\n    }, \"ArraySet_has\");\n    ArraySet.prototype.indexOf = /* @__PURE__ */ __name(function ArraySet_indexOf(aStr) {\n      if (hasNativeMap) {\n        var idx = this._set.get(aStr);\n        if (idx >= 0) {\n          return idx;\n        }\n      } else {\n        var sStr = util.toSetString(aStr);\n        if (has.call(this._set, sStr)) {\n          return this._set[sStr];\n        }\n      }\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }, \"ArraySet_indexOf\");\n    ArraySet.prototype.at = /* @__PURE__ */ __name(function ArraySet_at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n      throw new Error(\"No element indexed by \" + aIdx);\n    }, \"ArraySet_at\");\n    ArraySet.prototype.toArray = /* @__PURE__ */ __name(function ArraySet_toArray() {\n      return this._array.slice();\n    }, \"ArraySet_toArray\");\n    exports.ArraySet = ArraySet;\n  }\n});\n\n// node_modules/source-map/lib/mapping-list.js\nvar require_mapping_list = __commonJS({\n  \"node_modules/source-map/lib/mapping-list.js\"(exports) {\n    var util = require_util();\n    function generatedPositionAfter(mappingA, mappingB) {\n      var lineA = mappingA.generatedLine;\n      var lineB = mappingB.generatedLine;\n      var columnA = mappingA.generatedColumn;\n      var columnB = mappingB.generatedColumn;\n      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n    }\n    __name(generatedPositionAfter, \"generatedPositionAfter\");\n    function MappingList() {\n      this._array = [];\n      this._sorted = true;\n      this._last = { generatedLine: -1, generatedColumn: 0 };\n    }\n    __name(MappingList, \"MappingList\");\n    MappingList.prototype.unsortedForEach = /* @__PURE__ */ __name(function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }, \"MappingList_forEach\");\n    MappingList.prototype.add = /* @__PURE__ */ __name(function MappingList_add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n        this._array.push(aMapping);\n      }\n    }, \"MappingList_add\");\n    MappingList.prototype.toArray = /* @__PURE__ */ __name(function MappingList_toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n        this._sorted = true;\n      }\n      return this._array;\n    }, \"MappingList_toArray\");\n    exports.MappingList = MappingList;\n  }\n});\n\n// node_modules/source-map/lib/source-map-generator.js\nvar require_source_map_generator = __commonJS({\n  \"node_modules/source-map/lib/source-map-generator.js\"(exports) {\n    var base64VLQ = require_base64_vlq();\n    var util = require_util();\n    var ArraySet = require_array_set().ArraySet;\n    var MappingList = require_mapping_list().MappingList;\n    function SourceMapGenerator(aArgs) {\n      if (!aArgs) {\n        aArgs = {};\n      }\n      this._file = util.getArg(aArgs, \"file\", null);\n      this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n      this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      this._mappings = new MappingList();\n      this._sourcesContents = null;\n    }\n    __name(SourceMapGenerator, \"SourceMapGenerator\");\n    SourceMapGenerator.prototype._version = 3;\n    SourceMapGenerator.fromSourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var sourceRelative = sourceFile;\n        if (sourceRoot !== null) {\n          sourceRelative = util.relative(sourceRoot, sourceFile);\n        }\n        if (!generator._sources.has(sourceRelative)) {\n          generator._sources.add(sourceRelative);\n        }\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    }, \"SourceMapGenerator_fromSourceMap\");\n    SourceMapGenerator.prototype.addMapping = /* @__PURE__ */ __name(function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, \"generated\");\n      var original = util.getArg(aArgs, \"original\", null);\n      var source = util.getArg(aArgs, \"source\", null);\n      var name = util.getArg(aArgs, \"name\", null);\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n      if (source != null) {\n        source = String(source);\n        if (!this._sources.has(source)) {\n          this._sources.add(source);\n        }\n      }\n      if (name != null) {\n        name = String(name);\n        if (!this._names.has(name)) {\n          this._names.add(name);\n        }\n      }\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source,\n        name\n      });\n    }, \"SourceMapGenerator_addMapping\");\n    SourceMapGenerator.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n      if (aSourceContent != null) {\n        if (!this._sourcesContents) {\n          this._sourcesContents = /* @__PURE__ */ Object.create(null);\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    }, \"SourceMapGenerator_setSourceContent\");\n    SourceMapGenerator.prototype.applySourceMap = /* @__PURE__ */ __name(function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.`\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n      this._mappings.unsortedForEach(function(mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source);\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n      aSourceMapConsumer.sources.forEach(function(sourceFile2) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile2 = util.join(aSourceMapPath, sourceFile2);\n          }\n          if (sourceRoot != null) {\n            sourceFile2 = util.relative(sourceRoot, sourceFile2);\n          }\n          this.setSourceContent(sourceFile2, content);\n        }\n      }, this);\n    }, \"SourceMapGenerator_applySourceMap\");\n    SourceMapGenerator.prototype._validateMapping = /* @__PURE__ */ __name(function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {\n      if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n          \"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\"\n        );\n      }\n      if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n        return;\n      } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n        return;\n      } else {\n        throw new Error(\"Invalid mapping: \" + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    }, \"SourceMapGenerator_validateMapping\");\n    SourceMapGenerator.prototype._serializeMappings = /* @__PURE__ */ __name(function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = \"\";\n      var next;\n      var mapping;\n      var nameIdx;\n      var sourceIdx;\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n        next = \"\";\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            next += \";\";\n            previousGeneratedLine++;\n          }\n        } else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            next += \",\";\n          }\n        }\n        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n        if (mapping.source != null) {\n          sourceIdx = this._sources.indexOf(mapping.source);\n          next += base64VLQ.encode(sourceIdx - previousSource);\n          previousSource = sourceIdx;\n          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n          if (mapping.name != null) {\n            nameIdx = this._names.indexOf(mapping.name);\n            next += base64VLQ.encode(nameIdx - previousName);\n            previousName = nameIdx;\n          }\n        }\n        result += next;\n      }\n      return result;\n    }, \"SourceMapGenerator_serializeMappings\");\n    SourceMapGenerator.prototype._generateSourcesContent = /* @__PURE__ */ __name(function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function(source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n      }, this);\n    }, \"SourceMapGenerator_generateSourcesContent\");\n    SourceMapGenerator.prototype.toJSON = /* @__PURE__ */ __name(function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n      return map;\n    }, \"SourceMapGenerator_toJSON\");\n    SourceMapGenerator.prototype.toString = /* @__PURE__ */ __name(function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    }, \"SourceMapGenerator_toString\");\n    exports.SourceMapGenerator = SourceMapGenerator;\n  }\n});\n\n// node_modules/source-map/lib/binary-search.js\nvar require_binary_search = __commonJS({\n  \"node_modules/source-map/lib/binary-search.js\"(exports) {\n    exports.GREATEST_LOWER_BOUND = 1;\n    exports.LEAST_UPPER_BOUND = 2;\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n      var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n      var cmp = aCompare(aNeedle, aHaystack[mid], true);\n      if (cmp === 0) {\n        return mid;\n      } else if (cmp > 0) {\n        if (aHigh - mid > 1) {\n          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return aHigh < aHaystack.length ? aHigh : -1;\n        } else {\n          return mid;\n        }\n      } else {\n        if (mid - aLow > 1) {\n          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n        }\n        if (aBias == exports.LEAST_UPPER_BOUND) {\n          return mid;\n        } else {\n          return aLow < 0 ? -1 : aLow;\n        }\n      }\n    }\n    __name(recursiveSearch, \"recursiveSearch\");\n    exports.search = /* @__PURE__ */ __name(function search(aNeedle, aHaystack, aCompare, aBias) {\n      if (aHaystack.length === 0) {\n        return -1;\n      }\n      var index = recursiveSearch(\n        -1,\n        aHaystack.length,\n        aNeedle,\n        aHaystack,\n        aCompare,\n        aBias || exports.GREATEST_LOWER_BOUND\n      );\n      if (index < 0) {\n        return -1;\n      }\n      while (index - 1 >= 0) {\n        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n          break;\n        }\n        --index;\n      }\n      return index;\n    }, \"search\");\n  }\n});\n\n// node_modules/source-map/lib/quick-sort.js\nvar require_quick_sort = __commonJS({\n  \"node_modules/source-map/lib/quick-sort.js\"(exports) {\n    function swap(ary, x, y) {\n      var temp = ary[x];\n      ary[x] = ary[y];\n      ary[y] = temp;\n    }\n    __name(swap, \"swap\");\n    function randomIntInRange(low, high) {\n      return Math.round(low + Math.random() * (high - low));\n    }\n    __name(randomIntInRange, \"randomIntInRange\");\n    function doQuickSort(ary, comparator, p, r) {\n      if (p < r) {\n        var pivotIndex = randomIntInRange(p, r);\n        var i = p - 1;\n        swap(ary, pivotIndex, r);\n        var pivot = ary[r];\n        for (var j = p; j < r; j++) {\n          if (comparator(ary[j], pivot) <= 0) {\n            i += 1;\n            swap(ary, i, j);\n          }\n        }\n        swap(ary, i + 1, j);\n        var q = i + 1;\n        doQuickSort(ary, comparator, p, q - 1);\n        doQuickSort(ary, comparator, q + 1, r);\n      }\n    }\n    __name(doQuickSort, \"doQuickSort\");\n    exports.quickSort = function(ary, comparator) {\n      doQuickSort(ary, comparator, 0, ary.length - 1);\n    };\n  }\n});\n\n// node_modules/source-map/lib/source-map-consumer.js\nvar require_source_map_consumer = __commonJS({\n  \"node_modules/source-map/lib/source-map-consumer.js\"(exports) {\n    var util = require_util();\n    var binarySearch = require_binary_search();\n    var ArraySet = require_array_set().ArraySet;\n    var base64VLQ = require_base64_vlq();\n    var quickSort = require_quick_sort().quickSort;\n    function SourceMapConsumer3(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n    }\n    __name(SourceMapConsumer3, \"SourceMapConsumer\");\n    SourceMapConsumer3.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n    };\n    SourceMapConsumer3.prototype._version = 3;\n    SourceMapConsumer3.prototype.__generatedMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_generatedMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__generatedMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__generatedMappings;\n      }\n    });\n    SourceMapConsumer3.prototype.__originalMappings = null;\n    Object.defineProperty(SourceMapConsumer3.prototype, \"_originalMappings\", {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (!this.__originalMappings) {\n          this._parseMappings(this._mappings, this.sourceRoot);\n        }\n        return this.__originalMappings;\n      }\n    });\n    SourceMapConsumer3.prototype._charIsMappingSeparator = /* @__PURE__ */ __name(function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    }, \"SourceMapConsumer_charIsMappingSeparator\");\n    SourceMapConsumer3.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }, \"SourceMapConsumer_parseMappings\");\n    SourceMapConsumer3.GENERATED_ORDER = 1;\n    SourceMapConsumer3.ORIGINAL_ORDER = 2;\n    SourceMapConsumer3.GREATEST_LOWER_BOUND = 1;\n    SourceMapConsumer3.LEAST_UPPER_BOUND = 2;\n    SourceMapConsumer3.prototype.eachMapping = /* @__PURE__ */ __name(function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer3.GENERATED_ORDER;\n      var mappings;\n      switch (order) {\n        case SourceMapConsumer3.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n        case SourceMapConsumer3.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function(mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }, \"SourceMapConsumer_eachMapping\");\n    SourceMapConsumer3.prototype.allGeneratedPositionsFor = /* @__PURE__ */ __name(function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\");\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n      if (needle.source < 0) {\n        return [];\n      }\n      var mappings = [];\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        binarySearch.LEAST_UPPER_BOUND\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (aArgs.column === void 0) {\n          var originalLine = mapping.originalLine;\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n      return mappings;\n    }, \"SourceMapConsumer_allGeneratedPositionsFor\");\n    exports.SourceMapConsumer = SourceMapConsumer3;\n    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\");\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null);\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String).map(util.normalize).map(function(source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n      this._names = ArraySet.fromArray(names.map(String), true);\n      this._sources = ArraySet.fromArray(sources, true);\n      this._absoluteSources = this._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      this.sourceRoot = sourceRoot;\n      this.sourcesContent = sourcesContent;\n      this._mappings = mappings;\n      this._sourceMapURL = aSourceMapURL;\n      this.file = file;\n    }\n    __name(BasicSourceMapConsumer, \"BasicSourceMapConsumer\");\n    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer3;\n    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      }\n      var i;\n      for (i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n      return -1;\n    };\n    BasicSourceMapConsumer.fromSourceMap = /* @__PURE__ */ __name(function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(\n        smc._sources.toArray(),\n        smc.sourceRoot\n      );\n      smc.file = aSourceMap._file;\n      smc._sourceMapURL = aSourceMapURL;\n      smc._absoluteSources = smc._sources.toArray().map(function(s) {\n        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n      });\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping();\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n          destOriginalMappings.push(destMapping);\n        }\n        destGeneratedMappings.push(destMapping);\n      }\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n      return smc;\n    }, \"SourceMapConsumer_fromSourceMap\");\n    BasicSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(BasicSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        return this._absoluteSources.slice();\n      }\n    });\n    function Mapping() {\n      this.generatedLine = 0;\n      this.generatedColumn = 0;\n      this.source = null;\n      this.originalLine = null;\n      this.originalColumn = null;\n      this.name = null;\n    }\n    __name(Mapping, \"Mapping\");\n    BasicSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end2, value;\n      while (index < length) {\n        if (aStr.charAt(index) === \";\") {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        } else if (aStr.charAt(index) === \",\") {\n          index++;\n        } else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n          for (end2 = index; end2 < length; end2++) {\n            if (this._charIsMappingSeparator(aStr, end2)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end2);\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end2) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n            if (segment.length === 2) {\n              throw new Error(\"Found a source, but no line and column\");\n            }\n            if (segment.length === 3) {\n              throw new Error(\"Found a source and line, but no column\");\n            }\n            cachedSegments[str] = segment;\n          }\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n          if (segment.length > 1) {\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            mapping.originalLine += 1;\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n            if (segment.length > 4) {\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === \"number\") {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    }, \"SourceMapConsumer_parseMappings\");\n    BasicSourceMapConsumer.prototype._findMapping = /* @__PURE__ */ __name(function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }, \"SourceMapConsumer_findMapping\");\n    BasicSourceMapConsumer.prototype.computeColumnSpans = /* @__PURE__ */ __name(function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    }, \"SourceMapConsumer_computeColumnSpans\");\n    BasicSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n          var name = util.getArg(mapping, \"name\", null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }, \"SourceMapConsumer_originalPositionFor\");\n    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {\n        return sc == null;\n      });\n    }, \"BasicSourceMapConsumer_hasContentsOfAllSources\");\n    BasicSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n      var index = this._findSourceIndex(aSource);\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n      var relativeSource = aSource;\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n      var url;\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n      }\n    }, \"SourceMapConsumer_sourceContentFor\");\n    BasicSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, \"bias\", SourceMapConsumer3.GREATEST_LOWER_BOUND)\n      );\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn: util.getArg(mapping, \"lastGeneratedColumn\", null)\n          };\n        }\n      }\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }, \"SourceMapConsumer_generatedPositionFor\");\n    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n      var sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n      if (version != this._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      this._sources = new ArraySet();\n      this._names = new ArraySet();\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      this._sections = sections.map(function(s) {\n        if (s.url) {\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        return {\n          generatedOffset: {\n            // The offset fields are 0-based, but we use 1-based indices when\n            // encoding/decoding from VLQ.\n            generatedLine: offsetLine + 1,\n            generatedColumn: offsetColumn + 1\n          },\n          consumer: new SourceMapConsumer3(util.getArg(s, \"map\"), aSourceMapURL)\n        };\n      });\n    }\n    __name(IndexedSourceMapConsumer, \"IndexedSourceMapConsumer\");\n    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer3.prototype);\n    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer3;\n    IndexedSourceMapConsumer.prototype._version = 3;\n    Object.defineProperty(IndexedSourceMapConsumer.prototype, \"sources\", {\n      get: function() {\n        var sources = [];\n        for (var i = 0; i < this._sections.length; i++) {\n          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n            sources.push(this._sections[i].consumer.sources[j]);\n          }\n        }\n        return sources;\n      }\n    });\n    IndexedSourceMapConsumer.prototype.originalPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n      var sectionIndex = binarySearch.search(\n        needle,\n        this._sections,\n        function(needle2, section2) {\n          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n          return needle2.generatedColumn - section2.generatedOffset.generatedColumn;\n        }\n      );\n      var section = this._sections[sectionIndex];\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }, \"IndexedSourceMapConsumer_originalPositionFor\");\n    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function(s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }, \"IndexedSourceMapConsumer_hasContentsOfAllSources\");\n    IndexedSourceMapConsumer.prototype.sourceContentFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      } else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    }, \"IndexedSourceMapConsumer_sourceContentFor\");\n    IndexedSourceMapConsumer.prototype.generatedPositionFor = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n      return {\n        line: null,\n        column: null\n      };\n    }, \"IndexedSourceMapConsumer_generatedPositionFor\");\n    IndexedSourceMapConsumer.prototype._parseMappings = /* @__PURE__ */ __name(function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j];\n          var source = section.consumer._sources.at(mapping.source);\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n          var name = null;\n          if (mapping.name) {\n            name = section.consumer._names.at(mapping.name);\n            this._names.add(name);\n            name = this._names.indexOf(name);\n          }\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        }\n      }\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    }, \"IndexedSourceMapConsumer_parseMappings\");\n    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n  }\n});\n\n// node_modules/source-map/lib/source-node.js\nvar require_source_node = __commonJS({\n  \"node_modules/source-map/lib/source-node.js\"(exports) {\n    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    var util = require_util();\n    var REGEX_NEWLINE = /(\\r?\\n)/;\n    var NEWLINE_CODE = 10;\n    var isSourceNode = \"$$$isSourceNode$$$\";\n    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n      this.children = [];\n      this.sourceContents = {};\n      this.line = aLine == null ? null : aLine;\n      this.column = aColumn == null ? null : aColumn;\n      this.source = aSource == null ? null : aSource;\n      this.name = aName == null ? null : aName;\n      this[isSourceNode] = true;\n      if (aChunks != null)\n        this.add(aChunks);\n    }\n    __name(SourceNode, \"SourceNode\");\n    SourceNode.fromStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      var node = new SourceNode();\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n      var shiftNextLine = /* @__PURE__ */ __name(function() {\n        var lineContents = getNextLine();\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;\n        }\n        __name(getNextLine, \"getNextLine\");\n      }, \"shiftNextLine\");\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n      var lastMapping = null;\n      aSourceMapConsumer.eachMapping(function(mapping) {\n        if (lastMapping !== null) {\n          if (lastGeneratedLine < mapping.generatedLine) {\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n          } else {\n            var nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            lastMapping = mapping;\n            return;\n          }\n        }\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      }\n      aSourceMapConsumer.sources.forEach(function(sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === void 0) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(\n            mapping.originalLine,\n            mapping.originalColumn,\n            source,\n            code,\n            mapping.name\n          ));\n        }\n      }\n      __name(addMappingWithCode, \"addMappingWithCode\");\n    }, \"SourceNode_fromStringWithSourceMap\");\n    SourceNode.prototype.add = /* @__PURE__ */ __name(function SourceNode_add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function(chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_add\");\n    SourceNode.prototype.prepend = /* @__PURE__ */ __name(function SourceNode_prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\n          \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n        );\n      }\n      return this;\n    }, \"SourceNode_prepend\");\n    SourceNode.prototype.walk = /* @__PURE__ */ __name(function SourceNode_walk(aFn) {\n      var chunk;\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else {\n          if (chunk !== \"\") {\n            aFn(chunk, {\n              source: this.source,\n              line: this.line,\n              column: this.column,\n              name: this.name\n            });\n          }\n        }\n      }\n    }, \"SourceNode_walk\");\n    SourceNode.prototype.join = /* @__PURE__ */ __name(function SourceNode_join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n      if (len > 0) {\n        newChildren = [];\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n      return this;\n    }, \"SourceNode_join\");\n    SourceNode.prototype.replaceRight = /* @__PURE__ */ __name(function SourceNode_replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n      return this;\n    }, \"SourceNode_replaceRight\");\n    SourceNode.prototype.setSourceContent = /* @__PURE__ */ __name(function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }, \"SourceNode_setSourceContent\");\n    SourceNode.prototype.walkSourceContents = /* @__PURE__ */ __name(function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    }, \"SourceNode_walkSourceContents\");\n    SourceNode.prototype.toString = /* @__PURE__ */ __name(function SourceNode_toString() {\n      var str = \"\";\n      this.walk(function(chunk) {\n        str += chunk;\n      });\n      return str;\n    }, \"SourceNode_toString\");\n    SourceNode.prototype.toStringWithSourceMap = /* @__PURE__ */ __name(function SourceNode_toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function(chunk, original) {\n        generated.code += chunk;\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0;\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function(sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return { code: generated.code, map };\n    }, \"SourceNode_toStringWithSourceMap\");\n    exports.SourceNode = SourceNode;\n  }\n});\n\n// node_modules/source-map/source-map.js\nvar require_source_map = __commonJS({\n  \"node_modules/source-map/source-map.js\"(exports) {\n    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;\n    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;\n    exports.SourceNode = require_source_node().SourceNode;\n  }\n});\n\n// src/Concerns/RayScreenColors.ts\nvar RayScreenColors = class {\n  /* istanbul ignore next */\n  screenColor(color) {\n    return this;\n  }\n  screenGreen() {\n    return this.screenColor(\"green\");\n  }\n  screenOrange() {\n    return this.screenColor(\"orange\");\n  }\n  screenRed() {\n    return this.screenColor(\"red\");\n  }\n  screenPurple() {\n    return this.screenColor(\"purple\");\n  }\n  screenBlue() {\n    return this.screenColor(\"blue\");\n  }\n  screenGray() {\n    return this.screenColor(\"gray\");\n  }\n};\n__name(RayScreenColors, \"RayScreenColors\");\n\n// src/lib/stackframe.ts\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n__name(_capitalize, \"_capitalize\");\nfunction _getter(t, p) {\n  return t[p];\n}\n__name(_getter, \"_getter\");\nvar booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\nvar numericProps = [\"columnNumber\", \"lineNumber\"];\nvar stringProps = [\"fileName\", \"functionName\", \"source\"];\nvar arrayProps = [\"args\"];\nvar objectProps = [\"evalOrigin\"];\nvar props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\nvar StackFrame = class {\n  constructor(obj) {\n    this.args = [];\n    this.evalOrigin = {};\n    this.fileName = \"\";\n    this.functionName = \"\";\n    this.isConstructor = false;\n    this.isEval = false;\n    this.isNative = false;\n    this.isToplevel = false;\n    this.lineNumber = 0;\n    this.source = \"\";\n    this.columnNumber = 0;\n    if (!obj)\n      return;\n    for (let i = 0; i < props.length; i++) {\n      if (obj[props[i]] !== void 0) {\n        const fn = StackFrame.prototype[\"set\" + _capitalize(props[i])];\n        if (typeof fn === \"function\") {\n          fn.call(this, obj[props[i]]);\n        }\n      }\n    }\n  }\n  getArgs() {\n    return this.args;\n  }\n  setArgs(v) {\n    if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n      throw new TypeError(\"Args must be an Array\");\n    }\n    this.args = v;\n  }\n  getEvalOrigin() {\n    return this.evalOrigin;\n  }\n  setEvalOrigin(v) {\n    if (v instanceof StackFrame) {\n      this.evalOrigin = v;\n    } else if (v instanceof Object) {\n      this.evalOrigin = new StackFrame(v);\n    } else {\n      throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n    }\n  }\n  toString() {\n    const fileName = this.getFileName() || \"\";\n    const lineNumber = this.getLineNumber() || \"\";\n    const columnNumber = this.getColumnNumber() || \"\";\n    const functionName = this.getFunctionName() || \"\";\n    if (this.getIsEval()) {\n      if (fileName) {\n        return \"[eval] (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n      }\n      return \"[eval]:\" + lineNumber + \":\" + columnNumber;\n    }\n    if (functionName) {\n      return functionName + \" (\" + fileName + \":\" + lineNumber + \":\" + columnNumber + \")\";\n    }\n    return fileName + \":\" + lineNumber + \":\" + columnNumber;\n  }\n  getFileName() {\n    return this.fileName;\n  }\n  getLineNumber() {\n    return _getter(this, \"lineNumber\");\n  }\n  getColumnNumber() {\n    return _getter(this, \"columnNumber\");\n  }\n  getFunctionName() {\n    return _getter(this, \"functionName\");\n  }\n  getIsEval() {\n    return _getter(this, \"isEval\");\n  }\n  fromString(str) {\n    const argsStartIndex = str.indexOf(\"(\");\n    const argsEndIndex = str.lastIndexOf(\")\");\n    const functionName = str.substring(0, argsStartIndex);\n    const args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n    const locationString = str.substring(argsEndIndex + 1);\n    let fileName = \"\", lineNumber = \"\", columnNumber = \"\";\n    if (locationString.indexOf(\"@\") === 0) {\n      const parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString) || [];\n      fileName = parts[1];\n      lineNumber = parts[2];\n      columnNumber = parts[3];\n    }\n    return new StackFrame({\n      functionName,\n      args: args || void 0,\n      fileName,\n      lineNumber: lineNumber || void 0,\n      columnNumber: columnNumber || void 0\n    });\n  }\n};\n__name(StackFrame, \"StackFrame\");\nvar stackframe_default = StackFrame;\n\n// src/lib/ErrorStackParser.ts\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = class {\n  static parse(error) {\n    if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error(\"Cannot parse given Error object\");\n    }\n  }\n  static extractLocation(urlLike) {\n    if (urlLike.indexOf(\":\") === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, \"\"));\n    if (!parts) {\n      return [urlLike];\n    }\n    return [parts[1], parts[2] || void 0, parts[3] || void 0];\n  }\n  static parseV8OrIE(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(CHROME_IE_STACK_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\"(eval \") > -1) {\n        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(,.*$)/g, \"\");\n      }\n      let sanitizedLine = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").replace(/^.*?\\s+/, \"\");\n      const location = sanitizedLine.match(/ (\\(.+\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], \"\") : sanitizedLine;\n      const locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n      const functionName = location && sanitizedLine || void 0;\n      const fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];\n      return new stackframe_default({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n  static parseFFOrSafari(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !line.match(SAFARI_NATIVE_CODE_REGEXP));\n    return filtered.map((line) => {\n      if (line.indexOf(\" > eval\") > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\");\n      }\n      if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n        return new stackframe_default({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : void 0;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n        return new stackframe_default({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2],\n          source: line\n        });\n      }\n    });\n  }\n  static parseOpera(error) {\n    if (!error.stacktrace || error.message.indexOf(\"\\n\") > -1 && error.message.split(\"\\n\").length > error.stacktrace.split(\"\\n\").length) {\n      return this.parseOpera9(error);\n    } else if (!error.stack) {\n      return this.parseOpera10(error);\n    } else {\n      return this.parseOpera11(error);\n    }\n  }\n  static parseOpera9(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split(\"\\n\");\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera10(e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split(\"\\n\");\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(\n          new stackframe_default({\n            functionName: match[3] || void 0,\n            fileName: match[2],\n            lineNumber: match[1],\n            source: lines[i]\n          })\n        );\n      }\n    }\n    return result;\n  }\n  static parseOpera11(error) {\n    const filtered = error.stack.split(\"\\n\").filter((line) => !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/));\n    return filtered.map((line) => {\n      const tokens = line.split(\"@\");\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || \"\";\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0;\n      const argsRaw = functionCall.match(/\\(([^)]*)\\)/) ? functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : void 0;\n      const args = argsRaw === void 0 || argsRaw === \"[arguments not available]\" ? void 0 : argsRaw.split(\",\");\n      return new stackframe_default({\n        functionName,\n        args,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2],\n        source: line\n      });\n    });\n  }\n};\n__name(ErrorStackParser, \"ErrorStackParser\");\nvar ErrorStackParser_default = ErrorStackParser;\n\n// src/lib/StackGenerator.ts\nvar StackGenerator = {\n  backtrace: /* @__PURE__ */ __name(function StackGenerator$$backtrace(opts) {\n    const stack = [];\n    let maxStackSize = 10;\n    if (typeof opts === \"object\" && typeof opts.maxStackSize === \"number\") {\n      maxStackSize = opts.maxStackSize;\n    }\n    let curr = arguments.callee;\n    while (curr && stack.length < maxStackSize && curr[\"arguments\"]) {\n      const args = new Array(curr[\"arguments\"].length);\n      for (let i = 0; i < args.length; ++i) {\n        args[i] = curr[\"arguments\"][i];\n      }\n      if (/function(?:\\s+([\\w$]+))+\\s*\\(/.test(curr.toString())) {\n        stack.push(new stackframe_default({ functionName: RegExp.$1 || void 0, args }));\n      } else {\n        stack.push(new stackframe_default({ args }));\n      }\n      try {\n        curr = curr.caller;\n      } catch (e) {\n        break;\n      }\n    }\n    return stack;\n  }, \"StackGenerator$$backtrace\")\n};\nvar StackGenerator_default = StackGenerator;\n\n// src/lib/StackTraceGps.ts\nvar SourceMapConsumer = __toESM(require_source_map());\nfunction _xdr(url) {\n  return globalThis.axios.get(url).then((response) => {\n    if (response.status >= 200 && response.status < 300 || url.substr(0, 7) === \"file://\" && response.data) {\n      return response.data;\n    } else {\n      throw new Error(\"HTTP status: \" + response.status + \" retrieving \" + url);\n    }\n  }).catch((error) => {\n    throw new Error(\"Error retrieving \" + url + \": \" + error.message);\n  });\n}\n__name(_xdr, \"_xdr\");\nfunction getWindow() {\n  return globalThis;\n}\n__name(getWindow, \"getWindow\");\nfunction _atob(b64str) {\n  var _a, _b;\n  if (typeof getWindow() !== \"undefined\" && ((_a = getWindow()) == null ? void 0 : _a.atob)) {\n    return (_b = getWindow()) == null ? void 0 : _b.atob(b64str);\n  } else {\n    throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n  }\n}\n__name(_atob, \"_atob\");\nfunction _parseJson(string) {\n  if (typeof JSON !== \"undefined\" && JSON.parse) {\n    return JSON.parse(string);\n  } else {\n    throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n  }\n}\n__name(_parseJson, \"_parseJson\");\nfunction _findFunctionName(source, lineNumber) {\n  const syntaxes = [\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/,\n    /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/,\n    /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?([^('\"`\\s]+?)\\s*\\([^)]*\\)\\s*\\{/,\n    /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/\n  ];\n  const lines = source.split(\"\\n\");\n  let code = \"\";\n  const maxLines = Math.min(lineNumber, 20);\n  for (let i = 0; i < maxLines; ++i) {\n    const line = lines[lineNumber - i - 1];\n    const commentPos = line.indexOf(\"//\");\n    if (commentPos >= 0) {\n      code = line.substr(0, commentPos);\n    } else {\n      code = line + code;\n    }\n    for (let j = 0; j < syntaxes.length; j++) {\n      const m = syntaxes[j].exec(code);\n      if (m && m[1]) {\n        return m[1];\n      }\n    }\n  }\n  return void 0;\n}\n__name(_findFunctionName, \"_findFunctionName\");\nfunction _ensureSupportedEnvironment() {\n  if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n    throw new Error(\"Unable to consume source maps in older browsers\");\n  }\n}\n__name(_ensureSupportedEnvironment, \"_ensureSupportedEnvironment\");\nfunction _ensureStackFrameIsLegit(stackframe) {\n  if (typeof stackframe !== \"object\") {\n    throw new TypeError(\"Given StackFrame is not an object\");\n  } else if (typeof stackframe.fileName !== \"string\") {\n    throw new TypeError(\"Given file name is not a String\");\n  } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n    throw new TypeError(\"Given line number must be a positive integer\");\n  } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n    throw new TypeError(\"Given column number must be a non-negative integer\");\n  }\n  return true;\n}\n__name(_ensureStackFrameIsLegit, \"_ensureStackFrameIsLegit\");\nfunction _findSourceMappingURL(source) {\n  const sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n  let lastSourceMappingUrl;\n  let matchSourceMappingUrl;\n  while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n    lastSourceMappingUrl = matchSourceMappingUrl[1];\n  }\n  if (lastSourceMappingUrl) {\n    return lastSourceMappingUrl;\n  } else {\n    throw new Error(\"sourceMappingURL not found\");\n  }\n}\n__name(_findSourceMappingURL, \"_findSourceMappingURL\");\nfunction _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n  return new Promise((resolve, reject) => {\n    const loc = sourceMapConsumer.originalPositionFor({\n      line: stackframe.lineNumber || 0,\n      column: stackframe.columnNumber || 0\n    });\n    if (loc.source) {\n      const mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n      if (mappedSource) {\n        sourceCache[loc.source] = mappedSource;\n      }\n      resolve(\n        new stackframe_default({\n          functionName: loc.name || stackframe.functionName,\n          args: stackframe.args,\n          fileName: loc.source,\n          lineNumber: loc.line,\n          columnNumber: loc.column\n        })\n      );\n    } else {\n      reject(new Error(\"Could not get original source for given stackframe and source map\"));\n    }\n  });\n}\n__name(_extractLocationInfoFromSourceMapSource, \"_extractLocationInfoFromSourceMapSource\");\nvar StackTraceGPS = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.opts = opts || {};\n    this.sourceCache = this.opts.sourceCache || {};\n    this.sourceMapConsumerCache = this.opts.sourceMapConsumerCache || {};\n    this.ajax = this.opts.ajax || _xdr;\n    this._atob = this.opts.atob || _atob;\n  }\n  _get(location) {\n    return new Promise((resolve, reject) => {\n      const isDataUrl = location.substr(0, 5) === \"data:\";\n      if (this.sourceCache[location]) {\n        resolve(this.sourceCache[location]);\n      } else if (isDataUrl) {\n        const supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n        const match = location.match(supportedEncodingRegexp);\n        if (match) {\n          const sourceMapStart = match[0].length;\n          const encodedSource = location.substr(sourceMapStart);\n          const source = this._atob(encodedSource);\n          this.sourceCache[location] = source;\n          resolve(source);\n        } else {\n          reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n        }\n      } else {\n        if (this.opts.offline && !isDataUrl) {\n          reject(new Error(\"Cannot make network requests in offline mode\"));\n        } else {\n          const xhrPromise = this.ajax(location);\n          xhrPromise.then((s) => {\n            this.sourceCache[location] = s;\n            resolve(s);\n          }, reject);\n          xhrPromise.then(resolve, reject);\n        }\n      }\n    });\n  }\n  _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n    return new Promise((resolve) => {\n      if (this.sourceMapConsumerCache[sourceMappingURL]) {\n        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n      } else {\n        const sourceMapConsumerPromise = new Promise((resolve2, reject) => {\n          this._get(sourceMappingURL).then((sourceMapSource) => {\n            if (typeof sourceMapSource === \"string\") {\n              sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n            }\n            if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n              sourceMapSource.sourceRoot = defaultSourceRoot;\n            }\n            resolve2(new SourceMapConsumer.SourceMapConsumer(sourceMapSource));\n          }).catch(reject);\n        });\n        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n        resolve(sourceMapConsumerPromise);\n      }\n    });\n  }\n  pinpoint(stackframe) {\n    return new Promise((resolve, reject) => {\n      this.getMappedLocation(stackframe).then((mappedStackFrame) => {\n        this.findFunctionName(mappedStackFrame).then(resolve).catch(() => resolve(mappedStackFrame));\n      }, reject);\n    });\n  }\n  findFunctionName(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureStackFrameIsLegit(stackframe);\n      this._get(stackframe.fileName || \"\").then((source) => {\n        const lineNumber = stackframe.lineNumber;\n        const guessedFunctionName = _findFunctionName(source, lineNumber);\n        if (guessedFunctionName) {\n          resolve(\n            new stackframe_default({\n              functionName: guessedFunctionName,\n              args: stackframe.args,\n              fileName: stackframe.fileName,\n              lineNumber,\n              columnNumber: stackframe.columnNumber\n            })\n          );\n        } else {\n          resolve(stackframe);\n        }\n      }, reject).catch(reject);\n    });\n  }\n  getMappedLocation(stackframe) {\n    return new Promise((resolve, reject) => {\n      _ensureSupportedEnvironment();\n      _ensureStackFrameIsLegit(stackframe);\n      const sourceCache = this.sourceCache;\n      const fileName = stackframe.fileName || \"\";\n      this._get(fileName).then((source) => {\n        let sourceMappingURL = _findSourceMappingURL(source);\n        const isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n        const defaultSourceRoot = fileName == null ? void 0 : fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n          sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n        }\n        this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then((sourceMapConsumer) => {\n          _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve).catch(() => resolve(stackframe));\n        }).catch(reject);\n      }, reject).catch(reject);\n    });\n  }\n};\n__name(StackTraceGPS, \"StackTraceGPS\");\nvar StackTraceGps_default = StackTraceGPS;\n\n// src/lib/stacktrace.ts\nvar _options = {\n  filter: function(stackframe) {\n    return (stackframe.functionName || \"\").indexOf(\"StackTrace$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"ErrorStackParser$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackTraceGPS$$\") === -1 && (stackframe.functionName || \"\").indexOf(\"StackGenerator$$\") === -1;\n  },\n  sourceCache: {}\n};\nfunction _generateError() {\n  try {\n    throw new Error();\n  } catch (err) {\n    return err;\n  }\n}\n__name(_generateError, \"_generateError\");\nfunction _merge(first, second) {\n  const target = {};\n  for (const obj of [first, second]) {\n    for (const prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        target[prop] = obj[prop];\n      }\n    }\n  }\n  return target;\n}\n__name(_merge, \"_merge\");\nfunction _isShapedLikeParsableError(err) {\n  return err.stack || err[\"opera#sourceloc\"];\n}\n__name(_isShapedLikeParsableError, \"_isShapedLikeParsableError\");\nfunction _filtered(stackframes, filter) {\n  if (typeof filter === \"function\") {\n    return stackframes.filter(filter);\n  }\n  return stackframes;\n}\n__name(_filtered, \"_filtered\");\nvar StackTrace = {\n  StackFrame: typeof stackframe_default,\n  get: /* @__PURE__ */ __name(function StackTrace$$get(opts) {\n    const err = _generateError();\n    return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n  }, \"StackTrace$$get\"),\n  getSync: /* @__PURE__ */ __name(function StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    const err = _generateError();\n    const stack = _isShapedLikeParsableError(err) ? ErrorStackParser_default.parse(err) : StackGenerator_default.backtrace(opts);\n    return _filtered(stack, opts.filter);\n  }, \"StackTrace$$getSync\"),\n  fromError: /* @__PURE__ */ __name(function StackTrace$$fromError(error, opts) {\n    opts = _merge(_options, opts);\n    const gps = new StackTraceGps_default(opts);\n    return new Promise(\n      function(resolve) {\n        const stackframes = _filtered(ErrorStackParser_default.parse(error), opts.filter);\n        resolve(\n          Promise.all(\n            stackframes.map(function(sf) {\n              return new Promise(function(resolve2) {\n                function resolveOriginal() {\n                  resolve2(sf);\n                }\n                __name(resolveOriginal, \"resolveOriginal\");\n                gps.pinpoint(sf).then(resolve2, resolveOriginal)[\"catch\"](resolveOriginal);\n              });\n            })\n          )\n        );\n      }.bind(this)\n    );\n  }, \"StackTrace$$fromError\"),\n  generateArtificially: /* @__PURE__ */ __name(function StackTrace$$generateArtificially(opts) {\n    opts = _merge(_options, opts);\n    let stackFrames = StackGenerator_default.backtrace(opts);\n    if (typeof opts.filter === \"function\") {\n      stackFrames = stackFrames.filter(opts.filter);\n    }\n    return Promise.resolve(stackFrames);\n  }, \"StackTrace$$generateArtificially\")\n};\nvar stacktrace_default = StackTrace;\n\n// node_modules/ts-mixer/dist/esm/index.js\nvar copyProps = /* @__PURE__ */ __name((dest, src, exclude = []) => {\n  const props2 = Object.getOwnPropertyDescriptors(src);\n  for (let prop of exclude)\n    delete props2[prop];\n  Object.defineProperties(dest, props2);\n}, \"copyProps\");\nvar protoChain = /* @__PURE__ */ __name((obj, currentChain = [obj]) => {\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null)\n    return currentChain;\n  return protoChain(proto, [...currentChain, proto]);\n}, \"protoChain\");\nvar nearestCommonProto = /* @__PURE__ */ __name((...objs) => {\n  if (objs.length === 0)\n    return void 0;\n  let commonProto = void 0;\n  const protoChains = objs.map((obj) => protoChain(obj));\n  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {\n    const protos = protoChains.map((protoChain2) => protoChain2.pop());\n    const potentialCommonProto = protos[0];\n    if (protos.every((proto) => proto === potentialCommonProto))\n      commonProto = potentialCommonProto;\n    else\n      break;\n  }\n  return commonProto;\n}, \"nearestCommonProto\");\nvar hardMixProtos = /* @__PURE__ */ __name((ingredients, constructor, exclude = []) => {\n  var _a;\n  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n  const mixedProto = Object.create(base);\n  const visitedProtos = protoChain(base);\n  for (let prototype of ingredients) {\n    let protos = protoChain(prototype);\n    for (let i = protos.length - 1; i >= 0; i--) {\n      let newProto = protos[i];\n      if (visitedProtos.indexOf(newProto) === -1) {\n        copyProps(mixedProto, newProto, [\"constructor\", ...exclude]);\n        visitedProtos.push(newProto);\n      }\n    }\n  }\n  mixedProto.constructor = constructor;\n  return mixedProto;\n}, \"hardMixProtos\");\nvar unique = /* @__PURE__ */ __name((arr) => arr.filter((e, i) => arr.indexOf(e) == i), \"unique\");\nvar getIngredientWithProp = /* @__PURE__ */ __name((prop, ingredients) => {\n  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));\n  let protoDepth = 0;\n  let protosAreLeftToSearch = true;\n  while (protosAreLeftToSearch) {\n    protosAreLeftToSearch = false;\n    for (let i = ingredients.length - 1; i >= 0; i--) {\n      const searchTarget = protoChains[i][protoDepth];\n      if (searchTarget !== void 0 && searchTarget !== null) {\n        protosAreLeftToSearch = true;\n        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {\n          return protoChains[i][0];\n        }\n      }\n    }\n    protoDepth++;\n  }\n  return void 0;\n}, \"getIngredientWithProp\");\nvar proxyMix = /* @__PURE__ */ __name((ingredients, prototype = Object.prototype) => new Proxy({}, {\n  getPrototypeOf() {\n    return prototype;\n  },\n  setPrototypeOf() {\n    throw Error(\"Cannot set prototype of Proxies created by ts-mixer\");\n  },\n  getOwnPropertyDescriptor(_, prop) {\n    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);\n  },\n  defineProperty() {\n    throw new Error(\"Cannot define new properties on Proxies created by ts-mixer\");\n  },\n  has(_, prop) {\n    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;\n  },\n  get(_, prop) {\n    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];\n  },\n  set(_, prop, val) {\n    const ingredientWithProp = getIngredientWithProp(prop, ingredients);\n    if (ingredientWithProp === void 0)\n      throw new Error(\"Cannot set new properties on Proxies created by ts-mixer\");\n    ingredientWithProp[prop] = val;\n    return true;\n  },\n  deleteProperty() {\n    throw new Error(\"Cannot delete properties on Proxies created by ts-mixer\");\n  },\n  ownKeys() {\n    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));\n  }\n}), \"proxyMix\");\nvar softMixProtos = /* @__PURE__ */ __name((ingredients, constructor) => proxyMix([...ingredients, { constructor }]), \"softMixProtos\");\nvar settings = {\n  initFunction: null,\n  staticsStrategy: \"copy\",\n  prototypeStrategy: \"copy\",\n  decoratorInheritance: \"deep\"\n};\nvar mixins = /* @__PURE__ */ new Map();\nvar getMixinsForClass = /* @__PURE__ */ __name((clazz) => mixins.get(clazz), \"getMixinsForClass\");\nvar registerMixins = /* @__PURE__ */ __name((mixedClass, constituents) => mixins.set(mixedClass, constituents), \"registerMixins\");\nvar hasMixin = /* @__PURE__ */ __name((instance, mixin) => {\n  if (instance instanceof mixin)\n    return true;\n  const constructor = instance.constructor;\n  const visited = /* @__PURE__ */ new Set();\n  let frontier = /* @__PURE__ */ new Set();\n  frontier.add(constructor);\n  while (frontier.size > 0) {\n    if (frontier.has(mixin))\n      return true;\n    frontier.forEach((item) => visited.add(item));\n    const newFrontier = /* @__PURE__ */ new Set();\n    frontier.forEach((item) => {\n      var _a;\n      const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : protoChain(item.prototype).map((proto) => proto.constructor).filter((item2) => item2 !== null);\n      if (itemConstituents)\n        itemConstituents.forEach((constituent) => {\n          if (!visited.has(constituent) && !frontier.has(constituent))\n            newFrontier.add(constituent);\n        });\n    });\n    frontier = newFrontier;\n  }\n  return false;\n}, \"hasMixin\");\nvar mergeObjectsOfDecorators = /* @__PURE__ */ __name((o1, o2) => {\n  var _a, _b;\n  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n  const mergedObject = {};\n  for (let key of allKeys)\n    mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);\n  return mergedObject;\n}, \"mergeObjectsOfDecorators\");\nvar mergePropertyAndMethodDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d;\n  return {\n    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})\n  };\n}, \"mergePropertyAndMethodDecorators\");\nvar mergeDecorators = /* @__PURE__ */ __name((d1, d2) => {\n  var _a, _b, _c, _d, _e, _f;\n  return {\n    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})\n  };\n}, \"mergeDecorators\");\nvar decorators = /* @__PURE__ */ new Map();\nvar findAllConstituentClasses = /* @__PURE__ */ __name((...classes) => {\n  var _a;\n  const allClasses = /* @__PURE__ */ new Set();\n  const frontier = /* @__PURE__ */ new Set([...classes]);\n  while (frontier.size > 0) {\n    for (let clazz of frontier) {\n      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);\n      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];\n      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));\n      for (let newClass of newClasses)\n        frontier.add(newClass);\n      allClasses.add(clazz);\n      frontier.delete(clazz);\n    }\n  }\n  return [...allClasses];\n}, \"findAllConstituentClasses\");\nvar deepDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);\n  if (decoratorsForClassChain.length == 0)\n    return {};\n  if (decoratorsForClassChain.length == 1)\n    return decoratorsForClassChain[0];\n  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"deepDecoratorSearch\");\nvar directDecoratorSearch = /* @__PURE__ */ __name((...classes) => {\n  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));\n  if (classDecorators.length === 0)\n    return {};\n  if (classDecorators.length === 1)\n    return classDecorators[0];\n  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n}, \"directDecoratorSearch\");\nvar getDecoratorsForClass = /* @__PURE__ */ __name((clazz) => {\n  let decoratorsForClass = decorators.get(clazz);\n  if (!decoratorsForClass) {\n    decoratorsForClass = {};\n    decorators.set(clazz, decoratorsForClass);\n  }\n  return decoratorsForClass;\n}, \"getDecoratorsForClass\");\nvar decorateClass = /* @__PURE__ */ __name((decorator) => (clazz) => {\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  let classDecorators = decoratorsForClass.class;\n  if (!classDecorators) {\n    classDecorators = [];\n    decoratorsForClass.class = classDecorators;\n  }\n  classDecorators.push(decorator);\n  return decorator(clazz);\n}, \"decorateClass\");\nvar decorateMember = /* @__PURE__ */ __name((decorator) => (object, key, ...otherArgs) => {\n  var _a, _b, _c;\n  const decoratorTargetType = typeof object === \"function\" ? \"static\" : \"instance\";\n  const decoratorType = typeof object[key] === \"function\" ? \"method\" : \"property\";\n  const clazz = decoratorTargetType === \"static\" ? object : object.constructor;\n  const decoratorsForClass = getDecoratorsForClass(clazz);\n  const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n  decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n  let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n  decoratorsForTargetType[decoratorType] = decoratorsForType;\n  let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n  decoratorsForType[key] = decoratorsForKey;\n  decoratorsForKey.push(decorator);\n  return decorator(object, key, ...otherArgs);\n}, \"decorateMember\");\nvar decorate = /* @__PURE__ */ __name((decorator) => (...args) => {\n  if (args.length === 1)\n    return decorateClass(decorator)(args[0]);\n  return decorateMember(decorator)(...args);\n}, \"decorate\");\nfunction Mixin(...constructors) {\n  var _a, _b, _c;\n  const prototypes = constructors.map((constructor) => constructor.prototype);\n  const initFunctionName = settings.initFunction;\n  if (initFunctionName !== null) {\n    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === \"function\");\n    const combinedInitFunction = /* @__PURE__ */ __name(function(...args) {\n      for (let initFunction of initFunctions)\n        initFunction.apply(this, args);\n    }, \"combinedInitFunction\");\n    const extraProto = { [initFunctionName]: combinedInitFunction };\n    prototypes.push(extraProto);\n  }\n  function MixedClass(...args) {\n    for (const constructor of constructors)\n      copyProps(this, new constructor(...args));\n    if (initFunctionName !== null && typeof this[initFunctionName] === \"function\")\n      this[initFunctionName].apply(this, args);\n  }\n  __name(MixedClass, \"MixedClass\");\n  MixedClass.prototype = settings.prototypeStrategy === \"copy\" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);\n  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === \"copy\" ? hardMixProtos(constructors, null, [\"prototype\"]) : proxyMix(constructors, Function.prototype));\n  let DecoratedMixedClass = MixedClass;\n  if (settings.decoratorInheritance !== \"none\") {\n    const classDecorators = settings.decoratorInheritance === \"deep\" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);\n    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n      const result = decorator(DecoratedMixedClass);\n      if (result) {\n        DecoratedMixedClass = result;\n      }\n    }\n    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n  }\n  registerMixins(DecoratedMixedClass, constructors);\n  return DecoratedMixedClass;\n}\n__name(Mixin, \"Mixin\");\nvar applyPropAndMethodDecorators = /* @__PURE__ */ __name((propAndMethodDecorators, target) => {\n  const propDecorators = propAndMethodDecorators.property;\n  const methodDecorators = propAndMethodDecorators.method;\n  if (propDecorators)\n    for (let key in propDecorators)\n      for (let decorator of propDecorators[key])\n        decorator(target, key);\n  if (methodDecorators)\n    for (let key in methodDecorators)\n      for (let decorator of methodDecorators[key])\n        decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n}, \"applyPropAndMethodDecorators\");\nvar mix = /* @__PURE__ */ __name((...ingredients) => (decoratedClass) => {\n  const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n  Object.defineProperty(mixedClass, \"name\", {\n    value: decoratedClass.name,\n    writable: false\n  });\n  return mixedClass;\n}, \"mix\");\n\n// src/Concerns/RayColors.ts\nvar RayColors = class {\n  /* istanbul ignore next */\n  color(name) {\n    return this;\n  }\n  green() {\n    return this.color(\"green\");\n  }\n  orange() {\n    return this.color(\"orange\");\n  }\n  red() {\n    return this.color(\"red\");\n  }\n  purple() {\n    return this.color(\"purple\");\n  }\n  blue() {\n    return this.color(\"blue\");\n  }\n  gray() {\n    return this.color(\"gray\");\n  }\n};\n__name(RayColors, \"RayColors\");\n\n// src/Concerns/RaySizes.ts\nvar RaySizes = class {\n  /* istanbul ignore next */\n  size(size) {\n    return this;\n  }\n  small() {\n    return this.size(\"sm\");\n  }\n  large() {\n    return this.size(\"lg\");\n  }\n};\n__name(RaySizes, \"RaySizes\");\n\n// src/Concerns/RemovesRayFrames.ts\nvar RemovesRayFrames = class {\n  static removeRayFrames(frames) {\n    const result = frames.filter((frame) => !RemovesRayFrames.isRayFrame(frame) && !RemovesRayFrames.isNodeFrame(frame)).filter((frame) => {\n      return !(!frame.fileName || !frame.functionName || !frame.source);\n    });\n    return result;\n  }\n  static isRayFrame(frame) {\n    var _a;\n    for (const rayNamespace of this.rayNamespaces()) {\n      if ((_a = frame.fileName) == null ? void 0 : _a.includes(rayNamespace)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static isNodeFrame(frame) {\n    var _a;\n    return ((_a = frame.fileName) == null ? void 0 : _a.indexOf(\"node:\")) === 0;\n  }\n  static rayNamespaces() {\n    return [\"ray-node/dist\", \"node-ray/dist\", \"vue-ray/dist\"];\n  }\n};\n__name(RemovesRayFrames, \"RemovesRayFrames\");\n\n// src/ConsoleInterceptor.ts\nvar consoleLog = console.log.bind({});\nvar consoleWrapper = /* @__PURE__ */ __name((...args) => {\n  if (typeof Ray.client !== \"undefined\" && Ray.client.isRayAvailable()) {\n    Ray.create().send(...args);\n  }\n  consoleLog(...args);\n}, \"consoleWrapper\");\nvar _ConsoleInterceptor = class {\n  enable() {\n    _ConsoleInterceptor.active = true;\n    console.log = consoleWrapper;\n  }\n  disable() {\n    _ConsoleInterceptor.active = false;\n    console.log = consoleLog;\n  }\n  active() {\n    return _ConsoleInterceptor.active;\n  }\n};\nvar ConsoleInterceptor = _ConsoleInterceptor;\n__name(ConsoleInterceptor, \"ConsoleInterceptor\");\nConsoleInterceptor.active = false;\n\n// src/Origin/Hostname.ts\nvar _Hostname = class {\n  static get() {\n    var _a;\n    return (_a = _Hostname.hostname) != null ? _a : \"remote\";\n  }\n  static set(hostname) {\n    _Hostname.hostname = hostname;\n  }\n};\nvar Hostname = _Hostname;\n__name(Hostname, \"Hostname\");\nHostname.hostname = null;\n\n// src/ArgumentConverter.ts\nimport { format } from \"@permafrost-dev/pretty-format\";\nvar prettyFormat = format;\nvar ArgumentConverter = class {\n  static convertToPrimitive(arg) {\n    if (arg === null) {\n      return { value: null, isHtml: false };\n    }\n    if (typeof arg === \"string\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"number\") {\n      return { value: arg, isHtml: false };\n    }\n    if (typeof arg === \"boolean\") {\n      return { value: arg, isHtml: false };\n    }\n    return { value: ArgumentConverter.prettyFormatForHtml(arg), isHtml: true };\n  }\n  static prettyFormatForHtml(arg) {\n    const formatted = prettyFormat(arg, { indent: \"    \" }).replace(/ /g, \"&nbsp;\").replace(/\\r\\n|\\r|\\n/g, \"<br>\").replace(/(\"[^\"]+\")/g, '<code style=\"font-size: 0.8rem!important;\" class=\"bold text-green-600 p-0\">$1</code>').replace(\n      /Array(&nbsp;|\\s)+(\\[[^\\]]+\\])/g,\n      '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-500 p-0\">Array$1$2</code>'\n    ).replace(/^(\\[[^\\]]+\\])$/g, '<code style=\"font-size: 0.8rem!important;\"class=\"text-gray-500 p-0\">$1</code>').replace(/(\\{.+\\})/g, '<code style=\"font-size: 0.8rem!important;\" class=\"text-gray-600 \">$1</code>').replace(\n      /(Array|Object|Function|Circular|Symbol|WeakMap|Map)/g,\n      '<span style=\"font-size: 0.8rem!important;\" class=\"text-yellow-600 bold\">$1</span>'\n    ).replace(/(true|false|null)/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-indigo-600 bold\">$1</span>').replace(/(:&nbsp;|[,[\\]{}])/g, '<span style=\"font-size: 0.8rem!important;\" class=\"text-orange-400 bold\">$1</span>');\n    return `<code style=\"font-size: 0.8rem!important;\">${formatted}</code>`;\n  }\n};\n__name(ArgumentConverter, \"ArgumentConverter\");\n\n// src/Payloads/Payload.ts\nvar Payload = class {\n  constructor() {\n    this.remotePath = null;\n    this.localPath = null;\n    this.initialized = false;\n    this.data = {\n      type: \"\",\n      content: \"\",\n      origin: { function_name: \"\", file: \"\", line_number: 0, hostname: \"remote\" }\n    };\n  }\n  replaceRemotePathWithLocalPath(filePath) {\n    if (this.remotePath === null || this.localPath === null) {\n      return filePath;\n    }\n    const pattern = new RegExp(\"^\" + this.remotePath);\n    return filePath.replace(pattern, this.localPath);\n  }\n  getContent() {\n    return {};\n  }\n  toArray() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.data.type = this.getType();\n      this.data.content = this.getContent();\n      this.data.origin.file = this.replaceRemotePathWithLocalPath(this.data.origin.file);\n    }\n    return this.data;\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Payload, \"Payload\");\n\n// src/Payloads/BoolPayload.ts\nvar BoolPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.value,\n      label: \"Boolean\"\n    };\n  }\n};\n__name(BoolPayload, \"BoolPayload\");\n\n// src/Payloads/HtmlPayload.ts\nvar HtmlPayload = class extends Payload {\n  constructor(html = \"\") {\n    super();\n    this.html = html;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.html,\n      label: \"HTML\"\n    };\n  }\n};\n__name(HtmlPayload, \"HtmlPayload\");\n\n// src/Payloads/LogPayload.ts\nvar LogPayload = class extends Payload {\n  constructor(values) {\n    super();\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n    this.values = values;\n  }\n  static createForArguments(args) {\n    const dumpedArguments = args.map((argument) => {\n      return ArgumentConverter.convertToPrimitive(argument).value;\n    });\n    return new this(dumpedArguments);\n  }\n  getType() {\n    return \"log\";\n  }\n  getContent() {\n    return {\n      values: this.values\n    };\n  }\n};\n__name(LogPayload, \"LogPayload\");\n\n// src/Payloads/NullPayload.ts\nvar NullPayload = class extends Payload {\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: null,\n      label: \"Null\"\n    };\n  }\n};\n__name(NullPayload, \"NullPayload\");\n\n// src/PayloadFactory.ts\nvar PayloadFactory = class {\n  static createForValues(args) {\n    return new this(args).getPayloads();\n  }\n  static registerPayloadFinder(callable) {\n    this.payloadFinder = callable;\n  }\n  constructor(values) {\n    this.values = values;\n  }\n  getPayloads() {\n    return this.values.map((value) => {\n      return this.getPayload(value);\n    });\n  }\n  getPayload(value) {\n    if (typeof value === \"boolean\") {\n      return new BoolPayload(value);\n    }\n    if (value === null) {\n      return new NullPayload();\n    }\n    const convertedResult = ArgumentConverter.convertToPrimitive(value);\n    if (convertedResult.isHtml) {\n      return new HtmlPayload(convertedResult.value);\n    }\n    return new LogPayload(convertedResult.value);\n  }\n};\n__name(PayloadFactory, \"PayloadFactory\");\nPayloadFactory.payloadFinder = null;\n\n// src/Payloads/CallerPayload.ts\nvar CallerPayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  getType() {\n    return \"caller\";\n  }\n  getContent() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const frames = this.frames.slice(0);\n    const frame = frames[0] || null;\n    const funcNameParts = (_c = (_b = (_a = frame == null ? void 0 : frame.getFunctionName()) == null ? void 0 : _a.replace(\"Proxy.\", \"\")) == null ? void 0 : _b.split(\".\")) == null ? void 0 : _c.slice(0);\n    const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n    const methodName = (_d = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _d : \"\";\n    return {\n      frame: {\n        file_name: this.replaceRemotePathWithLocalPath((_e = frame == null ? void 0 : frame.getFileName()) != null ? _e : \"\"),\n        line_number: (frame == null ? void 0 : frame.getLineNumber()) || 0,\n        class: className,\n        method: methodName,\n        vendor_frame: (_g = (_f = frame == null ? void 0 : frame.getFileName()) == null ? void 0 : _f.includes(\"node_modules\")) != null ? _g : false\n      }\n    };\n  }\n};\n__name(CallerPayload, \"CallerPayload\");\n\n// src/Payloads/ClearAllPayload.ts\nvar ClearAllPayload = class extends Payload {\n  getType() {\n    return \"clear_all\";\n  }\n};\n__name(ClearAllPayload, \"ClearAllPayload\");\n\n// src/Payloads/ColorPayload.ts\nvar ColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ColorPayload, \"ColorPayload\");\n\n// src/Payloads/ConfettiPayload.ts\nvar ConfettiPayload = class extends Payload {\n  getType() {\n    return \"confetti\";\n  }\n};\n__name(ConfettiPayload, \"ConfettiPayload\");\n\n// src/Payloads/CreateLockPayload.ts\nvar CreateLockPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"create_lock\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(CreateLockPayload, \"CreateLockPayload\");\n\n// src/Payloads/CustomPayload.ts\nvar CustomPayload = class extends Payload {\n  constructor(content, label = \"\") {\n    super();\n    this.content = content;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.content,\n      label: this.label\n    };\n  }\n};\n__name(CustomPayload, \"CustomPayload\");\n\n// src/Payloads/DatePayload.ts\nimport * as dayjs from \"dayjs\";\nvar DatePayload = class extends Payload {\n  constructor(date, format2 = \"YYYY-MM-DD hh:mm:ss\") {\n    super();\n    this.date = date;\n    this.format = format2;\n  }\n  getType() {\n    return \"carbon\";\n  }\n  getContent() {\n    return {\n      formatted: this.date ? this.getFormatted() : null,\n      timestamp: this.date ? this.getTimestamp() : null,\n      timezone: this.date ? this.getTimezoneName() : null\n    };\n  }\n  getTimestamp() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).unix();\n  }\n  getFormatted() {\n    var _a;\n    return dayjs.default((_a = this.date) == null ? void 0 : _a.toISOString()).format(this.format);\n  }\n  getTimezoneName() {\n    if (this.date === null) {\n      return \"--\";\n    }\n    const dateObj = this.date ? this.date : /* @__PURE__ */ new Date();\n    const matches = /\\((.*)\\)/.exec(dateObj.toString());\n    return matches ? matches[1] : \"--\";\n  }\n};\n__name(DatePayload, \"DatePayload\");\n\n// src/Payloads/DecodedJsonPayload.ts\nvar DecodedJsonPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const decodedJson = JSON.parse(this.value);\n    return {\n      // TODO: use ArgumentConverter\n      content: decodedJson,\n      //ArgumentConverter::convertToPrimitive(decodedJson),\n      label: \"JSON\"\n    };\n  }\n};\n__name(DecodedJsonPayload, \"DecodedJsonPayload\");\n\n// src/Payloads/ErrorPayload.ts\nvar ErrorPayload = class extends Payload {\n  constructor(err, label = \"Error\") {\n    super();\n    this.err = err;\n    this.label = label;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatError(),\n      label: this.label\n    };\n  }\n  formatError() {\n    return `<span class=\"text-red-400 bold\">${this.err.name}</span>: <br><span class=\"pl-5 text-gray-500\">${this.err.message}</span>`;\n  }\n};\n__name(ErrorPayload, \"ErrorPayload\");\n\n// src/Payloads/EventPayload.ts\nvar EventPayload = class extends Payload {\n  constructor(eventName, payload) {\n    super();\n    this.eventName = eventName;\n    this.payload = payload;\n  }\n  getType() {\n    return \"event\";\n  }\n  getContent() {\n    return {\n      name: this.eventName,\n      event: this.payload[0],\n      payload: ArgumentConverter.convertToPrimitive(this.payload).value,\n      class_based_event: true\n    };\n  }\n};\n__name(EventPayload, \"EventPayload\");\n\n// src/Payloads/ExceptionPayload.ts\nvar ExceptionPayload = class extends Payload {\n  constructor(exception, meta = {}) {\n    super();\n    this.meta = {};\n    this.stack = StackTrace.getSync({});\n    this.exception = exception;\n    this.meta = meta;\n  }\n  getType() {\n    return \"exception\";\n  }\n  getContent() {\n    return {\n      class: this.exception.name,\n      message: this.exception.message,\n      frames: this.getFrames(),\n      meta: this.meta\n    };\n  }\n  getFrames() {\n    return this.stack.slice(1).map((frame) => {\n      var _a, _b, _c, _d;\n      const funcNameParts = (_b = (_a = frame.functionName) == null ? void 0 : _a.split(\".\")) != null ? _b : [\"unknown\", \"unknown\"];\n      const methodName = funcNameParts.pop();\n      let className = funcNameParts.pop();\n      if (typeof className === \"undefined\") {\n        className = \"unknown\";\n      }\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\"),\n        snippet: []\n      };\n    }).filter((obj) => !obj.file_name.startsWith(\"node:\")).filter((obj) => !obj.file_name.includes(\"jest-circus\")).filter((obj) => obj.class !== \"Ray\" && obj.method !== \"exception\");\n  }\n};\n__name(ExceptionPayload, \"ExceptionPayload\");\n\n// src/Payloads/HideAppPayload.ts\nvar HideAppPayload = class extends Payload {\n  getType() {\n    return \"hide_app\";\n  }\n};\n__name(HideAppPayload, \"HideAppPayload\");\n\n// src/Payloads/HidePayload.ts\nvar HidePayload = class extends Payload {\n  getType() {\n    return \"hide\";\n  }\n};\n__name(HidePayload, \"HidePayload\");\n\n// src/lib/utils.ts\nimport { v4 as uuidv4 } from \"uuid\";\nfunction randomInteger(minimum, maximum) {\n  if (maximum === void 0) {\n    maximum = minimum;\n    minimum = 0;\n  }\n  if (typeof minimum !== \"number\" || typeof maximum !== \"number\") {\n    throw new TypeError(\"Expected all arguments to be numbers\");\n  }\n  return Math.floor(Math.random() * (maximum - minimum + 1) + minimum);\n}\n__name(randomInteger, \"randomInteger\");\nvar sleep = /* @__PURE__ */ __name((seconds) => {\n  return usleep(seconds * 1e3);\n}, \"sleep\");\nvar usleep = /* @__PURE__ */ __name((milliseconds) => {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  while ((/* @__PURE__ */ new Date()).getTime() < start + milliseconds) {\n  }\n}, \"usleep\");\nvar encodeHtmlEntities = /* @__PURE__ */ __name((str) => {\n  const escapeChars = {\n    \"\\xA2\": \"cent\",\n    \"\\xA3\": \"pound\",\n    \"\\xA5\": \"yen\",\n    \"\\u20AC\": \"euro\",\n    \"\\xA9\": \"copy\",\n    \"\\xAE\": \"reg\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"&\": \"amp\",\n    \"'\": \"#39\"\n  };\n  const chars = Object.keys(escapeChars);\n  const regex = new RegExp(`[${chars.join(\"\")}]`, \"g\");\n  return str.replace(regex, (m) => `&${escapeChars[m]};`);\n}, \"encodeHtmlEntities\");\nvar spacesToHtmlSpaces = /* @__PURE__ */ __name((spaces) => {\n  return \"&nbsp;\".repeat(spaces.length);\n}, \"spacesToHtmlSpaces\");\nvar encodeNewLinesToHtml = /* @__PURE__ */ __name((str) => {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, \"<br>\");\n}, \"encodeNewLinesToHtml\");\nvar formatHtmlForDisplay = /* @__PURE__ */ __name((html, options = { encodeEntities: true }) => {\n  if (options.encodeEntities) {\n    html = encodeHtmlEntities(html);\n  }\n  return encodeNewLinesToHtml(\n    html.replace(/^(\\s+)/gm, (m) => `${spacesToHtmlSpaces(m)}`)\n    // preserve indentation spaces\n  );\n}, \"formatHtmlForDisplay\");\nvar nonCryptoUuidV4 = /* @__PURE__ */ __name(() => {\n  const v4options = {\n    random: [\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255),\n      randomInteger(1, 255)\n    ]\n  };\n  return uuidv4(v4options).toString();\n}, \"nonCryptoUuidV4\");\nvar end = /* @__PURE__ */ __name((arr) => arr.length ? arr[arr.length - 1] : false, \"end\");\n\n// src/Payloads/HtmlMarkupPayload.ts\nimport formatXml from \"xml-formatter\";\nvar HtmlMarkupPayload = class extends Payload {\n  constructor(value, options = { highlight: \"none\" }) {\n    super();\n    this.value = value;\n    this.options = options;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatMarkupForDisplay(this.value);\n    return {\n      content,\n      label: \"Markup\"\n    };\n  }\n  formatMarkupForDisplay(markup) {\n    const content = this.formatAndIndentMarkup(markup);\n    return this.highlightHtmlMarkup(formatHtmlForDisplay(content, { encodeEntities: true }));\n  }\n  formatAndIndentMarkup(markup) {\n    return formatXml(markup.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n  highlightHtmlMarkup(markup) {\n    return markup.replace(/&quot;/g, '\"').replace(/=\"([^\"]+)\"/g, `=<span style='color:#16A34A;'>&quot;$1&quot;</span>`).replace(/(&lt;[A-Za-z\\d-]+)(\\s|&nbsp;|&gt;)/g, '<span style=\"color:#1D4ED8;\">$1</span>$2').replace(/(&lt;\\/[A-Za-z\\d-]+)(&gt;)/g, '<span style=\"color:#1D4ED8;\">$1$2</span>');\n  }\n};\n__name(HtmlMarkupPayload, \"HtmlMarkupPayload\");\n\n// src/Payloads/ImagePayload.ts\nvar ImagePayload = class extends Payload {\n  constructor(location) {\n    super();\n    this.location = location;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const location = this.location.replace('\"', '\\\\\\\\\"');\n    return {\n      content: `<img src=\"${location}\" alt=\"\" />`,\n      label: \"Image\"\n    };\n  }\n};\n__name(ImagePayload, \"ImagePayload\");\n\n// src/Payloads/JsonStringPayload.ts\nvar JsonStringPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"json_string\";\n  }\n  getContent() {\n    return {\n      value: JSON.stringify(this.value)\n    };\n  }\n};\n__name(JsonStringPayload, \"JsonStringPayload\");\n\n// src/Payloads/LabelPayload.ts\nvar LabelPayload = class extends Payload {\n  constructor(label) {\n    super();\n    this.label = label;\n  }\n  getType() {\n    return \"label\";\n  }\n  getContent() {\n    return {\n      label: this.label\n    };\n  }\n};\n__name(LabelPayload, \"LabelPayload\");\n\n// src/Payloads/MeasurePayload.ts\nvar MeasurePayload = class extends Payload {\n  constructor(name, stopwatchEvent) {\n    super();\n    /** @var boolean */\n    this.isNewTimer = false;\n    /** @var float|number */\n    this.totalTime = 0;\n    /** @var number */\n    this.maxMemoryUsageDuringTotalTime = 0;\n    /** @var float|number */\n    this.timeSinceLastCall = 0;\n    /** @var number */\n    this.maxMemoryUsageSinceLastCall = 0;\n    this.name = name;\n    this.totalTime = stopwatchEvent.getDuration();\n    this.maxMemoryUsageDuringTotalTime = stopwatchEvent.getMemory();\n    const periods = stopwatchEvent.getPeriods();\n    if (periods.length > 1) {\n      this.timeSinceLastCall = end(periods);\n      this.maxMemoryUsageSinceLastCall = 0;\n    }\n  }\n  getType() {\n    return \"measure\";\n  }\n  concernsNewTimer() {\n    this.isNewTimer = true;\n    this.totalTime = 0;\n    this.maxMemoryUsageDuringTotalTime = 0;\n    this.timeSinceLastCall = 0;\n    this.maxMemoryUsageSinceLastCall = 0;\n    return this;\n  }\n  getContent() {\n    return {\n      name: this.name,\n      is_new_timer: this.isNewTimer,\n      total_time: this.totalTime,\n      max_memory_usage_during_total_time: this.maxMemoryUsageDuringTotalTime,\n      time_since_last_call: this.timeSinceLastCall,\n      max_memory_usage_since_last_call: this.maxMemoryUsageSinceLastCall\n    };\n  }\n};\n__name(MeasurePayload, \"MeasurePayload\");\n\n// src/Payloads/NewScreenPayload.ts\nvar NewScreenPayload = class extends Payload {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  getType() {\n    return \"new_screen\";\n  }\n  getContent() {\n    return {\n      name: this.name\n    };\n  }\n};\n__name(NewScreenPayload, \"NewScreenPayload\");\n\n// src/Payloads/NotifyPayload.ts\nvar NotifyPayload = class extends Payload {\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"notify\";\n  }\n  getContent() {\n    return {\n      value: this.text\n    };\n  }\n};\n__name(NotifyPayload, \"NotifyPayload\");\n\n// src/Payloads/RemovePayload.ts\nvar RemovePayload = class extends Payload {\n  getType() {\n    return \"remove\";\n  }\n};\n__name(RemovePayload, \"RemovePayload\");\n\n// src/Payloads/ScreenColorPayload.ts\nvar ScreenColorPayload = class extends Payload {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  getType() {\n    return \"screen_color\";\n  }\n  getContent() {\n    return {\n      color: this.color\n    };\n  }\n};\n__name(ScreenColorPayload, \"ScreenColorPayload\");\n\n// src/Payloads/SeparatorPayload.ts\nvar SeparatorPayload = class extends Payload {\n  getType() {\n    return \"separator\";\n  }\n};\n__name(SeparatorPayload, \"SeparatorPayload\");\n\n// src/Payloads/ShowAppPayload.ts\nvar ShowAppPayload = class extends Payload {\n  getType() {\n    return \"show_app\";\n  }\n};\n__name(ShowAppPayload, \"ShowAppPayload\");\n\n// src/Payloads/SizePayload.ts\nvar SizePayload = class extends Payload {\n  constructor(size) {\n    super();\n    this.size = size;\n  }\n  getType() {\n    return \"size\";\n  }\n  getContent() {\n    return {\n      size: this.size\n    };\n  }\n};\n__name(SizePayload, \"SizePayload\");\n\n// src/Payloads/TablePayload.ts\nvar TablePayload = class extends Payload {\n  constructor(values, label = \"Table\") {\n    super();\n    this.values = values;\n    this.label = label;\n  }\n  getType() {\n    return \"table\";\n  }\n  getContent() {\n    const values = this.getValues();\n    return {\n      values,\n      label: this.label\n    };\n  }\n  getValues() {\n    if (Array.isArray(this.values)) {\n      return this.values.map((item) => {\n        return ArgumentConverter.convertToPrimitive(item).value;\n      });\n    }\n    const values = {};\n    for (const prop in this.values) {\n      values[prop] = ArgumentConverter.convertToPrimitive(this.values[prop]).value;\n    }\n    return values;\n  }\n};\n__name(TablePayload, \"TablePayload\");\n\n// src/Payloads/TextPayload.ts\nvar TextPayload = class extends Payload {\n  // eslint-disable-next-line no-unused-vars\n  constructor(text) {\n    super();\n    this.text = text;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    return {\n      content: this.formatContent(),\n      label: \"Text\"\n    };\n  }\n  formatContent() {\n    return formatHtmlForDisplay(this.text, { encodeEntities: true });\n  }\n};\n__name(TextPayload, \"TextPayload\");\n\n// src/Payloads/TracePayload.ts\nvar TracePayload = class extends Payload {\n  constructor(frames) {\n    super();\n    this.startFromIndexNum = null;\n    this.limitNum = null;\n    this.frames = RemovesRayFrames.removeRayFrames(frames);\n  }\n  startFromIndex(index) {\n    this.startFromIndexNum = index;\n    return this;\n  }\n  limit(limit) {\n    this.limitNum = limit;\n    return this;\n  }\n  getType() {\n    return \"trace\";\n  }\n  getContent() {\n    var _a;\n    let frames = this.frames.map((frame) => {\n      var _a2, _b, _c, _d;\n      const funcNameParts = (_a2 = frame.getFunctionName()) == null ? void 0 : _a2.replace(\"Proxy.\", \"\").split(\".\").slice(0);\n      const className = (funcNameParts == null ? void 0 : funcNameParts.length) ? funcNameParts.shift() : \"\";\n      const methodName = (_b = funcNameParts == null ? void 0 : funcNameParts.join(\".\")) != null ? _b : \"\";\n      return {\n        file_name: this.replaceRemotePathWithLocalPath((_c = frame.getFileName()) != null ? _c : \"\"),\n        line_number: frame.getLineNumber(),\n        class: className,\n        method: methodName,\n        vendor_frame: (_d = frame.getFileName()) == null ? void 0 : _d.includes(\"node_modules\")\n      };\n    });\n    if (this.limitNum !== null) {\n      frames = frames.slice((_a = this.startFromIndexNum) != null ? _a : 0, this.limitNum);\n    }\n    return { frames };\n  }\n};\n__name(TracePayload, \"TracePayload\");\n\n// src/Payloads/XmlPayload.ts\nimport * as xmlfmt from \"xml-formatter\";\nvar formatXml2 = xmlfmt.default;\nvar XmlPayload = class extends Payload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  getType() {\n    return \"custom\";\n  }\n  getContent() {\n    const content = this.formatXmlForDisplay(this.value);\n    return {\n      content,\n      label: \"XML\"\n    };\n  }\n  formatXmlForDisplay(xml) {\n    const content = this.formatAndIndentXml(xml);\n    return this.encodeXml(content);\n  }\n  encodeXml(xml) {\n    return formatHtmlForDisplay(xml, { encodeEntities: true });\n  }\n  formatAndIndentXml(xml) {\n    return formatXml2(xml.toString(), {\n      indentation: \"    \",\n      //filter: (node) => node.type !== 'Comment',\n      collapseContent: true,\n      lineSeparator: \"\\n\"\n    });\n  }\n};\n__name(XmlPayload, \"XmlPayload\");\n\n// src/Request.ts\nvar Request = class {\n  constructor(uuid, payloads, meta = []) {\n    this.uuid = uuid;\n    this.payloads = payloads;\n    this.meta = meta;\n  }\n  toArray() {\n    return {\n      uuid: this.uuid,\n      payloads: this.payloads.map((payload) => payload.toArray()),\n      meta: this.meta\n    };\n  }\n  toJson() {\n    return JSON.stringify(this.toArray());\n  }\n};\n__name(Request, \"Request\");\n\n// src/Client.ts\nimport axios from \"axios\";\nvar _Client = class {\n  constructor(portNumber = 23517, host = \"localhost\", scheme = \"http\") {\n    this.scheme = \"http\";\n    this.portNumber = portNumber;\n    this.host = host;\n    this.scheme = scheme;\n  }\n  async init() {\n    await this.updateRayAvailabilty();\n  }\n  isRayAvailable() {\n    this.attemptAvailableReset();\n    if (_Client.rayState === null) {\n      this.updateRayAvailabilty();\n    }\n    if (_Client.rayState !== null) {\n      return _Client.rayState;\n    }\n    return true;\n  }\n  attemptAvailableReset() {\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck >= 3e4) {\n      _Client.rayState = null;\n    }\n  }\n  async updateRayAvailabilty() {\n    let result = true;\n    if (_Client.lastRayStateCheck !== null && (/* @__PURE__ */ new Date()).getTime() - _Client.lastRayStateCheck < 3e4) {\n      return true;\n    }\n    _Client.lastRayStateCheck = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      await axios.get(this.getUrlForPath(\"/locks/__availabilty_check\"), {});\n    } catch (err) {\n      if (err.response) {\n        result = true;\n      } else if (err.request) {\n        result = false;\n      } else {\n        result = false;\n      }\n    } finally {\n      _Client.rayState = result;\n    }\n  }\n  getUrlForPath(path) {\n    var _a;\n    path = path.replace(/^\\//, \"\");\n    return `${(_a = this.scheme) != null ? _a : \"http\"}://${this.host}:${this.portNumber}/${path}`;\n  }\n  async send(request) {\n    if (_Client.rayState === null || _Client.lastRayStateCheck === null) {\n      this.updateRayAvailabilty();\n    }\n    try {\n      request.payloads = this.ensureAllPayloadsHaveAnOrigin(request.payloads);\n      await axios.post(this.getUrlForPath(\"/\"), request.toArray(), { withCredentials: false });\n    } catch (err) {\n    }\n  }\n  ensureAllPayloadsHaveAnOrigin(payloads) {\n    payloads.forEach((payload) => {\n      if (payload.data.origin.file === null || payload.data.origin.file === \"\" || typeof payload.data.origin[\"file\"] === \"undefined\") {\n        payload.data.origin[\"file\"] = \"/unknown-file.js\";\n        payload.data.origin[\"line_number\"] = 1;\n        payload.data.origin[\"function_name\"] = \"unknown\";\n      }\n    });\n    return payloads;\n  }\n  async lockExists(lockName) {\n    return new Promise(async (resolve, reject) => {\n      let resp;\n      try {\n        resp = await axios.get(this.getUrlForPath(`/locks/${lockName}`));\n      } catch (err) {\n        return false;\n      }\n      if (resp.data.stop_execution) {\n        reject(new Error(\"stopping execution\"));\n        return;\n      }\n      if (typeof resp.data[\"active\"] === \"undefined\") {\n        resolve(resp.data);\n        return;\n      }\n      resolve(resp.data);\n    });\n  }\n};\nvar Client = _Client;\n__name(Client, \"Client\");\nClient.rayState = true;\nClient.lastRayStateCheck = null;\n\n// src/Settings/Settings.ts\nvar Settings = class {\n  constructor(settings2) {\n    this.enable = true;\n    this._host = \"localhost\";\n    this._port = 23517;\n    this._scheme = \"http\";\n    this.remote_path = null;\n    this.local_path = null;\n    this.always_send_raw_values = false;\n    this.intercept_console_log = false;\n    this.enabled_callback = null;\n    this.sent_payload_callback = null;\n    this.sending_payload_callback = null;\n    this.originalSettings = Object.assign({}, settings2);\n    for (const prop in settings2) {\n      this[prop] = settings2[prop];\n    }\n  }\n  set host(value) {\n    this._host = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get host() {\n    return this._host;\n  }\n  set port(value) {\n    this._port = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  get port() {\n    return this._port;\n  }\n  get scheme() {\n    return this._scheme;\n  }\n  set scheme(value) {\n    this._scheme = value;\n    Ray.useClient(new Client(this.port, this.host, this.scheme));\n  }\n  toObject() {\n    return this.originalSettings;\n  }\n};\n__name(Settings, \"Settings\");\n\n// src/Stopwatch/StopwatchEvent.ts\nvar StopwatchEvent2 = class {\n  constructor(sw, lapTime = null) {\n    this.laps = [];\n    var _a;\n    this.name = (_a = sw.name) == null ? void 0 : _a.slice(0);\n    this.laps = sw.laps.slice(0);\n    this.startedAt = sw.startedAt;\n    this.endedAt = sw.endedAt;\n    this.lapTime = lapTime != null ? lapTime : (/* @__PURE__ */ new Date()).getTime();\n  }\n  getDuration() {\n    return this.laps.reduce((prev, cur) => cur + prev, 0);\n  }\n  getMemory() {\n    return 0;\n  }\n  getPeriods() {\n    return this.laps.slice();\n  }\n  getPreviousDuration() {\n    return end(this.laps) - ((/* @__PURE__ */ new Date()).getTime() - this.lapTime);\n  }\n};\n__name(StopwatchEvent2, \"StopwatchEvent\");\n\n// src/Stopwatch/Stopwatch.ts\nimport * as StopWatches from \"stopwatch-node/dist/stopwatch\";\nvar Stopwatch2 = class {\n  constructor(name = void 0) {\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  initialize(name) {\n    this.name = name;\n    this.sw = new StopWatches.StopWatch(name);\n    this.laps = [];\n    this.startedAt = 0;\n    this.endedAt = 0;\n  }\n  start(name) {\n    this.startedAt = (/* @__PURE__ */ new Date()).getTime();\n    this.sw.start(name);\n    return new StopwatchEvent2(this);\n  }\n  lap() {\n    const lapTime = (/* @__PURE__ */ new Date()).getTime();\n    const duration = lapTime - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this, lapTime);\n  }\n  stop() {\n    this.sw.stop();\n    this.endedAt = (/* @__PURE__ */ new Date()).getTime();\n    const duration = this.endedAt - this.startedAt;\n    this.laps.push(duration - this.totalDuration());\n    return new StopwatchEvent2(this);\n  }\n  totalDuration() {\n    return this.laps.reduce((prev, cur) => {\n      return cur + prev;\n    }, 0);\n  }\n  reset() {\n    this.initialize(this.name);\n    return this;\n  }\n  getLaps() {\n    return this.laps;\n  }\n};\n__name(Stopwatch2, \"Stopwatch\");\nvar Stopwatch_default = Stopwatch2;\n\n// src/Support/Counters.ts\nvar Counters = class {\n  constructor() {\n    this.counters = {};\n  }\n  increment(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      this.counters[name] = [ray(), 0];\n    }\n    const data = this.counters[name];\n    const ray2 = data[0];\n    const times = data[1];\n    const newTimes = times + 1;\n    this.counters[name] = [ray2, newTimes];\n    return [ray2, newTimes];\n  }\n  get(name) {\n    if (typeof this.counters[name] === \"undefined\") {\n      return 0;\n    }\n    return this.counters[name][1];\n  }\n  clear() {\n    this.counters = [];\n  }\n  setRay(name, ray2) {\n    this.counters[name][0] = ray2;\n  }\n  getCounters() {\n    return this.counters;\n  }\n};\n__name(Counters, \"Counters\");\n\n// src/Support/Limiters.ts\nvar Limiters = class {\n  constructor() {\n    this.counters = {};\n  }\n  initialize(origin, limit) {\n    const fingerprint = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[fingerprint] === \"undefined\") {\n      this.counters[fingerprint] = { counter: 0, limit, valid: true };\n    }\n    return this.counters[fingerprint];\n  }\n  increment(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return { counter: 0, limit: 0, valid: false };\n    }\n    const { counter, limit, valid } = this.counters[name];\n    this.counters[name] = { counter: counter + 1, limit, valid };\n    return this.counters[name];\n  }\n  canSendPayload(origin) {\n    const name = `${origin.file}:${origin.line_number}`;\n    if (typeof this.counters[name] === \"undefined\") {\n      return true;\n    }\n    const { counter, limit, valid } = this.counters[name];\n    return valid && (counter < limit || limit <= 0);\n  }\n};\n__name(Limiters, \"Limiters\");\n\n// src/Support/CacheStore.ts\nvar CacheStore = class {\n  constructor(clock) {\n    this.store = [];\n    this.clock = clock;\n  }\n  hit() {\n    this.store.push(this.clock.now());\n    return this;\n  }\n  clear() {\n    this.store = [];\n    return this;\n  }\n  count() {\n    return this.store.length;\n  }\n  countLastSecond() {\n    const lastSecond = this.clock.now().modify(\"-1 second\");\n    let amount = 0;\n    this.store.forEach((item) => {\n      if (this.isBetween(item, lastSecond, this.clock.now())) {\n        amount++;\n      }\n    });\n    return amount;\n  }\n  isBetween(toCheck, start, end2) {\n    return toCheck.getTimestamp() >= start.getTimestamp() && toCheck.getTimestamp() <= end2.getTimestamp();\n  }\n};\n__name(CacheStore, \"CacheStore\");\n\n// src/Support/Clock.ts\nvar Clock2 = class {\n};\n__name(Clock2, \"Clock\");\n\n// src/Support/DateImmutable.ts\nimport dayjs2 from \"dayjs\";\nvar DateImmutable3 = class {\n  get date() {\n    return dayjs2(this.dateStr).toDate();\n  }\n  set date(value) {\n    this.dateTs = value.getTime();\n    this.dateStr = value.toISOString();\n  }\n  static createFrom(date) {\n    return new DateImmutable3(date);\n  }\n  constructor(date = null) {\n    this.date = date != null ? date : /* @__PURE__ */ new Date();\n    this.dateStr = this.date.toISOString();\n    this.dateTs = this.date.getTime();\n  }\n  getTimestamp() {\n    return Math.floor(this.dateTs / 1e3);\n  }\n  modify(str) {\n    const strParts = str.split(\" \");\n    const parts = [];\n    for (let idx = 0; idx < strParts.length; idx++) {\n      parts.push({\n        value: Number(strParts[idx]),\n        unit: strParts[idx + 1]\n      });\n      idx++;\n    }\n    let tempDate = dayjs2(this.getTimestamp() * 1e3);\n    parts.forEach((part) => {\n      tempDate = tempDate.add(part.value * 1e3);\n    });\n    return DateImmutable3.createFrom(tempDate.toDate());\n  }\n};\n__name(DateImmutable3, \"DateImmutable\");\n\n// src/Support/SystemClock.ts\nvar SystemClock = class extends Clock2 {\n  now() {\n    return new DateImmutable3();\n  }\n};\n__name(SystemClock, \"SystemClock\");\n\n// src/Support/RateLimiter.ts\nvar RateLimiter = class {\n  constructor(maxCalls = null, maxPerSecond = null) {\n    this.notified = false;\n    this.maxCalls = maxCalls;\n    this.maxPerSecond = maxPerSecond;\n    this.cache = new CacheStore(new SystemClock());\n  }\n  static disabled() {\n    return new RateLimiter(null, null);\n  }\n  hit() {\n    this.cache.hit();\n    return this;\n  }\n  max(maxCalls = null) {\n    this.maxCalls = maxCalls;\n    return this;\n  }\n  perSecond(callsPerSecond = null) {\n    this.maxPerSecond = callsPerSecond;\n    return this;\n  }\n  isMaxReached() {\n    if (this.maxCalls === null) {\n      return false;\n    }\n    const reached = this.cache.count() >= this.maxCalls;\n    if (!reached) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  isMaxPerSecondReached() {\n    if (this.maxPerSecond === null) {\n      return false;\n    }\n    const reached = this.cache.countLastSecond() >= this.maxPerSecond;\n    if (reached === false) {\n      this.notified = false;\n    }\n    return reached;\n  }\n  clear() {\n    this.maxCalls = null;\n    this.maxPerSecond = null;\n    this.cache.clear();\n    return this;\n  }\n  isNotified() {\n    return this.notified;\n  }\n  notify() {\n    this.notified = true;\n  }\n  getCache() {\n    return this.cache;\n  }\n};\n__name(RateLimiter, \"RateLimiter\");\n\n// src/lib/version.ts\nvar PACKAGE_VERSION = \"__buildVersion__\";\nvar version_default = PACKAGE_VERSION;\n\n// src/Ray.ts\nvar BUILDING_STANDALONE_LIB = typeof __BUILDING_STANDALONE_LIB__ !== \"undefined\" && __BUILDING_STANDALONE_LIB__ === \"true\";\nimport * as md5lib from \"md5\";\nvar md5 = md5lib.default;\nvar getSync = StackTrace.getSync;\nvar _Ray = class extends Mixin(RayColors, RaySizes, RayScreenColors) {\n  constructor(settings2, client = null, uuid = null, inCallback = false) {\n    var _a, _b, _c;\n    super();\n    this.inCallback = false;\n    this.limitOrigin = null;\n    this.canSendPayload = true;\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    this.inCallback = inCallback;\n    this.settings = new Settings(_Ray.defaultSettings);\n    if (_Ray.enabled === null) {\n      _Ray.enabled = this.settings.enable !== false;\n    }\n    _Ray.client = (_a = client != null ? client : _Ray.client) != null ? _a : new Client(this.settings.port, this.settings.host);\n    _Ray._rateLimiter = (_b = _Ray._rateLimiter) != null ? _b : RateLimiter.disabled();\n    this.uuid = (_c = uuid != null ? uuid : _Ray.fakeUuid) != null ? _c : nonCryptoUuidV4();\n    if (this.settings.intercept_console_log && !this.interceptor().active()) {\n      this.interceptor().enable();\n    }\n    this.loadMacros();\n  }\n  static create(client = null, uuid = null) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        not_defined: false,\n        intercept_console_log: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null\n      };\n    }\n    const settings2 = new Settings(_Ray.defaultSettings);\n    return new this(settings2, client, uuid);\n  }\n  static useDefaultSettings(settings2) {\n    if (_Ray.defaultSettings.not_defined === true) {\n      _Ray.defaultSettings = {\n        enable: true,\n        host: \"localhost\",\n        port: 23517,\n        scheme: \"http\",\n        local_path: null,\n        remote_path: null,\n        always_send_raw_values: false,\n        enabled_callback: null,\n        sending_payload_callback: null,\n        sent_payload_callback: null,\n        not_defined: false\n      };\n    }\n    _Ray.defaultSettings = Object.assign({}, _Ray.defaultSettings, settings2);\n    _Ray.defaultSettings.not_defined = false;\n    _Ray.client = new Client(this.defaultSettings.port, this.defaultSettings.host);\n    return this;\n  }\n  loadMacros() {\n    for (const name in _Ray.macros) {\n      const handler = _Ray.macros[name];\n      this[name] = handler.bind(this);\n    }\n    return this;\n  }\n  interceptor() {\n    return _Ray.interceptor;\n  }\n  client() {\n    return _Ray.client;\n  }\n  enable() {\n    _Ray.enabled = true;\n    return this;\n  }\n  disable() {\n    _Ray.enabled = false;\n    return this;\n  }\n  enabled() {\n    if (typeof this.settings.enabled_callback === \"function\") {\n      return _Ray.enabled && this.settings.enabled_callback();\n    }\n    return _Ray.enabled;\n  }\n  disabled() {\n    return !this.enabled();\n  }\n  static useClient(client) {\n    this.client = client;\n  }\n  project(projectName) {\n    _Ray.projectName = projectName;\n    return this;\n  }\n  newScreen(name = \"\") {\n    const payload = new NewScreenPayload(name);\n    return this.sendRequest(payload);\n  }\n  clearAll() {\n    const payload = new ClearAllPayload();\n    return this.sendRequest(payload);\n  }\n  clearScreen() {\n    return this.newScreen();\n  }\n  color(color) {\n    const payload = new ColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  confetti() {\n    const payload = new ConfettiPayload();\n    return this.sendRequest(payload);\n  }\n  screenColor(color) {\n    const payload = new ScreenColorPayload(color);\n    return this.sendRequest(payload);\n  }\n  label(label) {\n    const payload = new LabelPayload(label);\n    return this.sendRequest(payload);\n  }\n  size(size) {\n    const payload = new SizePayload(size);\n    return this.sendRequest(payload);\n  }\n  remove() {\n    const payload = new RemovePayload();\n    return this.sendRequest(payload);\n  }\n  hide() {\n    const payload = new HidePayload();\n    return this.sendRequest(payload);\n  }\n  notify(text) {\n    const payload = new NotifyPayload(text);\n    return this.sendRequest(payload);\n  }\n  toJson(...values) {\n    const payloads = values.map((value) => new JsonStringPayload(value));\n    return this.sendRequest(payloads);\n  }\n  json(...jsons) {\n    const payloads = jsons.map((json) => new DecodedJsonPayload(json));\n    return this.sendRequest(payloads);\n  }\n  file(filename) {\n    console.error(`file() unsupport on web (${filename})`);\n    return this;\n  }\n  image(location) {\n    const payload = new ImagePayload(location);\n    return this.sendRequest(payload);\n  }\n  die(status = \"\") {\n    throw new Error(`Ray.die() called: ${status ? status : \"no message\"}`);\n  }\n  className(object) {\n    return this.send(object.constructor.name);\n  }\n  error(err) {\n    const payload = new ErrorPayload(err, \"Error\");\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  event(eventName, data = []) {\n    const payload = new EventPayload(eventName, data);\n    return this.sendRequest(payload);\n  }\n  exception(err, meta = {}) {\n    const payload = new ExceptionPayload(err, meta);\n    this.sendRequest(payload);\n    this.red();\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (!booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  showIf(booleanOrCallable) {\n    return this.showWhen(booleanOrCallable);\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeWhen(booleanOrCallable) {\n    if (typeof booleanOrCallable === \"function\") {\n      booleanOrCallable = booleanOrCallable();\n    }\n    if (booleanOrCallable) {\n      this.remove();\n    }\n    return this;\n  }\n  /**\n   * @deprecated Use `if` instead of this method\n   */\n  removeIf(booleanOrCallable) {\n    return this.removeWhen(booleanOrCallable);\n  }\n  ban() {\n    return this.send(\"\\u{1F576}\");\n  }\n  charles() {\n    return this.send(\"\\u{1F3B6} \\u{1F3B9} \\u{1F3B7} \\u{1F57A}\");\n  }\n  table(values, label = \"Table\") {\n    const payload = new TablePayload(values, label);\n    return this.sendRequest(payload);\n  }\n  count(name = null) {\n    var _a, _b, _c;\n    const fingerprint = md5(`${(_a = this.getCaller()) == null ? void 0 : _a.getFileName()}${(_b = this.getCaller()) == null ? void 0 : _b.getLineNumber()}`);\n    const [ray2, times] = _Ray.counters.increment((_c = name != null ? name : fingerprint) != null ? _c : \"none\");\n    let message = `Called `;\n    if (name) {\n      message += `'${name}' `;\n    }\n    message += `${times} ${times === 1 ? \"time\" : \"times\"}.`;\n    ray2.sendCustom(message, \"Count\");\n    return ray2;\n  }\n  clearCounters() {\n    _Ray.counters.clear();\n    return this;\n  }\n  async pause() {\n    _Ray.lockCounter++;\n    const lockName = md5(`${(/* @__PURE__ */ new Date()).getTime()}-${_Ray.lockCounter}`);\n    const payload = new CreateLockPayload(lockName);\n    this.sendRequest(payload);\n    return new Promise(async (resolve, reject) => {\n      let exists;\n      do {\n        sleep(1);\n        try {\n          exists = await _Ray.client.lockExists(lockName);\n        } catch (err) {\n          reject(err);\n          return false;\n        }\n        if (exists !== true && exists && exists.stop_execution) {\n          reject(false);\n          return false;\n        }\n      } while (exists.active);\n      resolve(this);\n    });\n  }\n  stopTime(stopwatchName = \"\") {\n    if (stopwatchName === \"\") {\n      _Ray.stopWatches = {};\n      return this;\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] !== \"undefined\") {\n      delete _Ray.stopWatches[stopwatchName];\n    }\n    return this;\n  }\n  caller() {\n    const backtrace = getSync({});\n    const payload = new CallerPayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  trace() {\n    const backtrace = getSync({});\n    const payload = new TracePayload(backtrace);\n    return this.sendRequest(payload);\n  }\n  measure(stopwatchName = \"default\") {\n    if (stopwatchName instanceof Function) {\n      return this.measureClosure(stopwatchName);\n    }\n    if (typeof _Ray.stopWatches[stopwatchName] === \"undefined\") {\n      const stopwatch2 = this.getStopwatch(stopwatchName);\n      _Ray.stopWatches[stopwatchName] = stopwatch2;\n      const event2 = stopwatch2.start(stopwatchName);\n      const payload2 = this.getMeasurePayload(stopwatchName, event2);\n      payload2.concernsNewTimer();\n      return this.sendRequest(payload2);\n    }\n    const stopwatch = _Ray.stopWatches[stopwatchName];\n    const event = stopwatch.lap();\n    const payload = this.getMeasurePayload(stopwatchName, event);\n    return this.sendRequest(payload);\n  }\n  measureClosure(closure) {\n    const stopwatch = this.getStopwatch(\"closure\");\n    stopwatch.start(\"closure\");\n    closure();\n    const event = stopwatch.stop();\n    const payload = this.getMeasurePayload(\"closure\", event);\n    return this.sendRequest(payload);\n  }\n  getStopwatch(name) {\n    return new Stopwatch2(name);\n  }\n  getMeasurePayload(name, event) {\n    return new MeasurePayload(name, event);\n  }\n  separator() {\n    const payload = new SeparatorPayload();\n    return this.sendRequest(payload);\n  }\n  xml(xml) {\n    const payload = new XmlPayload(xml);\n    return this.sendRequest(payload);\n  }\n  html(html = \"\") {\n    const payload = new HtmlPayload(html);\n    return this.sendRequest(payload);\n  }\n  text(text = \"\") {\n    const payload = new TextPayload(text);\n    return this.sendRequest(payload);\n  }\n  date(date) {\n    const payload = new DatePayload(date);\n    return this.sendRequest(payload);\n  }\n  raw(...args) {\n    if (!args.length) {\n      return this;\n    }\n    const payloads = args.map((arg) => LogPayload.createForArguments([arg]));\n    return this.sendRequest(payloads);\n  }\n  send(...args) {\n    if (!args.length) {\n      return this;\n    }\n    if (this.settings.always_send_raw_values) {\n      return this.raw(...args);\n    }\n    const payloads = PayloadFactory.createForValues(args);\n    return this.sendRequest(payloads);\n  }\n  pass(argument) {\n    this.send(argument);\n    return argument;\n  }\n  showApp() {\n    const payload = new ShowAppPayload();\n    return this.sendRequest(payload);\n  }\n  hideApp() {\n    const payload = new HideAppPayload();\n    return this.sendRequest(payload);\n  }\n  macro(name, handler) {\n    _Ray.macros[name] = handler;\n    this[name] = handler.bind(this);\n    return this;\n  }\n  htmlMarkup(html, options = {}) {\n    const payload = new HtmlMarkupPayload(html, options);\n    return this.sendRequest(payload);\n  }\n  if(boolOrCallable, callback = null) {\n    if (typeof boolOrCallable === \"function\") {\n      boolOrCallable = boolOrCallable();\n    }\n    if (boolOrCallable && callback !== null) {\n      callback(this);\n    }\n    if (callback === null) {\n      this.canSendPayload = boolOrCallable;\n    }\n    return this;\n  }\n  limit(count) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, count);\n    return this;\n  }\n  once(...args) {\n    const frame = this.getOriginFrame();\n    this.limitOrigin = {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n    _Ray.limiters.initialize(this.limitOrigin, 1);\n    if (args.length > 0) {\n      return this.send(...args);\n    }\n    return this;\n  }\n  sendCustom(content, label = \"\") {\n    const payload = new CustomPayload(content, label);\n    return this.sendRequest(payload);\n  }\n  getOriginFrame() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.sendRequest\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = RemovesRayFrames.removeRayFrames(\n      st.slice(startFrameIndex).filter((frame) => {\n        var _a;\n        return !((_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.\"));\n      })\n    );\n    return callerFrames.slice(0).shift();\n  }\n  getCaller() {\n    const st = getSync({});\n    let startFrameIndex = st.findIndex((frame) => {\n      var _a;\n      return (_a = frame.functionName) == null ? void 0 : _a.includes(\"Ray.getCaller\");\n    });\n    if (startFrameIndex === -1) {\n      startFrameIndex = 0;\n    }\n    const callerFrames = st.slice(startFrameIndex);\n    if (callerFrames.length === 1) {\n      return callerFrames.shift();\n    }\n    return callerFrames.slice(2).shift();\n  }\n  getOriginData() {\n    const frame = this.getOriginFrame();\n    return {\n      function_name: frame == null ? void 0 : frame.getFunctionName(),\n      file: frame == null ? void 0 : frame.getFileName(),\n      line_number: frame == null ? void 0 : frame.getLineNumber(),\n      hostname: Hostname.get()\n    };\n  }\n  sendRequest(payloads, meta = []) {\n    var _a;\n    if (!this.enabled()) {\n      return this;\n    }\n    if (!this.canSendPayload) {\n      return this;\n    }\n    if (this.limitOrigin !== null) {\n      if (!_Ray.limiters.canSendPayload(this.limitOrigin)) {\n        return this;\n      }\n      _Ray.limiters.increment(this.limitOrigin);\n    }\n    if (!Array.isArray(payloads)) {\n      payloads = [payloads];\n    }\n    if (this.rateLimiter().isMaxReached() || this.rateLimiter().isMaxPerSecondReached()) {\n      this.notifyWhenRateLimitReached();\n      return this;\n    }\n    const allMeta = Object.assign(\n      {},\n      {\n        node_ray_package_version: version_default,\n        project_name: _Ray.projectName\n      },\n      meta\n    );\n    payloads.forEach((payload) => {\n      payload.data.origin = this.getOriginData();\n      payload.remotePath = this.settings.remote_path;\n      payload.localPath = this.settings.local_path;\n    });\n    if (this.settings.sending_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sending_payload_callback(new _Ray(this.settings, this.client(), this.uuid, true), payloads);\n      this.inCallback = false;\n    }\n    const request = new Request(this.uuid, payloads, allMeta);\n    (_a = _Ray.client) == null ? void 0 : _a.send(request);\n    this.rateLimiter().hit();\n    if (this.settings.sent_payload_callback !== null && !this.inCallback) {\n      this.inCallback = true;\n      this.settings.sent_payload_callback(this);\n      this.inCallback = false;\n    }\n    return this;\n  }\n  rateLimiter() {\n    return _Ray._rateLimiter;\n  }\n  notifyWhenRateLimitReached() {\n    if (this.rateLimiter().isNotified()) {\n      return;\n    }\n    const customPayload = new CustomPayload(\"Rate limit has been reached...\", \"Rate limit\");\n    const request = new Request(this.uuid, [customPayload], []);\n    _Ray.client.send(request);\n    this.rateLimiter().notify();\n  }\n  standalone(windowObject) {\n    if (typeof windowObject !== \"undefined\") {\n      windowObject[\"ray\"] = ray;\n      windowObject[\"Ray\"] = _Ray;\n    }\n  }\n};\nvar Ray = _Ray;\n__name(Ray, \"Ray\");\nRay.lockCounter = 0;\nRay.defaultSettings = { not_defined: true };\nRay.projectName = \"\";\nRay.counters = new Counters();\nRay.limiters = new Limiters();\nRay.interceptor = new ConsoleInterceptor();\n// @var \\Symfony\\Component\\Stopwatch\\Stopwatch[]\nRay.stopWatches = {};\nRay.enabled = null;\nRay.macros = {};\nRay._rateLimiter = RateLimiter.disabled();\nvar ray = /* @__PURE__ */ __name((...args) => {\n  return Ray.create().send(...args);\n}, \"ray\");\nvar standalone = /* @__PURE__ */ __name((windowObject) => {\n  if (typeof windowObject !== \"undefined\") {\n    windowObject[\"ray\"] = ray;\n    windowObject[\"Ray\"] = Ray;\n  }\n}, \"standalone\");\nfunction standaloneInitialization() {\n  if (typeof globalThis[\"window\"] !== \"undefined\") {\n    window[\"Ray\"] = {\n      ray,\n      Ray\n    };\n    window[\"rayInit\"] = standalone;\n  }\n}\n__name(standaloneInitialization, \"standaloneInitialization\");\nexport {\n  Ray,\n  ray,\n  standalone\n};\n",
  "import { Ray, ray } from 'node-ray/web';\n\nRay.useDefaultSettings({\n\tremote_path: 'webpack-internal:\\/\\/\\/(sc_server|sc_client|app-client)\\/\\.',\n\tlocal_path: process.env.LOCAL_PATH,\n\tsending_payload_callback: (instance: any, payloads: { data: { origin: any; }; }[] | { data: any; toArray: (() => { type: string; content: { label: string; }; origin: any; }) | (() => { type: string; content: { color: string; }; origin: any; }) | (() => { type: string; content: { label: string; }; origin: any; }) | (() => { type: string; content: { color: string; }; origin: any; }) | (() => { type: string; content: { label: string; }; origin: any; }) | (() => { type: string; content: { color: string; }; origin: any; }); }[]) => {\n\t\tswitch (payloads[0].data.origin.file.match(/webpack-internal:\\/\\/\\/(?<type>sc_server|sc_client|app-client)\\/\\./).groups.type) {\n\t\t\tcase 'sc_server':\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'label',\n\t\t\t\t\t\tcontent: { label: 'RSC' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\tcontent: { color: 'green' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tbreak;\n\t\t\tcase 'sc_client':\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'label',\n\t\t\t\t\t\tcontent: { label: 'SSR' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\tcontent: { color: 'orange' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tbreak;\n\t\t\tcase 'app-client':\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'label',\n\t\t\t\t\t\tcontent: { label: 'Browser' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tpayloads.push({ data: payloads[0].data, toArray: () => ({\n\t\t\t\t\t\ttype: 'color',\n\t\t\t\t\t\tcontent: { color: 'blue' },\n\t\t\t\t\t\torigin: payloads[0].data.origin,\n\t\t\t\t\t})});\n\t\t\t\tbreak;\n\t\t}\n\t},\n});\n\nexport default ray;"
  ],
  "mappings": "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",
  "debugId": "227E7B5B6B8765CD64756e2164756e21",
  "names": []
}